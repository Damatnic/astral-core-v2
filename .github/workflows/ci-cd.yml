name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_NAME: 'node-modules-cache'

jobs:
  # Quality checks job
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_NAME }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run ESLint
        run: npm run lint || true
        continue-on-error: true

      - name: Run TypeScript check
        run: npx tsc --noEmit --skipLibCheck || true
        continue-on-error: true

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=high || true
        continue-on-error: true

  # Test job
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_NAME }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run unit tests
        run: npm test -- --coverage --watchAll=false || true
        continue-on-error: true
        env:
          CI: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    
    strategy:
      matrix:
        environment: [development, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: node_modules
          key: ${{ env.CACHE_NAME }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_NAME }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build for ${{ matrix.environment }}
        run: |
          if [ "${{ matrix.environment }}" = "production" ]; then
            npm run build:production || npm run build
          else
            npm run build
          fi
        env:
          NODE_ENV: ${{ matrix.environment }}
          VITE_BUILD_MODE: ${{ matrix.environment }}

      - name: Verify service worker
        run: npm run verify:sw || true
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.environment }}
          path: dist/
          retention-days: 7

      - name: Analyze bundle size
        run: |
          echo "Bundle size analysis for ${{ matrix.environment }}:"
          du -sh dist/* | sort -h || true
        continue-on-error: true

  # Lighthouse CI
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

  # Security scan
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'CoreV2'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
        continue-on-error: true

  # Deploy to Netlify (only on main/master branch)
  deploy-netlify:
    name: Deploy to Netlify
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-production
          path: dist/

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 10

  # Health check after deployment
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy-netlify
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check site availability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://astral-core-react.netlify.app)
          if [ $response -eq 200 ]; then
            echo "✅ Site is up and running!"
            exit 0
          else
            echo "❌ Site returned status code: $response"
            exit 1
          fi
        continue-on-error: true

      - name: Check service worker
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://astral-core-react.netlify.app/sw.js)
          if [ $response -eq 200 ]; then
            echo "✅ Service worker is accessible!"
          else
            echo "⚠️ Service worker returned status code: $response"
          fi
        continue-on-error: true

      - name: Check critical resources
        run: |
          for resource in "crisis-resources.json" "offline.html" "manifest.json"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://astral-core-react.netlify.app/$resource)
            if [ $response -eq 200 ]; then
              echo "✅ $resource is accessible!"
            else
              echo "⚠️ $resource returned status code: $response"
            fi
          done
        continue-on-error: true

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build, test, deploy-netlify]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: echo "✅ CI/CD Pipeline completed successfully!"

      - name: Notify on failure
        if: failure()
        run: echo "❌ CI/CD Pipeline failed. Please check the logs."

      # Add Slack/Discord/Email notifications here if needed
      # - name: Send Slack notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     text: 'CI/CD Pipeline ${{ job.status }}'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}