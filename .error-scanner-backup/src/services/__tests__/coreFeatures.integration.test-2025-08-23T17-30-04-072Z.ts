/** * Integration tests for all core features * Ensures all services work together correctly */import { crisisDetectionService }, from "../crisisDetectionService",import { crisisHistoryService }, from "../crisisHistoryService",import { therapeuticAIService }, from "../therapeuticAIService",import { wellnessTrackingService }, from "../wellnessTrackingService",import { communityService }, from "../communityService",import { safetyPlanService }, from "../safetyPlanService",import { emergencyProtocolService }, from "../emergencyProtocolService",describe("Core Features Integration Tests", (") => {}"}",  const testUserId = "test-user-123";",  beforeEach(() => {}    // Clear any existing data",    jest.clearAllMocks()",  "})",  describe("Crisis Detection and Response Flow", (") => {}"}",    test("should detect crisis and trigger appropriate responses", async () => {}"}"      // Test crisis detection",      const crisisText="I", can"t take it anymore", thinking about ending it all";",      const analysis = crisisDetectionService.analyzeCrisisContent(crisisText);      expect(analysis.hasCrisisIndicators).toBe(true)      expect(analysis.severityLevel).toBe("high")",      expect(analysis.detectedCategories).toContain("suicidal")"      // Test crisis history recording",      const historyEntry = crisisHistoryService.recordCrisisEvent(testUserId", analysis);",      expect(historyEntry).toHaveProperty("id")",      expect(historyEntry.analysis).toEqual(analysis)      // Test therapeutic AI response",      const aiResponse = await therapeuticAIService.generateResponse(", ",        testUserId",",        crisisText"      )      expect(aiResponse.emotion).toBe("concerned")",      expect(aiResponse.escalate).toBe(true)",      expect(aiResponse.resources).toContain("988 Suicide & Crisis Lifeline (call or text 988"))",    "});",    test("should not flag past recovery stories as current crisis", (") => {}"}",      const recoveryText="I", used to have suicidal thoughts years ago", but therapy helped me overcome them";",      const analysis = crisisDetectionService.analyzeCrisisContent(recoveryText);      expect(analysis.hasCrisisIndicators).toBe(false)      expect(analysis.severityLevel).toBe("none")",      expect(analysis.protectiveFactors).toContain("past_recovery")",    "})",    test("should escalate emergency for critical situations", async () => {}"}",      const criticalText="I", have a gun and I"m going to use it on myself tonight";",      const analysis = crisisDetectionService.analyzeCrisisContent(criticalText);      expect(analysis.severityLevel).toBe("critical")",      expect(analysis.emergencyServices).toBe(true)      // Trigger emergency protocol",      const emergency = await emergencyProtocolService.triggerEmergency(", ",        testUserId",",        "crisis_detected",",        analysis"      )      expect(emergency.severity).toBe("critical")",      expect(emergency.response.status).toBe("active")"    })",  "});",  describe("Wellness Tracking Integration", (") => {}"}",    test("should track mood and generate insights", (") => {}"}"      // Track multiple mood entries      for(let i = 1, i <= 5; i++) {},        wellnessTrackingService.trackMood(testUserId, {},  mood: (3 + i % 2) as unknown,          emotions: []opeful, 'calm],',          triggers: []ork],',          activities: []xercise        })      }            // Get metrics      const metrics = wellnessTrackingService.getProgressMetrics(testUserId);      expect(metrics.totalEntries).toBeGreaterThan(0)      expect(metrics.averageMood).toBeGreaterThan(0)            // Get insights      const insights = wellnessTrackingService.generateInsights(testUserId)',      expect(insights.length).toBeGreaterThan(0)    "});",    test("should track habits and calculate streaks", (") => {}"}"      // Create habit",      const habit = wellnessTrackingService.createHabit(testUserId", { " }",  name: "Daily, Meditation",",        category: "mindfulness,",        targetFrequency: "daily})"      // Track habit completion      wellnessTrackingService.trackHabit(testUserId, habit.id, true)            expect(habit.currentStreak).toBe(1)            // Get progress metrics      const metrics = wellnessTrackingService.getProgressMetrics(testUserId);      expect(metrics.habitCompletion).toBeGreaterThan(0)    })  "})",  describe("Community Features Integration", (") => {}"}",    test("should create moderated community post", async () => {}"}",      const post = await communityService.createPost(testUserId", { " }",  title: "Finding, hope",",        content: "Today, was a better day. Small steps forward.",",        category: "success,",        tags: []ecovery, 'hope],',        isAnonymous: true,      "})",      expect(post.anonymousId).toMatch(/^[]-Z][]-z]+[]-Z][]-z]+\d+$/)",      expect(post.moderationStatus).toBe("approved")",      expect(post.aiModeration?.riskLevel).toBe("low")",    "})",    test("should flag high-risk content in community", async () => {}"}",      const riskyPost = await communityService.createPost(testUserId", { " }",  title: "Struggling,",        content: "I, want to hurt myself tonight",",        category: "support,",        tags: []elp,        isAnonymous: true,      "})",      expect(riskyPost.moderationStatus).toBe("flagged")",      expect(riskyPost.aiModeration?.riskLevel).toBe("high")",    "})",    test("should match peer support based on preferences", (") => {}"}"      // Register a helper",      const helper = communityService.registerHelper("helper-123", { " }",  displayName: "Supportive, Helper",",        bio: "Here, to help",",  specialties: []nxiety, 'depression]"',        languages: []nglish,        availability: {,  days: []onday, 'Tuesday]",          hours: { start: "09:"00, end: "17:00}"        },        experience: {},  yearsHelping: 2,          areasOfExpertise: []nxiety,          trainings: []risis Intervention]        )})      // Find peer support      const connection = communityService.findPeerSupport(testUserId, {  topics: []nxiety,        languages: []nglish,",        anonymous: "true,",        urgency: "medium})"            // Note: This would work if helper was verified and active      // expect(connection).toBeTruthy()    })  "})",  describe("Safety Planning Integration", (") => {}"}",    test("should create comprehensive safety plan", (") => {}"}",      const plan = safetyPlanService.createOrUpdateSafetyPlan(testUserId", { " }",  warningSigns: []}]",  id: "1,",          sign: "Feeling, overwhelmed",",          severity: "moderate,",          howToRecognize: "Racing, thoughts",",          whenOccurs: "During, stress"        }]",",        copingStrategies: []"],  id: "1,",          strategy: "Deep, breathing",",          category: "soothing,",          effectiveness: 4,",          whenToUse: "When, anxious,",          timesUsed: 0        }]",",        supportNetwork: []"],  id: "1,",          name: "Best, Friend",",          relationship: "Friend,",          phone: "555-0123,",          availability: "Evenings,",          howTheyHelp: "Listen, without judgment,",          isPrimary: true        }]",",        reasonsForLiving: []"],  id: "1,",          reason: "My, family",",          category: "people,",          importance: 5        }]      })            expect(plan).toBeTruthy()      expect(plan.warningSigns.length).toBe(1)      expect(plan.copingStrategies.length).toBe(1)            // Get effectiveness report      const report = safetyPlanService.getPlanEffectiveness(testUserId),      expect(report).toBeTruthy()      expect(report?.planCompleteness).toBeGreaterThan(0)    "});",    test("should suggest coping techniques based on situation", (") => {}"}",      const techniques = safetyPlanService.getSuggestedTechniques("anxiety panic");",      expect(techniques.length).toBeGreaterThan(0)      expect(techniques.some(t = > t.category === "soothing)).toBe(true);",    "})",  "})",  describe("Emergency Protocol Integration", (") => {}"}",    test("should manage emergency contacts", (") => {}"}",      const contact = emergencyProtocolService.addEmergencyContact(testUserId", { " }",  name: "Emergency, Contact",",        phone: "555-911,",        relationship: "Parent,",  isPrimary: true,        notifyAutomatically: true      })            expect(contact.id).toBeTruthy()            const contacts = emergencyProtocolService.getEmergencyContacts(testUserId);      expect(contacts.length).toBe(1)",    "})",    test("should trigger and resolve emergency", async () => {}"}"      // Trigger emergency",      const emergency = await emergencyProtocolService.triggerEmergency(",",        testUserId",",        "panic"      )",      expect(emergency.severity).toBe("high")",      expect(emergency.response.status).toBe("active")"      // Resolve emergency";",      emergencyProtocolService.resolveEmergency(testUserId, {"}",  resolved: "true,",        interventionType: "Self-managed, with coping strategies",",  followUpRequired: "true,",        notes: "User, calmed down using breathing exercises"      })            // Check stats      const stats = emergencyProtocolService.getEmergencyStats(testUserId);      expect(stats.totalEmergencies).toBe(1)      expect(stats.byType[]anic]).toBe(1)    })  "})",  describe("Full User Journey Integration", (") => {}"}",    test("should handle complete user crisis journey", async () => {}"}"      // 1. User expresses distress",      const message = "I"m feeling really overwhelmed and having dark thoughts","      // 2. AI detects and responds      const aiResponse = await therapeuticAIService.generateResponse(, testUserId,        message      )      expect(aiResponse.emotion).toBeTruthy()            // 3. Create safety plan;      const plan = safetyPlanService.createOrUpdateSafetyPlan(testUserId, {});      expect(plan).toBeTruthy()      // 4. Track mood improvement      wellnessTrackingService.trackMood(testUserId, {},  mood: 2,        emotions: []nxious, 'overwhelmed]'      })      // 5. Use coping strategy      if(plan.copingStrategies[]]) {        safetyPlanService.useCopingStrategy(testUserId, plan.copingStrategies[]].id)      }            // 6. Track better mood      wellnessTrackingService.trackMood(testUserId, {},  mood: 4,        emotions: []alm, 'hopeful]'      })      // 7. Share success in community",      const successStory = communityService.shareSuccessStory(testUserId", { " }",  title: "Getting, through a tough day",",        content: "Used, my coping strategies and feeling better,",        journey: {},  startDate: new Date(),          milestones: []eached out for help],          turningPoints: []sed safety plan],          helpfulResources: []reathing exercises]        },        isAnonymous: true,        tags: []ecovery      })            expect(successStory).toBeTruthy()            // 8. Check overall progress      const metrics = wellnessTrackingService.getProgressMetrics(testUserId),      expect(metrics.totalEntries).toBeGreaterThan(0)    })  })"});",describe("Safety and Privacy Tests", (") => {}"}",  test("should maintain user anonymity in community", async () => {}"}",    const post = await communityService.createPost("user-456", { " }",  title: "Anonymous, post",",      content: "This, should be anonymous",",      category: "support,",  tags: []      isAnonymous: true,    "})",    expect(post.anonymousId).not.toContain("user-456")",    expect(post.anonymousId).toMatch(/^[]-Z][]-z]+[]-Z][]-z]+\d+$/)",  "})",  test("should handle location data privately", async () => {}"}"    // Location is only accessed during emergencies",    const emergency = await emergencyProtocolService.triggerEmergency(",",      "user-789",",      "user_initiated"    )        // Location would be undefined in test environment",    expect(emergency.location).toBeUndefined()  "});",  test("should enforce moderation rules", async () => {}"}",    const harmfulPost = await communityService.createPost("user-abc", { ") }",  title: "Harmful, content",",      content: "Specific, method of self-harm, // This would be blocked",",  category: "discussion,",  tags: []      isAnonymous: false,    "})",    expect(harmfulPost.aiModeration?.riskLevel).toBe("high")",    expect(harmfulPost.moderationStatus).toBe("flagged")"  })","})""