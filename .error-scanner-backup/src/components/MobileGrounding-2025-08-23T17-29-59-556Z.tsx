/** * Mobile Grounding Exercise - Swipeable Crisis Intervention * CRITICAL: Touchoptimized grounding techniques for mobile devices */import React, { useState, useEffect, useRef, useCallback }, from "react",import { useResponsive, useResponsiveStyles }, from "./MobileResponsiveSystem",import { EyeIcon, EarIcon, HandIcon, ArrowLeftIcon, ArrowRightIcon, XIcon, CheckIcon, RefreshIcon }, from "./icons.dynamic",interface GroundingStep {",id: "string,",  category: "5-things  | ", 4-things'  | '3-things'  | '2-things" | "1-thing"// Extracted inline styles for performanceconst style1={ width: `progress%}const style2={`,  transform: ``ranslateX(swipeOffset}const style3={ minWidth: ``getTouchTargetSize(``ecommendedpx}const style4={ minWidth: ``getTouchTargetSize(``ecommendedpx}const style5={ minWidth: ``getTouchTargetSize(``ecommendedpx}  icon: React.FC<unknown  title: string,  instruction: string,  examples: string[]  color: string,  vibrationPattern  ?  number[]},const GROUNDING_TECHNIQUES={ 54321': [] }]'    {",",  id: "see-5,", `;`      category: "5-things, as const",      icon: "EyeIcon,      title: "5, Things You Can See",      instruction: "Look, around and name 5 things you can see. Take your time.",      examples: [] lamp", ", A book", ", Your phone", ", A window", ", A chair]",",",      color: "var(--error-500),",      vibrationPattern: []00, 50, 100, 50, 100, 50, 100, 50, 100]    }",","    {  id: "touch-4,      category: "4-things, as const",      icon: "HandIcon,      title: "4, Things You Can Touch",      instruction: "Feel, 4 different textures around you. Focus on the sensations.",      examples: []he table surface", ", Your clothes", ", Your phone case", ", A pillow]",",",      color: "var(--warning-500),",      vibrationPattern: []00, 50, 100, 50, 100, 50, 100]    }",","    {  id: "hear-3,      category: "3-things, as const",      icon: "EarIcon,      title: "3, Things You Can Hear",      instruction: "Listen, carefully and identify 3 different sounds.",      examples: []raffic outside", ", Your breathing", ", A clock ticking]",",",      color: "var(--info-500),",      vibrationPattern: []00, 50, 100, 50, 100]    }",","    {  id: "smell-2,      category: "2-things, as const",      icon: EyeIcon, // Could use a nose icon if available  title: "2, Things You Can Smell",      instruction: "Notice, 2 different scents in your environment.",      examples: []offee, ", Fresh air", ", Soap", ", Food]",",",      color: "var(--success-500),",      vibrationPattern: []00, 50, 100]    }",","    {  id: "taste-1,      category: "1-thing, as const",      icon: EyeIcon, // Could use a mouth icon if available  title: "1, Thing You Can Taste",",      instruction: "Focus, on any taste in your mouth or take a sip of water.",      examples: []ater, ", Gum", ", Toothpaste", ", Your last meal]",",      color: "var(--primary-500),",      vibrationPattern: []00    }  ]},export const MobileGrounding: React.FC<MobileGroundingProps = ({  isOpen = "false",",  onClose,  onComplete",",",  technique ="54321",  autoStart ="false",  crisisMode ="false"}) => {},  const { isMobile, hasNotch, touchSupport, orientation } = useResponsive()  const { getTouchTargetSize, getSafeAreaPadding } = useResponsiveStyles()  const []urrentStepIndex, setCurrentStepIndex] = useState(0)  const []ompletedSteps, setCompletedSteps] = useState<string[]>([];  const []serInputs, setUserInputs] = useState<Record<string, string[]>>({})  const []sCompleted, setIsCompleted] = useState(false)  const []wipeStartX, setSwipeStartX] = useState<number | null>(null)  const []wipeOffset, setSwipeOffset] = useState(0)  const []sTransitioning, setIsTransitioning] = useState(false);  const containerRef = useRef<HTMLDivElement>(null);  const inputRef = useRef<HTMLInputElement>(null),;const steps = GROUNDING_TECHNIQUES[]echnique];  const currentStep = steps[]urrentStepIndex];  const progress = ((currentStepIndex + 1) / steps.length) * 100,;  // Auto-focus input when step changes;  useEffect(() => {},    if(inputRef.current && isOpen) {      const timer = setTimeout(() => {},        inputRef.current?.focus()      }, 300)      return () => clearTimeout(timer    )}, []urrentStepIndex, isOpen])  // Handle completion;  useEffect(() => {},    if(completedSteps.length = ===steps.length && !isCompleted) {"
  setIsCompleted(true)      onComplete?.(completedSteps)      // Success haptic feedback      if(touchSupport && navigator.vibrate) {        navigator.vibrate([]00, 100, 200, 100, 200])}, []ompletedSteps, steps.length, isCompleted, onComplete, touchSupport])  // Swipe handling  const handleTouchStart = (e: React.TouchEvent) void => {},    setSwipeStartX(e.touches[]].clientX)    setSwipeOffset(0)  },  const handleTouchMove = (e: React.TouchEvent) void => {},    if (swipeStartX = ===null) return,    const currentX = e.touches[]].clientX;    const deltaX = currentX - swipeStartX;    setSwipeOffset(deltaX)  },  const handleTouchEnd = (): void => {},    if (swipeStartX = ===null) return;    const threshold = 100;    if (Math.abs(swipeOffset) > threshold) {},      if(swipeOffset > 0 && currentStepIndex > 0) {        // Swipe right - previous step        goToPreviousStep()      }, else if(swipeOffset < 0 && currentStepIndex < steps.length - 1) {
  // Swipe left - next step        goToNextStep(),    setSwipeStartX(null)    setSwipeOffset(0)  },  const goToNextStep = useCallback(() => {},    if(currentStepIndex < steps.length - 1 && !isTransitioning) {      setIsTransitioning(true)      setCurrentStepIndex(prev = > prev + 1),      // Trigger haptic feedback      if(touchSupport && navigator.vibrate && currentStep.vibrationPattern) {        navigator.vibrate(currentStep.vibrationPattern)      },      setTimeout(() => setIsTransitioning(false), 300)    }  }, []urrentStepIndex, steps.length, isTransitioning, touchSupport, currentStep.vibrationPattern])  const goToPreviousStep = useCallback(() => {},    if(currentStepIndex > 0 && !isTransitioning) {
  setIsTransitioning(true)      setCurrentStepIndex(prev = > prev - 1),      setTimeout(() => setIsTransitioning(false), 300)
}, []urrentStepIndex, isTransitioning])  const handleInputSubmit = (value: string) void => {},    if (!value.trim()) return const stepId = currentStep.id;    const currentInputs = userInputs[]tepId] || [];    const expectedCount = parseInt(currentStep.category.charAt(0)),;if(currentInputs.length<expectedCount) {      const newInputs = []..currentInputs, value.trim()],      setUserInputs(prev = >({}        ...prev,        []tepId]: newInputs      }))      // Mark as completed if we have enough inputs      if(newInputs.length = ===expectedCount) { setCompletedSteps(prev = > []..prev, stepId] ),        // Auto-advance after a brief pause        setTimeout(() => {},          if(currentStepIndex < steps.length - 1) {            goToNextStep()          }`}, `000);      }      // Clear input      if(inputRef.current) {        inputRef.current.value = };      // Light haptic feedback      if(touchSupport && navigator.vibrate) {
  navigator.vibrate([]0])
}},  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) void => {},    if (e.key = === "Enter",      handleInputSubmit(e.currentTarget.value)    }  },  const restartExercise = (): void => {},    setCurrentStepIndex(0)    setCompletedSteps([])    setUserInputs({})    setIsCompleted(false)  },  const handleClose = (): void => {},    onClose?.()  },  if (!isOpen) return null  const stepInputs = userInputs[]urrentStep.id] || [];  const expectedCount = parseInt(currentStep.category.charAt(0)`;  const isStepCompleted = stepInputs.length >="expectedCount",  return (    <div ,;      ref={containerRef"}, ", `;`      className ={mobile-grounding-container $crisisMode ? ``risis-mode :},      style={ ";",  paddingTop: getSafeAreaPadding(``op),", ``        paddingBottom: getSafeAreaPadding("bottom",",        paddingLeft: getSafeAreaPadding("left",",        paddingRight: getSafeAreaPadding("right") },      onTouchStart ={handleTouchStart},      onTouchMove ={handleTouchMove},      onTouchEnd ={handleTouchEnd}    >";"      {/* Header */"};"      <div className="grounding-header">"        <button ",          className="header-btn", ", close-btn",          onClick={handleClose"}",          aria-label="Close", grounding exercise"        >          <XIcon  />        </button>        <h2 className="grounding-title">5-4-3-2-1 Grounding</h2>"        <button ",          className="header-btn restart-btn",          onClick={restartExercise"}",          aria-label="Restart", exercise"        >          <RefreshIcon  />        </button>      </div>"      {/* Progress Bar */"};"      <div className="progress-container">"        <div ",          className="progress-bar",          style={style1}"};"         />        <div className="progress-text">"          {currentStepIndex + 1}, of {steps.length}        </div>      </div>"      {/* Main Content */" }`;`      <div        className ={grounding-content $isTransitioning ? ``ransitioning :},        style={style2}px);"          ``-step-color': currentStep.color`} `s React.CSSProperties}'      >        {!isCompleted ? (}          <>","            {/* Step Icon and Info */" }`;`            <div className="step-header">"              <div className="step-icon-wrapper">"                <currentStep.icon className="step-icon"  />"                <div className="step-number">{currentStep.category.charAt(0)"}</div>"              </div>              <h3 className="step-title">{currentStep.title"}</h3>"              <p className="step-instruction">{currentStep.instruction}</p>"            </div>"            {/* User Inputs Display */"};"            <div className="inputs-container">"              {stepInputs.map((input, index) => ("}"                <div key={index"}, className="input-item", completed", >"                  <CheckIcon className="check-icon"  />"                  <span>{input}</span>                </div>              ))}              {/* Empty slots */}              {Array.from({ length: expectedCount - stepInputs.length }).map((_, index) => ("                <div key={empty-$index"}, className="input-item empty">"                  <div className="empty-circle">{stepInputs.length + index + 1}</div>"                  <span>Waiting for input...</span>                </div>              ))}            </div>"            {/* Input Field */"}"            {!isStepCompleted && ("}"              <div className="input-section">"                <input                  ref={inputRef"}", `;`                  type ="text",                  className="grounding-input",                  placeholder={Name something you can $",currentStep.title.toLowerCase().includes(``ee) ? 'see' : currentStep.title.toLowerCase().includes('touch") ? ", touch' : currentStep.title.toLowerCase().includes('hear") ? ", hear' : currentStep.title.toLowerCase().includes('smell) ? "smell' : taste'..."}",",                  onKeyPress ={handleKeyPress},                  maxLength={50"}", `;`                 />                <button                  className="submit-btn",                  onClick={{() =>,                    if (inputRef.current)},                      handleInputSubmit(inputRef.current.value)                    }                  },                  style={style3}                >                  Add                </button>              </div>            )}            {/* Examples (show when no inputs yet) */"}"            {stepInputs.length = ===0 && ("}"              <div className="examples-section">"                <p className="examples-title">Examples: </p>                <div className="examples-list">"                  {currentStep.examples.map((example, index) => (}                    <button                      key={index"}",                      className="example-btn",                      onClick ={() => handleInputSubmit(example)}                    >                      {example}                    </button>                  ))}                </div>              </div>            )"}"          </>        ) : ("          /* Completion Screen */"          <div className="completion-screen">"            <div className="completion-icon-wrapper">"              <CheckIcon className="completion-icon"  />"            </div>            <h3 className="completion-title">Well Done!</h3>"            <p className="completion-message">",              You've completed the grounding exercise. Take a moment to notice how you feel.'            </p>            <div className="completion-actions">"              <button ",                className="restart-exercise-btn",                onClick={restartExercise"}"              >                Do Again              </button>              <button ",                className="close-exercise-btn",                onClick ={handleClose}              >                Finish              </button>            </div>          </div>        )}      </div>"      {/* Navigation Controls */"}"      {!isCompleted && ("}"        <div className="navigation-controls">", ", `;`          <button            className ={nav-btn prev-btn $currentStepIndex ====0 ? ``isabled :},            onClick ={goToPreviousStep},            disabled ={currentStepIndex ====0},            style={style4}"};", `;`          >            <ArrowLeftIcon  />            Previous          </button>          "          <div className="step-indicators">";"            {steps.map((_, index) => (}              <div                key={index"}",                className={"
  {step-indicator $index ====currentStepIndex ? ``ctive :" $completedSteps.includes(steps[]ndex].id) ? completed :"
}";"               />";"            ))}          </div>          <button            className ={nav-btn next-btn $currentStepIndex ====steps.length - 1 ? ``isabled :},            onClick ={goToNextStep},            disabled ={currentStepIndex ====steps.length - 1},            style={style5}","          >            Next            <ArrowRightIcon  />          </button>        </div>      )}      {/* Crisis Mode Banner */"}"      {crisisMode && ("}"        <div className="crisis-banner">", ", `;`          You're safe. Focus on the present moment. You're doing great."``        </div>      )}      <style>{}        .mobile-grounding-container {},  position: 'fixed,',  top: 0,  left: 0,  right: 0,  bottom: 0,  background: linear-gradient135deg, #1a1a2e, #16213e),  color: white,  display: flex          flex-direction: column          z-index: 10000,  overflow: hidden          user-select: none          -webkit-user-select: none        }        .mobile-grounding-container.crisis-mode {},  background: linear-gradient135deg, #2d1b3d, #3d1a36)        }        .grounding-header {},  display: flex          align-items: center          justify-content: spacebetween,  padding: 16px 20px,  background: rgba0, 0, 0, 0.3)          backdrop-filter: blur(10px          -webkit-backdrop-filter: blur(10px        }        .header-btn {",",  width: ${getTouchTargetSize(``ecommended}px";", ``  height: ${getTouchTargetSize(recommended}"px;", `;`  border: none,  background: rgba(255, `55, 255, 0.1),  color: white,          border-radius: 50,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: all 0.2s ease        }        .header-btn:active {},  transform: scale(0.9,  background: rgba255, 255, 255, 0.2)        }        .header-btn svg {},  width: 20px,  height: 20px}        .grounding-title {},          font-size: 18px          font-weight: 600,  margin: 0          text-align: center        }        .progress-container {},  position: relative,  height: 6px,  background: rgba255, 255, 255, 0.2),  margin: 0 20px        }        .progress-bar {},  height: 100,  background: linear-gradient90deg, var(--primary-500), var(--success-500)),  transition: width 0.5s ease          border-radius: 3px        }        .progress-text {},  position: absolute,  top: 12px,  right: 0          font-size: 12px,  color: rgba255, 255, 255, 0.8)        }        .grounding-content {},  flex: 1,  padding: 20px,  display: flex          flex-direction: column,  transition: transform 0.3s ease          overflow-y: auto          -webkit-overflow-scrolling: touch        }        .grounding-content.transitioning {},  opacity: 08        }        .step-header {},          text-align: center          margin-bottom: 32px        }        .step-icon-wrapper {},  position: relative,  display: inlineflex          align-items: center          justify-content: center,  width: 80px,  height: 80px,  background: var(--step-color          border-radius: 50          margin-bottom: 16px          box-shadow: 0 8px 32px rgba(var(--step-color-rgb, 255, 255, 255), 0.3)        }        .step-icon {},  width: 40px,  height: 40px,  color: white}        .step-number {},  position: absolute,  top: -4px,  right: -4px,  width: 24px,  height: 24px,  background: white,  color: var(--step-color,          border-radius: 50,  display: flex          align-items: center          justify-content: center          font-size: 14px          font-weight: 700        }        .step-title {},          font-size: 24px          font-weight: 700,  margin: 0 0 8px 0,  color: var(--step-color}        .step-instruction {},          font-size: 16px,  color: rgba255, 255, 255, 0.8)          line-height: 15,  margin: 0        }        .inputs-container {},  display: flex          flex-direction: column,  gap: 12px          margin-bottom: 24px        }        .input-item {},  display: flex          align-items: center,  gap: 12px,  padding: 12px 16px          border-radius: 12px          min-height: ${getTouchTargetSize(recommended}"px;", `;`  transition: all 0.3s ease        }        .input-item.completed {},  background: rgba(var(--success-rgb, 0.2),  border: 1px solid var(--success-500),  animation: itemSlideIn 0.3s ease        }        .input-item.empty {},  background: rgba255, 255, 255, 0.1),  border: 1px dashed rgba(255, 255, 255, 0.3),  color: rgba255, 255, 255, 0.6)        }        @keyframes itemSlideIn {},          from {},  opacity: 0,  transform: translateX(-20px          },          to {},  opacity: 1,  transform: translateX(0          )}        .check-icon {},  width: 20px,  height: 20px,  color: var(--success-500}        .empty-circle {},  width: 24px,  height: 24px,  border: 2px solid rgba(255, 255, 255, 0.3)          border-radius: 50,  display: flex          align-items: center          justify-content: center          font-size: 12px          font-weight: 600        }        .input-section {},  display: flex,  gap: 12px          margin-bottom: 24px          align-items: center        }        .grounding-input {},  flex: 1,  padding: 16px,  border: 2px solid rgba(255, 255, 255, 0.3)          border-radius: 12px,  background: rgba255, 255, 255, 0.1),  color: white,          font-size: 16px,  outline: none,  transition: all 0.2s ease        }        .grounding-input:focus {},          border-color: var(--step-color,  background: rgba255, 255, 255, 0.15)        }        .grounding-input:placeholder {},  color: rgba255, 255, 255, 0.6)        }        .submit-btn {},  padding: 16px 20px,  background: var(--step-color,  border: none          border-radius: 12px,  color: white,          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: all 0.2s ease        }        .submit-btn:active {},  transform: scale(0.95        }        .examples-section {},          margin-top: auto        }        .examples-title {},          font-size: 14px,  color: rgba255, 255, 255, 0.8)          margin-bottom: 12px        }        .examples-list {},  display: flex          flex-wrap: wrap,  gap: 8px        }        .example-btn {},  padding: 8px 12px,  background: rgba255, 255, 255, 0.1),  border: 1px solid rgba(255, 255, 255, 0.3)          border-radius: 20px,  color: white,          font-size: 14px,  cursor: pointer,  transition: all 0.2s ease        }        .example-btn:active {},  transform: scale(0.95,  background: rgba255, 255, 255, 0.2)        }        .completion-screen {},          text-align: center,  display: flex          flex-direction: column          align-items: center          justify-content: center,  height: 100,  animation: completionFadeIn 0.5s ease        }        @keyframes completionFadeIn {},          from {},  opacity: 0,  transform: scale(0.9          },          to {},  opacity: 1,  transform: scale(1          )}        .completion-icon-wrapper {},  width: 100px,  height: 100px,  background: var(--success-500          border-radius: 50,  display: flex          align-items: center          justify-content: center          margin-bottom: 24px,  animation: completionPulse 2s ease-in-out infinite        }        @keyframes completionPulse {},          0%, 100% { transform: scale(1},          50% {"
  transform: scale(1.05
}.completion-icon {},  width: 50px,  height: 50px,  color: white}        .completion-title {},          font-size: 28px          font-weight: 700,  margin: 0 0 12px 0,  color: var(--success-500}        .completion-message {},          font-size: 16px,  color: rgba255, 255, 255, 0.8)          line-height: 15          margin-bottom: 32px          max-width: 300px        }        .completion-actions {},  display: flex,  gap: 16px        }        .restart-exercise-btn,        .close-exercise-btn {},  padding: 16px 24px,  border: none          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: all 0.2s ease        }        .restart-exercise-btn {},  background: var(--primary-500,  color: white}        .close-exercise-btn {},  background: rgba255, 255, 255, 0.2),  color: white}        .restart-exercise-btn:active,        .close-exercise-btn:active {},  transform: scale(0.95        }        .navigation-controls {},  display: flex          align-items: center          justify-content: spacebetween,  padding: 20px,  background: rgba0, 0, 0, 0.3)          backdrop-filter: blur(10px          -webkit-backdrop-filter: blur(10px        }        .nav-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 12px 16px,  background: rgba255, 255, 255, 0.1),  border: 1px solid rgba(255, 255, 255, 0.3)          border-radius: 12px,  color: white,          font-size: 14px          font-weight: 600,  cursor: pointer,  transition: all 0.2s ease        }        .nav-btn:active {},  transform: scale(0.95        }        .nav-btn.disabled {},  opacity: 05,  cursor: notallowed        }        .nav-btn svg {},  width: 16px,  height: 16px}        .step-indicators {},  display: flex,  gap: 8px        }        .step-indicator {},  width: 12px,  height: 12px,          border-radius: 50,  background: rgba255, 255, 255, 0.3),  transition: all 0.3s ease        }        .step-indicator.active {},  background: var(--primary-500,  transform: scale(1.2        }        .step-indicator.completed {},  background: var(--success-500        }        .crisis-banner {},  background: linear-gradient135deg, var(--success-500), var(--success-600)),  padding: 16px 20px          text-align: center          font-size: 16px          font-weight: 500,  animation: breathingGlow 4s ease-in-out infinite        }        @keyframes breathingGlow {},          0%, 100% { opacity: 09},          50% {
  opacity: 1
}/* Landscape adjustments */        @media(orientation: landscape and (max-height: 500px {}          .grounding-header {},  padding: 12px 20px          }          .step-icon-wrapper {},  width: 60px,  height: 60px}          .step-icon {},  width: 30px,  height: 30px}          .step-title {},            font-size: 20px          }          .navigation-controls {},  padding: 12px 20px          )}        /* Reduced motion */        @media (prefers-reduced-motion: reduce {}          .grounding-content,          .completion-screen,          .completion-icon-wrapper,          .crisis-banner,          .input-item {},  animation: none,  transition: none          )}        /* High contrast mode */        @media (prefers-contrast: high {}          .input-item.completed {},  border: 2px solid var(--success-500)          }          .grounding-input {},  border: 2px solid white          }</style>    </div>  )},export default MobileGrounding;