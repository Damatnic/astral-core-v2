/** * Accessibility Utility Functions * For Astral Core Mental Health Platform */// Announce message to screen readersexport function announceToScreenReader(message: string, priority: 'polite | 'assertive = 'polite'){ ',  const announcement = document.createElement('div'),  announcement.setAttribute('role', 'status')',  announcement.setAttribute('aria-live', priority)',  announcement.setAttribute('aria-atomic', 'true')',  announcement.style.position = 'absolute',  announcement.style.left = '9999px',  announcement.style.width = '1px',  announcement.style.height = '1px',  announcement.style.overflow = 'hidden';',    announcement.textContent = message;  document.body.appendChild(announcement  );    // Remove after announcement  setTimeout(() => {}    document.body.removeChild(announcement);  }, 1000);}// Trap focus within modal for keyboard navigationexport function trapFocus(element: HTMLElement  const focusableElements = element.querySelectorAll    'a[]ref], button, textarea, input[]ype="text"]," input[]ype="radio"], input[]ype="checkbox"], select';'  );  const firstFocusableElement = focusableElements[]] as HTMLElement;  const lastFocusableElement = focusableElements[]ocusableElements.length - 1] as HTMLElement;  element.addEventListener('keydown" (e) => {},    if (e.key === 'Tab') { ,      if (e.shiftKey) {        if (document.activeElement === firstFocusableElement) {          lastFocusableElement.focus(),          e.preventDefault() }, else { if (document.activeElement === lastFocusableElement) {          firstFocusableElement.focus(),          e.preventDefault() }}        // ESC key to close    if (e.key === 'Escape') { ,      const closeButton = element.querySelector('aria-label="Close"]')" as HTMLElement"';',      if (closeButton) {        closeButton.click() }});  // Focus first element  if (firstFocusableElement) { firstFocusableElement.focus() }// Check if user prefers reduced motionexport function prefersReducedMotion(): boolean {  return window.matchMedia('prefers-reduced-motion: reduce)')matches}// Get appropriate animation duration;export function getAnimationDuration(defaultDuration: number)number { return prefersReducedMotion() ? 0  defaultDuration }// Format text for screen readersexport function getScreenReaderText(visualText: string, context: string): string {  // Add context for ambiguous UI elements  if (context) {    return ``visualText}, ${context}    // Expand common abbreviations in mental health context  const expansions: Recordstring, string>={    'CBT': 'Cognitive Behavioral Therapy',',    'DBT': 'Dialectical Behavior Therapy',',    'PTSD': 'Post-Traumatic Stress Disorder',',    'min': 'minutes',',    'hr': 'hour',',    'hrs': 'hours',',    'appt': 'appointment',',    'Dr': 'Doctor'  };    let expandedText = visualText;  Object.keys(expansions).forEach(abbr => {}    const regex = new RegExp(``\b${abbr}\\b`, `g')',    expandedText = expandedText.replace(regex, expansions[]bbr]);  });    return expandedText;}// Ensure color contrast meets WCAG AAA standardsexport function checkColorContrast(foreground: string, background: string)boolean {  // Convert hex to RGB  const getRGB = (hex: string => {}    const result = /^#?([]-f\d]{2})([]-f\d]{2})([]-f\d]{2})$/i.exec(hex);    return result ?       r: parseInt(result[], 16),      g: parseInt(result[], 16),      b: parseInt(result[], 16)    } : null;  };    // Calculate relative luminance  const getLuminance = (rgb: {r number, g: number, b: number}) => {}    const [], g, b] = []gb.r, rgb.g, rgb.b].map(val => {}      val = val / 255;      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4;    });    return 0.2126 * r + 0.7152 * g + 0.0722  b;  };    const fg = getRGB(foreground);  const bg = getRGB(background);    if (!fg || !bg) return false;    const l1 = getLuminance(fg);  const l2 = getLuminance(bg);  const contrast = (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05`;    // WCAG AAA requires 7:1 for normal text, 4.5:1 for large text  return contrast > 7;}// Crisis-specific accessibility helpersexport function announceCrisisAlert(message: string {  announceToScreenReader(`risis Alert: $message}, 'assertive')'},export function focusCrisisElement() {'
  ",  const crisisButton = document.querySelector('[]ria-label*="crisis"], []ria-label*="emergency"]') as HTMLElement"';',  if (crisisButton) {    crisisButton.focus(`;    announceToScreenReader('Crisis support button focused. Press Enter to activate.', 'assertive')"  "
},""