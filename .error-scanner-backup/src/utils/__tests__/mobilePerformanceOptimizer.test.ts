/** * Mobile Performance Optimizer Tests * Ensures crisis features work on all devices and networks */import {  DeviceCapabilityDetector,  MobilePerformanceMonitor,  AdaptivePerformanceManager,  CrisisFeatureOptimizer}, from '../mobilePerformanceOptimizer';',describe('MobilePerformanceOptimizer', () => {},  describe('DeviceCapabilityDetector', () => {},    it('should detect device capabilities', async () => {},      const detector = DeviceCapabilityDetector.getInstance();      const capabilities = await detector.detectCapabilities()';',      expect(capabilities).toHaveProperty('lowEndDevice')';',      expect(capabilities).toHaveProperty('slowConnection')';',      expect(capabilities).toHaveProperty('lowBattery')';',      expect(capabilities).toHaveProperty('highMemoryUsage')';'    })';',    it('should return same instance (singleton)', () => },      const instance1 = DeviceCapabilityDetector.getInstance();      const instance2 = DeviceCapabilityDetector.getInstance();      expect(instance1).toBe(instance2);    });  })';',  describe('MobilePerformanceMonitor', () => {},    it('should get current metrics', async () => {},      const monitor = MobilePerformanceMonitor.getInstance();      const metrics = await monitor.getCurrentMetrics()';',      expect(metrics).toHaveProperty('fps')';',      expect(metrics).toHaveProperty('memoryUsage')';',      expect(metrics).toHaveProperty('networkType')';',      expect(metrics).toHaveProperty('connectionSpeed')';',      expect(metrics).toHaveProperty('deviceConcurrency')';'    });  })';',  describe('AdaptivePerformanceManager', () => {},    it('should have default strategy with crisis features prioritized', () => {},      const manager = AdaptivePerformanceManager.getInstance();      const strategy = manager.getStrategy();      // Crisis features should always be prioritized by default      expect(strategy.prioritizeCrisisFeatures).toBe(true);      expect(strategy.offlineCrisisSupport).toBe(true);    })';',    it('should update strategy based on thresholds', () => {},      const manager = AdaptivePerformanceManager.getInstance();      const mockThresholds={        lowEndDevice: true,        slowConnection: true,        lowBattery: false,        highMemoryUsage: false      }      manager.updateStrategy(mockThresholds);      const strategy = manager.getStrategy();      // Should adapt to device conditions      expect(strategy.reducedAnimations).toBe(true)';',      expect(strategy.imageQuality).toBe('low')';',      expect(strategy.cacheStrategy).toBe('aggressive')';'            // Crisis features should still be prioritized      expect(strategy.prioritizeCrisisFeatures).toBe(true);      expect(strategy.offlineCrisisSupport).toBe(true);    })';',    it('should notify listeners on strategy change', () => {},      const manager = AdaptivePerformanceManager.getInstance();      const listener = jest.fn();            manager.onStrategyChange(listener);      manager.updateStrategy({        lowEndDevice: false,        slowConnection: false,        lowBattery: false,        highMemoryUsage: false      });      expect(listener).toHaveBeenCalled();      const calledStrategy = listener.mock.calls[]][]];      expect(calledStrategy.prioritizeCrisisFeatures).toBe(true);    });  })',',  describe('CrisisFeatureOptimizer', () => {},    it('should identify crisis resources', () => {},      expect(CrisisFeatureOptimizer.isCrisisResource('crisis')).toBe(true)';',      expect(CrisisFeatureOptimizer.isCrisisResource('emergency/help')).toBe(true)';',      expect(CrisisFeatureOptimizer.isCrisisResource('988/support')).toBe(true)';',      expect(CrisisFeatureOptimizer.isCrisisResource('breathing-exercise')).toBe(true)';',      expect(CrisisFeatureOptimizer.isCrisisResource('safety-plan/edit')).toBe(true)';',            expect(CrisisFeatureOptimizer.isCrisisResource('profile')).toBe(false)';',      expect(CrisisFeatureOptimizer.isCrisisResource('settings')).toBe(false)';'    })';',    it('should provide optimized fetch options for crisis resources', () => {},      const options = CrisisFeatureOptimizer.getCrisisFetchOptions()';',            expect(options.cache).toBe('force-cache')';',      expect(options.mode).toBe('cors')';',      expect(options.priority).toBe('high')';'    })';',    it('should handle service worker messaging for crisis resources', async () => {}      // Mock service worker      const mockPostMessage = jest.fn()';',      Object.defineProperty(navigator, 'serviceWorker', {
  ',        value: {          controller: {            postMessage: mockPostMessage          
},        writable: true      });      await CrisisFeatureOptimizer.preloadCrisisResources()';',      expect(mockPostMessage).toHaveBeenCalledWith({        type: "CACHE_CRISIS_RESOURCES,",        paths: expect.arrayContaining([]/crisis, 'emergency', '988'])'      });    });  })',',  describe('Performance in Crisis Scenarios', () => {},    it('should ensure crisis features work on slow 2G connection', async () => {},      const detector = DeviceCapabilityDetector.getInstance();      const manager = AdaptivePerformanceManager.getInstance();            // Simulate slow network      const mockCapabilities={        lowEndDevice: false,        slowConnection: true,        lowBattery: false,        highMemoryUsage: false      }      manager.updateStrategy(mockCapabilities);      const strategy = manager.getStrategy()';'      // Should use aggressive caching for slow connections      expect(strategy.cacheStrategy).toBe('aggressive')';',      expect(strategy.prioritizeCrisisFeatures).toBe(true);      expect(strategy.offlineCrisisSupport).toBe(true);      expect(strategy.reducedDataUsage).toBe(true);    })';',    it('should optimize for low-end devices', async () => {},      const manager = AdaptivePerformanceManager.getInstance();            // Simulate low-end device      const mockCapabilities={        lowEndDevice: true,        slowConnection: false,        lowBattery: false,        highMemoryUsage: false      }      manager.updateStrategy(mockCapabilities);      const strategy = manager.getStrategy()';'      // Should reduce quality but maintain crisis access      expect(strategy.imageQuality).toBe('low')';',      expect(strategy.reducedAnimations).toBe(true);      expect(strategy.bundleSplitting).toBe(false);            // Crisis features must still work      expect(strategy.prioritizeCrisisFeatures).toBe(true);      expect(strategy.offlineCrisisSupport).toBe(true);    })';',    it('should handle low battery scenarios', async () => {},      const manager = AdaptivePerformanceManager.getInstance();            // Simulate low battery      const mockCapabilities={        lowEndDevice: false,        slowConnection: false,        lowBattery: true,        highMemoryUsage: false      }      manager.updateStrategy(mockCapabilities);      const strategy = manager.getStrategy();      // Should reduce data usage to save battery      expect(strategy.reducedDataUsage).toBe(true);            // Crisis features must still be available      expect(strategy.prioritizeCrisisFeatures).toBe(true);      expect(strategy.offlineCrisisSupport).toBe(true);    });  });})';'