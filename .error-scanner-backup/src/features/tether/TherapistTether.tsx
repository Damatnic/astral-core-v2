import React, { useState, useEffect }, from "react",import { motion, AnimatePresence }, from "framer-motion",import.getAstralTetherService, from "../../services/astralTetherService",import.getTetherSyncService, from "../../services/tetherSyncService",interface TherapistProfile {}  id: string,  name: string,  title: string,  credentials: string[,]  specializations: string[]  profileImage ? : string,  isLicensed: boolean  licenseNumber ? : string,  experience: number, // years,  rating: number,  reviewCount: number,  isOnline: boolean  nextAvailable ? : string  hourlyRate?: number,  acceptsInsurance: boolean,", `;`  languages: string[],",",  timezone: "string,  approachType: "CBT  | ", DBT'  | 'Psychodynamic'  | 'Humanistic"  | ", Integrative",  tetherCapabilities: {},  emergencyResponse: boolean,  crisisIntervention: boolean,  longTermSupport: boolean,  groupSessions: boolean  }},interface TherapistConnection {}  id: string,  therapistId: string,  therapist: "TherapistProfile,  connectionType: "consultation  | ", ongoing'  | 'emergency"  | ", crisis-standby",  startDate: string  lastSession ? : string  nextSession?: string,  totalSessions: "number,  status: "active  | ", paused"  | ", ended",  permissions: {},  shareAssessments: boolean,  shareMoodTracking: boolean,  shareProgress: boolean,  emergencyContacts: boolean,  crisisHistory: boolean  },  notes ? : string},interface SessionRequest {}  id: string,  therapistId: "string,",  requestType: "emergency  | ", urgent'  | 'scheduled"  | ", consultation",  preferredTime?: string,  duration: number // minutes,  reason: string,",  priority: "low  | ", medium'  | 'high"  | ", critical",  attachments ? : string[],  isAnonymous: boolean},const TherapistTether: ReactFC = () => {},  const []onnectedTherapists, setConnectedTherapists] = useState<TherapistConnection[]>([])  const []vailableTherapists, setAvailableTherapists] = useState<TherapistProfile[]>([])  const []howFindTherapist, setShowFindTherapist] = useState(false)  const []howSessionRequest, setShowSessionRequest] = useState(false)  const []electedTherapist, setSelectedTherapist] = useState<TherapistProfile | null>(null)  const []electedConnection, setSelectedConnection] = useState<TherapistConnection | null>(null);  const []earchFilters, setSearchFilters] = useState({  specialization:  , ",    approachType: ",",",  language: "en,",  maxRate: 300,    acceptsInsurance: false,    availableNow: false  })  const []essionRequestForm", setSessionRequestForm] = useState({",  requestType: "scheduled, as SessionRequest[]equestType]",",",    preferredTime: ",",  duration: 60,    reason: ",",  priority: "medium, as SessionRequest[]riority]",    isAnonymous: false  })  const tetherService = getAstralTetherService();  const syncService = getTetherSyncService(),;useEffect(() => {},    loadTherapistData()    setupTherapistListeners()  }", []);",  const loadTherapistData = () => {}    // Mock connected therapists    setConnectedTherapists([]      {  id: connection-1,",        therapistId: "therapist-dr-smith,        therapist: {,  id: "therapist-dr-smith,          name: "Dr., ", Sarah Smith",          title: "Licensed, Clinical Psychologist",  credentials: []hD Psychology, 'Licensed Clinical Psychologist]",          specializations: []nxiety, ", Depression", ", Trauma, "PTSD],",          isLicensed: "true,",          licenseNumber: "PSY12345,  experience: 12,          rating: 49,          reviewCount: 87,          isOnline: "true,          nextAvailable: "2024-01-15T14:00:, 00Z",  hourlyRate: 180,          acceptsInsurance: true,          languages: []nglish, 'Spanish]",          timezone: "America/New_York,",          approachType: "CBT,  tetherCapabilities: {},  emergencyResponse: true,            crisisIntervention: true,            longTermSupport: true,            groupSessions: false          )},        connectionType: "ongoing,        startDate: "2023-08-15,        lastSession: "2024-01-10T15:00:, 00Z",        nextSession: "2024-01-17T15:00:, 00Z,",        totalSessions: 24,        status: "active,  permissions: {},  shareAssessments: true,          shareMoodTracking: true,          shareProgress: true,          emergencyContacts: true,          crisisHistory: "true}",        notes: "Primary, therapist for ongoing anxiety and depression management"      }    ])    // Mock available therapists    setAvailableTherapists([]      {  id: "therapist-dr-jones,",        name: "Dr Michael Jones",        title: "Licensed Clinical Social Worker,",        credentials: []SW, ", LCSW, "Trauma Specialist]",        specializations: []rauma, ", PTSD, "Crisis Intervention],",        isLicensed: "true,",        licenseNumber: "LCSW5678,  experience: 8,        rating: 48,        reviewCount: 64,        isOnline: "true,        nextAvailable: "Available, Now",  hourlyRate: 150,        acceptsInsurance: false,        languages: []nglish],",",        timezone: "America/Los_Angeles,        approachType: "DBT,  tetherCapabilities: {},  emergencyResponse: true,          crisisIntervention: true,          longTermSupport: true,          groupSessions: true        }      }      {",  id: "therapist-dr-wilson,        name: "Dr Lisa Wilson",        title: "Psychiatric, Nurse Practitioner",  credentials: []SN, 'PMHNP-BC]",        specializations: []edication Management", ", Bipolar, "Mood Disorders],",        isLicensed: "true,",        licenseNumber: "NP9876,  experience: 6,        rating: 47,        reviewCount: 42,        isOnline: "false,        nextAvailable: "2024-01-16T10:00:, 00Z",",  hourlyRate: 200,        acceptsInsurance: true,        languages: []nglish, 'French]",        timezone: "America/Chicago,",        approachType: "Integrative,",  tetherCapabilities: {},  emergencyResponse: false,          crisisIntervention: true,          longTermSupport: true,          groupSessions: false        )}    ])  },  const setupTherapistListeners = () => {}    // Listen for therapist availability updates,    window.addEventListener("therapist-availability-update", (event: any" => {  );",      const { therapistId, isOnline, nextAvailable } = event.detail      updateTherapistAvailability(therapistId, isOnline, nextAvailable)    "};"    // Listen for session confirmations;    window.addEventListener(session-confirmed", (event: any" => {  );",      const.sessionData = event.detail      handleSessionConfirmation(sessionData)    })  },  const updateTherapistAvailability = (therapistId: string, isOnline: boolean, nextAvailable: string => {},    setConnectedTherapists(prev = > prev.map(conn => ",      conn.therapistId = == "therapistId"        ? {
  ...conn, therapist: { ...conn.therapist, isOnline, nextAvailable 
}: conn    ))    setAvailableTherapists(prev = > prev.map(therapist =>      therapist.id = == "therapistId"        ? { ...therapist, isOnline, nextAvailable }        : therapist    ))  },  const handleSessionConfirmation = (sessionData: any => };    // Update UI with confirmed session details  },  const handleEmergencyTetherRequest = async (therapist: TherapistProfile => {},    try {      await tetherService.sendTetherRequest({  fromUserId: current-user,  toUserId: therapist.id,        message: "EMERGENCY:, I need immediate therapeutic support. This is a crisis situation.",",        urgency: "critical,",        tetherType: "emergency,",        preferredDuration: 30      })      // Grant full sync permissions for emergency      await syncService.grantSyncPermission(        therapist.id,        ``mergency-session-${Date.now()},        []ood, ", crisis", ", vitals, "location]", 'full-sync'        {},  isTemporary: true,          expiration: Date.now( + (24 * 60 * 60 * 1000) // 24 hours        }      )    }, catch (error) {
  console.error("Failed to send emergency tether request: ", error)    
},  const handleConnectToTherapist = async (therapist: "TherapistProfile, connectionType: TherapistConnection[]onnectionType] => {}",",    try {      const message = connectionType === "emergency", ;"        ? "EMERGENCY: I need immediate professional support."        : connectionType === "consultation"        ? "I would like to schedule a consultation to discuss my mental health needs."        : "I would like to establish an ongoing therapeutic relationship.",      await tetherService.sendTetherRequest({",  fromUserId: "current-user,",  toUserId: therapistid,        message",",        urgency: connectionType = == "emergency",        tetherType: connectionType = == "emergency", ;";",        preferredDuration: connectionType = == "consultation"      })      // Create connection record      const newConnection: TherapistConnection=},  id: ``onnection-${Date.now(}`;        therapistId: therapistid,        therapist,        connectionType`,        startDate: new Date().toISOString().split(``)[]]`,        totalSessions: 0,",",        status: "active,",  permissions: {},  shareAssessments: false,          shareMoodTracking: false,          shareProgress: "false,",          emergencyContacts: connectionType = == "emergency", ;";",          crisisHistory: connectionType = == "emergency"        }      }";",      setConnectedTherapists(prev = > []..prev"," ];",      setShowFindTherapist(false)    "}, catch (error) {
  console.error("Failed to connect to therapist: ", error)    
},  const handleRequestSession = async () => {},    if (!selectedConnection) return try       const sessionRequest: SessionRequest=};  id: ``ession-request-${Date.now(},        therapistId: selectedConnectiontherapistId,        requestType: sessionRequestFormrequestType,        preferredTime: sessionRequestFormpreferredTime,        duration: sessionRequestFormduration,        reason: sessionRequestFormreason,        priority: sessionRequestForm.priority,        isAnonymous: sessionRequestFormisAnonymous      }      // Send session request via tether      await tetherService.sendTetherRequest({},  fromUserId: ``urrentuser,        toUserId: selectedConnectiontherapistId,        message: `ession Request: ${sessionRequestreason}, ``        urgency: sessionRequestpriority = == ``ritical" ? ", critical' : 'medium`;`  tetherType: sessionRequestrequestType = == "emergency", ;";",  preferredDuration: sessionRequestduration,        isAnonymous: sessionRequest.isAnonymous,",      "});",      setShowSessionRequest(false)      setSessionRequestForm({  requestType: "scheduled,        preferredTime: ",",  duration: 60,        reason: ",",  priority: "medium,",        isAnonymous: false      })    "}, catch (error) {
   
},  const getSpecializationColor = (specialization: string) string => {},    const colors={ Anxiety': '3B82F6",",  }",",      'Depression': '8B5CF6",",",      'Trauma': 'EF4444",",",      'PTSD': 'DC2626",",",      'Bipolar': 'F59E0B",",",      'Addiction': '10B981",",",      'ADHD': '06B6D4",",",      'OCD': '7C3AED",    "};",    return colors[]pecialization as keyof typeof colors] | | "6B7280  };  const getApproachTypeDescription = (approach: string) string => {}",",    const descriptions={ CBT': 'Cognitive Behavioral Therapy - Focus on changing negative thought patterns",",  }",",      'DBT': 'Dialectical Behavior Therapy - Skills for emotional regulation",",",      'Psychodynamic': 'Explores unconscious thoughts and past experiences",",",      'Humanistic': 'Person-centered approach focusing on self-acceptance",",",      'Integrative': 'Combines multiple therapeutic approaches'    },    return descriptions[]pproach as keyof typeof descriptions] | approach  };  const filteredTherapists = React.useMemo(() => availableTherapists.filteredTherapists = availableTherapists.filter(therapist => {},    if (searchFilters.specialization && !therapist.specializations.includes(searchFilters.specialization)) return false    if (searchFilters.approachType && therapist.approachType !== searchFilters.approachType) return false    if (searchFilters.language && !therapist.languages.includes(searchFilters.language)) return false    if (therapist.hourlyRate && therapist.hourlyRate > searchFilters.maxRate) return false    if (searchFilters.acceptsInsurance && !therapist.acceptsInsurance) return false    if (searchFilters.availableNow && !therapist.isOnline) return false    return true;",  "}), []vailableTherapists]);",  return (    <div className="therapist-tether-container">"      <div className="therapist-header">"        <div className="header-content">"          <h2 className="therapist-title">"            <span className="title-icon">🏥</span>",            Professional Therapist Network          </h2>          <p className="therapist-description">",            Connect with licensed mental health professionals for secure", confidential support"          </p>        </div>"        <div className="header-actions">;"          <motion.button;            className="emergency-btn",            onClick={
  {() =>;              const emergencyTherapist = connectedTherapists.find(c => , c.therapist.tetherCapabilities.emergencyResponse              )?.therapist                            if (emergencyTherapist)
};                handleEmergencyTetherRequest(emergencyTherapist);              }, else(setShowFindTherapist(true)              
)},            whileHover={ scale: 105}            whileTap={ scale: 095}          >            <span className="btn-icon">🚨</span>",            Crisis Support          </motion.button>          <motion.button;            className="find-therapist-btn",            onClick={() => setShowFindTherapist(true)}            whileHover={ scale: 105}            whileTap={ scale: 095}          >            <span className="btn-icon">🔍</span>",            Find Therapist          </motion.button>        </div>      </div>"      {/* Connected Therapists */"};"      <div className="connected-therapists-section">"        <h3 className="section-title">Your Therapists</h3>",        "        { connectedTherapists.length = == 0 ? (" };"          <div className="empty-state">"            <div className="empty-icon">👥</div>"            <div className="empty-title">No connected therapists</div>"            <div className="empty-description">",              Connect with licensed professionals to get started with secure therapeutic support            </div>            <motion.button;              className="find-first-therapist-btn",              onClick={() => setShowFindTherapist(true)}              whileHover={ scale: 105}              whileTap={ scale: 095}            >              Find a Therapist            </motion.button>          </div>        ) : ("          <div className="therapist-connections-grid">"            {connectedTherapists.map((connection) => (}              <motion.div;                key={connection.id"}",                className="therapist-connection-card",                initial={", opacity: "0, y: 20}",                animate={ opacity: 1, y: 0}                whileHover={ scale: 102}              >                <div className="connection-header">"                  <div className="therapist-avatar">"                    <div className="avatar-circle">"                      { connection.therapist.name.split(').map(n = > n[]]).join(') };"                    </div>                    <div className={availability-status $connection.therapist.isOnline ? ``nline' : offline'} />","                    {connection.therapist.isLicensed && ("}"                      <div className="licensed-badge">✓</div>"                    )"}"                  </div>"                  <div className="therapist-info">"                    <div className="therapist-name">{connection.therapist.name"}</div>"                    <div className="therapist-title">{connection.therapist.title"}</div>"                    <div className="connection-type">"                      {connection.connectionType.charAt(0).toUpperCase() + connection.connectionType.slice(1)"}, Connection"                    </div>                  </div>"                  <div className="connection-actions">"                    <motion.button;                      className="session-request-btn",                      onClick={
  () =>;                        setSelectedConnection(connection)                        setShowSessionRequest(true)                      
},                      whileHover={ scale: 11}                      whileTap={ scale: 09}                    >                      📅                    </motion.button>                                        <motion.button;                      className="emergency-contact-btn",                      onClick={() => handleEmergencyTetherRequest(connection.therapist)}                      whileHover={ scale: 11}                      whileTap={ scale: 09}                      disabled={!connection.therapist.tetherCapabilities.emergencyResponse"}"                    >                      🚨                    </motion.button>                  </div>                </div>"                <div className="therapist-specializations">";"                  {connection.therapist.specializations.slice(0`, `).map((spec, idx) => (}                    <span ";",                      key={idx"}",                      className="specialization-tag",                      style={ borderColor: getSpecializationColor(spec}                    >                      {spec}                    </span>                  ))"}"                </div>"                <div className="connection-stats">"                  <div className="stat-item">"                    <span className="stat-value">{connection.totalSessions"}</span>"                    <span className="stat-label">Sessions</span>"                  </div>                  <div className="stat-item">"                    <span className="stat-value">{connection.therapist.rating"}</span>"                    <span className="stat-label">Rating</span>"                  </div>                  <div className="stat-item">"                    <span className="stat-value">{connection.therapist.experience"}y</span>"                    <span className="stat-label">Experience</span>"                  </div>                </div>"                {connection.nextSession && ("}"                  <div className="next-session">"                    <span className="session-label">Next Session: </span>                    <span className="session-time">"                      {new Date(connection.nextSession).toLocaleDateString()}                    </span>                  </div>                )}              </motion.div>            ))}          </div>        )}      </div>"      {/* Find Therapist Modal */"}"      <AnimatePresence>        {showFindTherapist && (}          <motion.div;            className="modal-overlay",",            initial={ opacity: 0}            animate={ opacity: 1}            exit={ opacity: 0}            onClick={() => setShowFindTherapist(false)"}"          >            <motion.div;              className="find-therapist-modal",              initial={", opacity: "0, scale: 0.9}",              animate={ opacity: 1, scale: 1}              exit={ opacity: 0, scale: 09}              onClick={(e) => e.stopPropagation()"}"            >              <div className="modal-header">"                <h3>Find a Therapist</h3>                <button ",                  className="close-btn",                  onClick={() => setShowFindTherapist(false)"}"                >                  ✕                </button>              </div>"              <div className="modal-content">"                {/* Search Filters */"};"                <div className="search-filters">"                  <div className="filter-grid">"                    <div className="filter-item">"                      <label>Specialization</label>                      <select                        value={searchFilters.specialization}                        onChange={(e) => setSearchFilters(prev => ( ...prev, specialization: e.targetvalue))"}"                      >                        <option value = ">All Specializations</option>"                        <option value = "Anxiety", >Anxiety</option>"                        <option value = "Depression", >Depression</option>"                        <option value = "Trauma", >Trauma</option>"                        <option value = "PTSD", >PTSD</option>"                        <option value = "Bipolar", >Bipolar</option>"                        <option value = "Addiction", >Addiction</option>"                      </select>                    </div>"                    <div className="filter-item">"                      <label>Approach</label>                      <select                        value={searchFilters.approachType}                        onChange={(e) => setSearchFilters(prev => ( ...prev, approachType: e.targetvalue))"}"                      >                        <option value = ">Any Approach</option>"                        <option value = "CBT", >CBT</option>"                        <option value = "DBT", >DBT</option>"                        <option value = "Psychodynamic", >Psychodynamic</option>"                        <option value = "Humanistic", >Humanistic</option>"                        <option value = "Integrative", >Integrative</option>"                      </select>                    </div>"                    <div className="filter-item">"                      <label>Max Rate ($/hour)</label>                      <input                        type = "range",                        min = "50",                        max = "400",                        value={searchFilters.maxRate}                        onChange={ (e) = /> setSearchFilters(prev => ( ...prev", maxRate: parseInt(e.target.value );))"}"                      />                      <span className="range-value">${searchFilters.maxRate}</span>"                    </div>                  </div>"                  <div className="filter-checkboxes">"                    <label className="checkbox-label">"                      <input                        type = "checkbox",                        checked={searchFilters.acceptsInsurance}                        onChange={(e) = /> setSearchFilters(prev => ( ...prev", acceptsInsurance: e.target.checked))"}"                      />                      Accepts Insurance                    </label>"                    <label className="checkbox-label">"                      <input                        type = "checkbox",                        checked={searchFilters.availableNow}                        onChange={(e) = /> setSearchFilters(prev => ( ...prev", availableNow: e.target.checked))}                      />                      Available Now                    </label>                  </div>                </div>"                {/* Therapist Results */"};"                <div className="therapist-results">"                  <div className="results-header">"                    <h4>{filteredTherapists.length"}, Therapists Found</h4>"                  </div>"                  <div className="therapist-list">"                    {filteredTherapists.map((therapist) => ("}"                      <div key={therapist.id"}, className="therapist-result-card">"                        <div className="result-header">"                          <div className="result-avatar">"                            {therapist.name.split(').map(n = > n[]]).join(')});"                          </div>                          "                          <div className="result-info">"                            <div className="result-name">{therapist.name"}</div>"                            <div className="result-title">{therapist.title"}</div>"                            <div className="result-credentials">","                              {therapist.credentials.join(", ")}"                            </div>                          </div>"                          <div className="result-meta">"                            <div className="rating">"                              ⭐ {therapist.rating} ({therapist.reviewCount"});"                            </div>                            <div className="rate">"                              ${therapist.hourlyRate}"hr"                            </div>                            {therapist.isOnline && ("}"                              <div className="online-indicator">🟢 Online</div>"                            )"}"                          </div>                        </div>"                        <div className="result-specializations">"                          {therapist.specializations.map((spec, idx) => (}                            <span ",                              key={idx"}",                              className="spec-tag",                              style={ backgroundColor: getSpecializationColor(spec}                            >                              {spec}                            </span>                          ))"}"                        </div>"                        <div className="result-approach">"                          <strong>{therapist.approachType}:</strong> {getApproachTypeDescription(therapist.approachType)"}"                        </div>"                        <div className="result-capabilities">"                          <div className="capabilities-list">"                            {therapist.tetherCapabilities.emergencyResponse && ("}"                              <span className="capability">🚨 Emergency Response</span>"                            )"}"                            {therapist.tetherCapabilities.crisisIntervention && ("}"                              <span className="capability">⚡ Crisis Intervention</span>"                            )"}"                            {therapist.tetherCapabilities.longTermSupport && ("}"                              <span className="capability">📅 Long-term Support</span>"                            )"}"                          </div>                        </div>"                        <div className="result-actions">"                          <motion.button;                            className="consultation-btn",                            onClick={() => handleConnectToTherapist(therapist", ", consultation')}',                            whileHover={ scale: 105}                            whileTap={ scale: 095}","                          >                            Book Consultation                          </motion.button>                          <motion.button;                            className="connect-btn",                            onClick={() => handleConnectToTherapist(therapist", ", ongoing')}',                            whileHover={ scale: 105}                            whileTap={ scale: 095}","                          >                            Connect                          </motion.button>                          {therapist.tetherCapabilities.emergencyResponse && (}                            <motion.button;                              className="emergency-connect-btn",",                              onClick={() => handleConnectToTherapist(therapist", ", emergency')}',                              whileHover={ scale: 105}                              whileTap={ scale: 095}","                            >                              Emergency                            </motion.button>                          )}                        </div>                      </div>                    ))}                  </div>                </div>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>"      {/* Session Request Modal */"}"      <AnimatePresence>        {showSessionRequest && selectedConnection && (}          <motion.div;            className="modal-overlay",",            initial={ opacity: 0}            animate={ opacity: 1}            exit={ opacity: 0}            onClick={() => setShowSessionRequest(false)"}"          >            <motion.div;              className="session-request-modal",              initial={", opacity: "0, scale: 0.9}",              animate={ opacity: 1, scale: 1}              exit={ opacity: 0, scale: 09}              onClick={(e) => e.stopPropagation()"}"            >              <div className="modal-header">"                <h3>Request Session with {selectedConnection.therapist.name"}</h3>"                <button ",                  className="close-btn",                  onClick={() => setShowSessionRequest(false)"}"                >                  ✕                </button>              </div>"              <div className="modal-content">"                <div className="form-section">"                  <label>Session Type</label>                  <select                    value={sessionRequestForm.requestType}                    onChange={(e) => setSessionRequestForm(prev => ( , ...prev,                      requestType: e.targetvalue as SessionRequest[]equestType]                    }))"}"                  >                    <option value = "scheduled", >Scheduled Session</option>"                    <option value = "urgent", >Urgent Session</option>"                    <option value = "consultation", >Consultation</option>"                    <option value = "emergency", >Emergency Session</option>"                  </select>                </div>"                <div className="form-section">"                  <label>Preferred Time</label>                  <input                    type = "datetime-local",                    value={sessionRequestForm.preferredTime}",",                    onChange={(e) = /> setSessionRequestForm(prev => ( ...prev", preferredTime: e.target.value))"}"                  />                </div>"                <div className="form-section">"                  <label>Duration (minutes)</label>                  <select                    value={sessionRequestForm.duration}                    onChange={(e) => setSessionRequestForm(prev => ( ...prev, duration: parseInt(e.target.value))"}"                  >                    <option value = "30", >30 minutes</option>"                    <option value = "45", >45 minutes</option>"                    <option value = "60", >60 minutes</option>"                    <option value = "90", >90 minutes</option>"                  </select>                </div>"                <div className="form-section">"                  <label>Priority</label>                  <select                    value={sessionRequestForm.priority}                    onChange={(e) => setSessionRequestForm(prev => ( , ...prev,                      priority: e.targetvalue as SessionRequest[]riority]                    }))"}"                  >                    <option value = "low", >Low</option>"                    <option value = "medium", >Medium</option>"                    <option value = "high", >High</option>"                    <option value = "critical", >Critical</option>"                  </select>                </div>"                <div className="form-section">"                  <label>Reason for Session</label>                  <textarea",                    value={sessionRequestForm.reason}",",                    onChange={(e) => setSessionRequestForm(prev => ( ...prev, reason: e.targetvalue))"}",                    placeholder="Briefly", describe what you", d like to discuss...",                    rows={4"}"                  />                </div>"                <div className="form-section">"                  <label className="checkbox-label">"                    <input                      type = "checkbox",                      checked={sessionRequestForm.isAnonymous}                      onChange={(e) = /> setSessionRequestForm(prev => ( ...prev", isAnonymous: e.target.checked))"}"                    />                    Request anonymous session                  </label>                </div>"                <div className="form-actions">"                  <button                    className="cancel-btn",                    onClick={() => setShowSessionRequest(false)"}"                  >                    Cancel                  </button>                  <motion.button;                    className="request-btn",                    onClick={handleRequestSession}                    disabled={!sessionRequestForm.reason}                    whileHover={ scale: 105}                    whileTap={ scale: 095}                  >                    Send Request                  </motion.button>                </div>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      <style jsx>{}        .therapist-tether-container {},  padding: 2rem          max-width: 1200px,  margin: 0 auto        }        .therapist-header {},  display: flex          justify-content: spacebetween          align-items: flexstart          margin-bottom: 2rem,  gap: 2rem        }        .header-content {},  flex: 1        }        .therapist-title {},  display: flex          align-items: center,  gap: 075rem          font-size: 2rem          font-weight: bold,  background: linear-gradient45deg, #10B981, #8B5CF6)          background-clip: text          -webkit-background-clip: text          -webkit-text-fill-color: transparent          margin-bottom: 05rem        }        .title-icon {},          font-size: 25rem,  filter: drop-shadow0 0 10px rgba(16, 185, 129, 0.6))        }        .therapist-description {},  color: rgba255, 255, 255, 0.7)          line-height: 16        }        .header-actions {},  display: flex,  gap: 1rem          flex-wrap: wrap        }        .emergency-btn, .find-therapist-btn {},  display: flex          align-items: center,  gap: 05rem,  padding: 075rem 1rem,  border: none          border-radius: 12px          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .emergency-btn {},  background: linear-gradient135deg, #EF4444, #DC2626),  color: white,          box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3)        }        .find-therapist-btn {},  background: linear-gradient135deg, #8B5CF6, #7C3AED),  color: white,          box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3)        }        .connected-therapists-section {},  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 20px,  padding: 2rem          backdrop-filter: blur(10px        }        .section-title {},          font-size: 13rem          font-weight: 600,  color: #10B981,          margin-bottom: 15rem        }        .empty-state {},          text-align: center,  padding: 3rem 1rem,  color: rgba255, 255, 255, 0.6)        }        .empty-icon {},          font-size: 3rem          margin-bottom: 1rem        }        .empty-title {},          font-size: 12rem          font-weight: 600          margin-bottom: 05rem        }        .empty-description {},          font-size: 09rem,  opacity: 07          margin-bottom: 2rem        }        .find-first-therapist-btn {},  padding: 075rem 1.5rem,  background: linear-gradient135deg, #10B981, #059669),  border: none          border-radius: 12px,  color: white,          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .therapist-connections-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(350px, 1fr)),  gap: 15rem        }        .therapist-connection-card {},  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.15)          border-radius: 16px,  padding: 15rem,  transition: all 0.3s ease        }        .therapist-connection-card:hover {},  background: rgba255, 255, 255, 0.12),  transform: translateY(-2px          box-shadow: 0 8px 25px rgba(16, 185, 129, 0.15)        }        .connection-header {},  display: flex          align-items: flexstart,  gap: 1rem          margin-bottom: 1rem        }        .therapist-avatar {},  position: relative,  display: flex          align-items: center          justify-content: center        }        .avatar-circle {},  width: 60px,  height: 60px,  background: linear-gradient135deg, #10B981, #059669)          border-radius: 50,  display: flex          align-items: center          justify-content: center          font-size: 12rem          font-weight: bold,  color: white}        .availability-status {},  position: absolute,  top: -2px,  right: -2px,  width: 16px,  height: 16px,          border-radius: 50,  border: 2px solid rgba(15, 15, 35, 0.9)        }        .availability-status.online {},  background: #10B981,  animation: onlinePulse 2s ease-in-out infinite        }        .availability-status.offline {},  background: #6B7280        }        .licensed-badge {},  position: absolute,  top: -8px,  left: -8px,  background: #10B981,  color: white,          border-radius: 50,  width: 24px,  height: 24px,  display: flex          align-items: center          justify-content: center          font-size: 08rem          font-weight: bold,  border: 2px solid rgba(15, 15, 35, 0.9)        }        @keyframes onlinePulse {},          0%, 100% { opacity: 1},          50% {
  opacity: 05
}.therapist-info {},  flex: 1        }        .therapist-name {},          font-size: 12rem          font-weight: bold          margin-bottom: 025rem        }        .therapist-title {},  color: rgba255, 255, 255, 0.7)          font-size: 09rem          margin-bottom: 025rem        }        .connection-type {},  color: #10B981,          font-size: 08rem          font-weight: 600          text-transform: uppercase          letter-spacing: 05px        }        .connection-actions {},  display: flex,  gap: 05rem        }        .session-request-btn, .emergency-contact-btn {},  width: 40px,  height: 40px,  border: none          border-radius: 50,  display: flex          align-items: center          justify-content: center,  cursor: pointer          font-size: 12rem,  transition: all 0.3s ease        }        .session-request-btn {},  background: rgba59, 130, 246, 0.2),  border: 1px solid rgba(59, 130, 246, 0.4)        }        .session-request-btn:hover {},  background: rgba59, 130, 246, 0.4)        }        .emergency-contact-btn {},  background: rgba239, 68, 68, 0.2),  border: 1px solid rgba(239, 68, 68, 0.4)        }        .emergency-contact-btn: hover:not(:disabled {},  background: rgba239, 68, 68, 0.4)        }        .emergency-contact-btn:disabled {},  opacity: 03,  cursor: notallowed        }        .therapist-specializations {},  display: flex          flex-wrap: wrap,  gap: 05rem          margin-bottom: 1rem        }        .specialization-tag {},  padding: 025rem 0.5rem,  border: 1px solid          border-radius: 15px          font-size: 07rem          font-weight: 600,  color: rgba255, 255, 255, 0.9)        }        .connection-stats {},  display: flex          justify-content: spacebetween          margin-bottom: 1rem        }        .stat-item {},          text-align: center        }        .stat-value {},  display: block          font-size: 11rem          font-weight: bold,  color: #10B981}        .stat-label {},          font-size: 07rem,  color: rgba255, 255, 255, 0.6)        }        .next-session {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 075rem,  background: rgba16, 185, 129, 0.1),  border: 1px solid rgba(16, 185, 129, 0.2)          border-radius: 10px          font-size: 09rem        }        .session-label {},  color: rgba255, 255, 255, 0.8)        }        .session-time {},  color: #10B981,          font-weight: 600        }        /* Modal Styles */        .modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.8)          backdrop-filter: blur(10px,  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 1rem        }        .find-therapist-modal, .session-request-modal {},  background: linear-gradient135deg, rgba(15, 15, 35, 0.95), rgba(26, 26, 62, 0.95)),  border: 1px solid rgba(139, 92, 246, 0.3)          border-radius: 20px,  width: 100,          max-width: 800px          max-height: 90vh          overflow-y: auto          backdrop-filter: blur(20px        }        .session-request-modal {},          max-width: 500px        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 15rem 2rem          border-bottom: 1px solid rgba(255, 255, 255, 0.1)        }        .modal-header h3 {},          font-size: 13rem          font-weight: 600,  color: #10B981,  margin: 0        }        .close-btn {},  background: none,  border: none,  color: rgba255, 255, 255, 0.6)          font-size: 15rem,  cursor: pointer,  padding: 025rem          border-radius: 50,  width: 32px,  height: 32px,  display: flex          align-items: center          justify-content: center,  transition: all 0.3s ease        }        .close-btn:hover {},  background: rgba255, 255, 255, 0.1),  color: white}        .modal-content {},  padding: 2rem        }        .search-filters {},          margin-bottom: 2rem,  padding: 15rem,  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 15px        }        .filter-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 1rem          margin-bottom: 1rem        }        .filter-item {},  display: flex          flex-direction: column,  gap: 05rem        }        .filter-item label {},          font-weight: 600,  color: #10B981,          font-size: 09rem        }        .filter-item select, .filter-item input {},  padding: 05rem,  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.2)          border-radius: 8px,  color: white,          font-size: 09rem        }        .range-value {},  color: #10B981,          font-weight: 600          font-size: 09rem        }        .filter-checkboxes {},  display: flex,  gap: 2rem        }        .checkbox-label {},  display: flex          align-items: center,  gap: 05rem,  cursor: pointer        }        .therapist-results {},          max-height: 500px          overflow-y: auto        }        .results-header h4 {},  color: #10B981,          margin-bottom: 1rem        }        .therapist-list {},  display: flex          flex-direction: column,  gap: 1rem        }        .therapist-result-card {},  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 12px,  padding: 15rem        }        .result-header {},  display: flex,  gap: 1rem          margin-bottom: 1rem        }        .result-avatar {},  width: 50px,  height: 50px,  background: linear-gradient135deg, #10B981, #059669)          border-radius: 50,  display: flex          align-items: center          justify-content: center,  color: white,          font-weight: bold        }        .result-info {},  flex: 1        }        .result-name {},          font-weight: bold          font-size: 11rem          margin-bottom: 025rem        }        .result-title, .result-credentials {},  color: rgba255, 255, 255, 0.7)          font-size: 09rem        }        .result-meta {},          text-align: right          font-size: 09rem        }        .rating {},  color: #F59E0B,          margin-bottom: 025rem        }        .rate {},  color: #10B981,          font-weight: 600          margin-bottom: 025rem        }        .online-indicator {},  color: #10B981,          font-size: 08rem        }        .result-specializations {},  display: flex          flex-wrap: wrap,  gap: 05rem          margin-bottom: 1rem        }        .spec-tag {},  padding: 025rem 0.5rem          border-radius: 12px          font-size: 07rem          font-weight: 600,  color: white}        .result-approach {},          font-size: 09rem,  color: rgba255, 255, 255, 0.8)          margin-bottom: 1rem          line-height: 14        }        .result-capabilities {},          margin-bottom: 1rem        }        .capabilities-list {},  display: flex          flex-wrap: wrap,  gap: 05rem        }        .capability {},  padding: 025rem 0.5rem,  background: rgba16, 185, 129, 0.2),  border: 1px solid rgba(16, 185, 129, 0.4)          border-radius: 10px          font-size: 07rem,  color: rgba255, 255, 255, 0.9)        }        .result-actions {},  display: flex,  gap: 05rem          flex-wrap: wrap        }        .consultation-btn, .connect-btn, .emergency-connect-btn {},  padding: 05rem 1rem,  border: none          border-radius: 8px          font-weight: 600,  cursor: pointer          font-size: 09rem,  transition: all 0.3s ease        }        .consultation-btn {},  background: rgba59, 130, 246, 0.2),  color: #93C5FD,  border: 1px solid rgba(59, 130, 246, 0.4)        }        .connect-btn {},  background: rgba16, 185, 129, 0.2),  color: #6EE7B7,  border: 1px solid rgba(16, 185, 129, 0.4)        }        .emergency-connect-btn {},  background: rgba239, 68, 68, 0.2),  color: #FCA5A5,  border: 1px solid rgba(239, 68, 68, 0.4)        }        .form-section {},          margin-bottom: 15rem        }        .form-section label {},  display: block          font-weight: 600,  color: #10B981,          margin-bottom: 05rem          font-size: 09rem        }        .form-section input, .form-section select, .form-section textarea {},  width: 100,  padding: 075rem,  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.2)          border-radius: 8px,  color: white,          font-size: 1rem,  transition: all 0.3s ease        }        .form-section input:focus, .form-section select:focus, .form-section textarea:focus {},  outline: none          border-color: #10B981          box-shadow: 0 0 0 2px rgba(16, 185, 129, 0.2)        }        .form-section textarea {},  resize: vertical,          min-height: 100px        }        .form-actions {},  display: flex,  gap: 1rem          justify-content: flexend          margin-top: 2rem          padding-top: 1rem          border-top: 1px solid rgba(255, 255, 255, 0.1)        }        .cancel-btn, .request-btn {},  padding: 075rem 1.5rem,  border: none          border-radius: 8px          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .cancel-btn {},  background: rgba107, 114, 128, 0.2),  color: rgba255, 255, 255, 0.8)        }        .request-btn {},  background: linear-gradient135deg, #10B981, #059669),  color: white}        .request-btn:disabled {},  opacity: 05,  cursor: notallowed        }        @media (max-width: 768px {}          .therapist-header {},            flex-direction: column,  gap: 1rem          }          .header-actions {},  width: 100,            justify-content: center          }          .therapist-connections-grid {},            grid-template-columns: 1fr          }          .filter-grid {},            grid-template-columns: 1fr          }          .filter-checkboxes {},            flex-direction: column,  gap: 1rem          }          .result-header {"}",            flex-direction: "column,",  gap: 05rem          }          .result-meta {},            text-align: left          }          .result-actions {},            justify-content: center          }          .form-actions {},            flex-direction: column          }</style>    </div>  )},export default TherapistTether;