import React, { useState, useEffect }, from "react",import { motion, AnimatePresence }, from "framer-motion",import { TetherRequest, as, TetherProfile }, from "../../services/astralTetherService",interface TetherRequestProps {}  pendingRequests: ITetherRequest[]  onRequestHandled: (requestId string) => void},interface TetherStrengthLevel {  id: "view-only  | ", support"  | ", full-sync,",",  name: string,  description: string,  permissions: string[]  color: string}const TetherRequest: React.FC<TetherRequestProps = ({ pendingRequests, onRequestHandled }) => {},  const []howNewRequest, setShowNewRequest] = useState(false);  const []ewRequestForm, setNewRequestForm] = useState({},  toUserId:  ,    friendCode: , ",",    message: ",",",  urgency: "medium, as ", low'  | 'medium'  | 'high"  | ", critical",    tetherType: "breathing, as ", breathing'  | 'presence'  | 'conversation"  | ", emergency",  isAnonymous: false,    preferredDuration: 30,",    strengthLevel: "support, as 'view-only'  | 'support"  | ", full-sync",",  expiresIn: 30,    isTemporary: false  })  const []electedDataToShare, setSelectedDataToShare] = useState<string[]>([]ood", ", presence]);",    const tetherService = getAstralTetherService(),;  const tetherStrengthLevels: TetherStrengthLevel[ ] []    {  id: "view-only,",      name: "View, Only",", `;`      description: "Basic, presence awareness and mood sharing",      permissions: []resence status", ", Basic mood indicators", ", Activity status]",",",      color: "3B82F6};"    {  id: "support,      name: "Support,      description: "Enhanced, sharing with interaction capabilities",      permissions: []ood tracking", ", Crisis alerts", ", Breathing sync", ", Comfort messages]",",",      color: "10B981};"    {  id: "full-sync,      name: "Full, Sync",",      description: "Complete, emotional and wellness synchronization",      permissions: []ealtime vitals", ", Location sharing", ", Progress data", ", Emergency contacts", ", Professional handoff]",",      color: "8B5CF6}"  ]",  const dataCategories = []];"    { id: "mood, label: ", Mood", Tracking", icon: ", 😊", description: ", Current", emotional state and patterns}",","    { id: "crisis, label: ", Crisis", Alerts", icon: ", 🚨", description: ", Emergency", situations and triggers}"    { id: "progress, label: ", Progress", Data", icon: ", 📈", description: ", Wellness", goals and achievements}"    { id: "location, label: ", Location", icon: ", 📍", description: ", Current location for safety}"    { id: "presence, label: ", Presence", icon: ", 👁️", description: ", Online/offline", status and availability}","    { id: "vitals, label: ", Vitals", icon: ", 💓", description: ", Heart", rate and breathing patterns}","    { id: "contacts, label: ", Emergency", Contacts", icon: ", 📞", description: ", Trusted", emergency contacts list}"  ]  const handleSendRequest = async () => {},    try {      const requestData: Omit<ITetherRequest, ", id'  | 'timestamp'  | 'expiresAt'>={',  fromUserId: "current-user,",  toUserId: newRequestFormfriendCode || newRequestForm.toUserId,        message: newRequestFormmessage || ```` like to connect with you through an Astral Tether for ${newRequestForm.tetherType}", support.`;`, ``        urgency: newRequestFormurgency,        tetherType: newRequestFormtetherType,        isAnonymous: newRequestForm.isAnonymous,        preferredDuration: newRequestFormpreferredDuration      },      if (newRequestForm.isAnonymous) {        requestData.anonymousAlias = ``nonymous ${newRequestForm.tetherType}", seeker`};`      await tetherService.sendTetherRequest(requestData)      // Reset form      setNewRequestForm({},  toUserId:  ,        friendCode: ,         message: ",",", `;`  urgency: "medium,        tetherType: "breathing,  isAnonymous: false,        preferredDuration: 30,",        strengthLevel: "support,",  expiresIn: 30,        isTemporary: false      })      setSelectedDataToShare([]ood, 'presence])',      setShowNewRequest(false)    "}, catch (error) {"
  console.error("Failed to send tether request: ", error)    "
},  const handleAcceptRequest = async (requestId: string => {},    try {      await tetherService.respondToTetherRequest(requestId, true)      onRequestHandled(requestId)    "}, catch (error) {"
  console.error("Failed to accept request: ", error)    "
},  const handleDeclineRequest = async (requestId: string => {},    try {      await tetherService.respondToTetherRequest(requestId, false)      onRequestHandled(requestId)    "}, catch (error) {"

},  const getUrgencyColor = (urgency: string => {},    switch (urgency) {
  ,      case "critical", : return "EF4444"      case 'high': return 'F59E0B"      case 'medium': return '10B981,'      case 'low': return '3B82F6", default: return ", #6B7280    "
},  const getTetherTypeIcon = (type: string => {},    switch (type) { case 'breathing': return '      case 'presence': return '      case 'conversation': return '      case 'emergency': return ', default: return ", ✨     },  const formatTimeAgo = (timestamp: number => {},    const now = Date.now();    const diff = now - timestamp;    const minutes = Math.floor(diff / 60000);    const hours = Math.floor(diff / 3600000`;    if (hours > 0) return ``hours}"h ago", ``    if (minutes > 0) return ``minutes}"m ago",    return `ust now  };  return (;    <div className="tether-request-container">", ", `;`      <div className="request-header">"        <div className="header-content">"          <h2 className="section-title">Tether Requests</h2>"          <p className="section-description">",            Send and manage tether connection requests with different strength levels and sharing options          </p>        </div>                <motion.button;          className="new-request-btn",          onClick={() => setShowNewRequest(true)}          whileHover={ scale: 105}          whileTap={ scale: 095}        >          <span className="btn-icon">➕</span>",          New Request        </motion.button>      </div>"      {/* Pending Requests */"};"      <div className="pending-requests">"        <h3 className="subsection-title">",          Pending Requests ({pendingRequests.length"});"        </h3>        "        { pendingRequests.length = == 0 ? (" };"          <div className="empty-state">"            <div className="empty-icon">📡</div>"            <div className="empty-title">No pending requests</div>"            <div className="empty-description">",              When someone sends you a tether request", it will appear here"            </div>          </div>        ) : ("          <div className="request-list">"            <AnimatePresence>              {pendingRequests.map((request) => (}                <motion.div;                  key={request.id"}, ", `;`                  className="request-card",                  initial={", opacity: "0`, y: 20}",                  animate={ opacity: 1, y: 0}                  exit={ opacity: 0, y: -20}                  transition={ duration: 03}";"                >                  <div className="request-header-info">"                    <div className="request-avatar">"                      <div className="avatar-placeholder">"                        {request.isAnonymous ? '👤' : request.fromUserId.charAt(0).toUpperCase()'}'                      </div>                      <div ",",                        className="urgency-indicator",                        style={ backgroundColor: getUrgencyColor(request.urgency}                       />                    </div>                    "                    <div className="request-details">"                      <div className="request-from">";"                        {request.isAnonymous ? request.anonymousAlias : ``ser ${request.fromUserId}"}"                      </div>                      <div className="request-meta">";"                        <span className="tether-type">"                          {getTetherTypeIcon(request.tetherType)} {request.tetherType"}"                        </span>                        <span className="request-time">"                          {formatTimeAgo(request.timestamp)"}"                        </span>                      </div>                    </div>"                    <div className="request-urgency">"                      <span ",                        className="urgency-badge",                        style={ backgroundColor: getUrgencyColor(request.urgency}                      >                        {request.urgency"}"                      </span>                    </div>                  </div>"                  <div className="request-message">"                    {request.message"}"                  </div>"                  {request.preferredDuration && ("}"                    <div className="request-duration">",                      Preferred duration: {requestpreferredDuration}, minutes                    </div>                  )}                  <div className="request-actions">"                    <motion.button;                      className="decline-btn",                      onClick={() => handleDeclineRequest(request.id)}                      whileHover={ scale: 105}                      whileTap={ scale: 095}                    >                      Decline                    </motion.button>                    <motion.button;                      className="accept-btn",                      onClick={() => handleAcceptRequest(request.id)}                      whileHover={ scale: 105}                      whileTap={ scale: 095}                    >                      Accept                    </motion.button>                  </div>                </motion.div>              ))}            </AnimatePresence>          </div>        )}      </div>"      {/* New Request Modal */"}"      <AnimatePresence>        {showNewRequest && (}          <motion.div;            className="modal-overlay",",            initial={ opacity: 0}            animate={ opacity: 1}            exit={ opacity: 0}            onClick={() => setShowNewRequest(false)"}", `;`          >            <motion.div;              className="modal-content",              initial={", opacity: "0`, scale: 0.9}",              animate={ opacity: 1, scale: 1}              exit={ opacity: 0, scale: 09}";",              onClick={(e) => e.stopPropagation()"}"            >              <div className="modal-header">"                <h3>Send Tether Request</h3>                <button ",                  className="close-btn",                  onClick={() => setShowNewRequest(false)"}"                >                  ✕                </button>              </div>"              <div className="modal-body">"                {/* Recipient */"};"                <div className="form-section">"                  <label className="form-label">Recipient</label>"                  <div className="recipient-options">"                    <input                      type = "text",                      placeholder="Enter", friend code (e.g.", STAR-4567);",                      className="form-input",                      value={newRequestForm.friendCode}                      onChange={(e) =  /> setNewRequestForm(prev => ( ...prev", friendCode: e.target.value))"}"                    />                    <div className="input-hint">",                      Share your friend code with trusted connections to enable tethering                    </div>                  </div>                </div>"                {/* Anonymous Option */"};"                <div className="form-section">"                  <label className="form-checkbox-container">"                    <input                      type = "checkbox",                      checked={newRequestForm.isAnonymous}                      onChange={(e) =  /> setNewRequestForm(prev => ( ...prev", isAnonymous: e.target.checked))"}"                    />                    <span className="checkmark"></span>"                    <span className="checkbox-label">Send as anonymous request</span>"                  </label>                  {newRequestForm.isAnonymous && ("}"                    <div className="anonymous-info">",                      Your identity will be hidden. The recipient will see you as "Anonymous Helper"                    </div>                  )}                </div>"                {/* Tether Type */"};"                <div className="form-section">"                  <label className="form-label">Tether Type</label>"                  <div className="tether-type-grid">"                    {[]}];"                      { id: "breathing, name: ", Breathing", icon: ", 🫁", desc: ", Synchronized", breathing exercises}",","                      { id: "presence, name: ", Presence", icon: ", 👁️", desc: ", Quiet", companionship}","                      { id: "conversation, name: ", Conversation", icon: ", 💬", desc: ", Active", support chat}","                      { id: "emergency, name: ", Emergency", icon: ", 🚨", desc: ", Crisis", support needed}"].map((type) => ("                      <label key={type.id"}, className="tether-type-option">"                        <input                          type = "radio",                          name = "tetherType",                          value={type.id}                          checked={newRequestForm.tetherType === type.id}                          onChange={(e) =  /> setNewRequestForm(prev => ( ...prev", tetherType: e.targetvalue as any"))"}"                        />                        <div className="type-card">"                          <div className="type-icon">{type.icon"}</div>"                          <div className="type-name">{type.name"}</div>"                          <div className="type-desc">{type.desc}</div>"                        </div>                      </label>                    ))}                  </div>                </div>"                {/* Tether Strength */"};"                <div className="form-section">"                  <label className="form-label">Connection Strength</label>"                  <div className="strength-levels">"                    {tetherStrengthLevels.map((level) => ("}"                      <label key={level.id"}, className="strength-option">"                        <input                          type = "radio",                          name = "strengthLevel",                          value={level.id}                          checked={newRequestForm.strengthLevel === level.id}                          onChange={(e) =  /> setNewRequestForm(prev => ( ...prev", strengthLevel: e.targetvalue as any"))"}"                        />                        <div ",                          className="strength-card",                          style={ borderColor: levelcolor}                        >                          <div className="strength-header">"                            <div ",                              className="strength-indicator",                              style={ backgroundColor: levelcolor}                             />                            <div className="strength-name">{level.name"}</div>"                          </div>                          <div className="strength-description">{level.description"}</div>"                          <div className="strength-permissions">"                            {level.permissions.map((permission, idx) => ("}"                              <span key={idx"}, className="permission-tag">"                                {permission}                              </span>                            ))}                          </div>                        </div>                      </label>                    ))}                  </div>                </div>"                {/* Data Sharing */"};"                <div className="form-section">"                  <label className="form-label">Data to Share</label>"                  <div className="data-categories">"                    {dataCategories.map((category) => ("}"                      <label key={category.id"}, className="data-category">"                        <input                          type = "checkbox",                          checked={selectedDataToShare.includes(category.id)}                          onChange={"
  {(e) =  />",                            if (e.target.checked)""
};",                              setSelectedDataToShare(prev = > []..prev", category.id]);"                            }, else { setSelectedDataToShare(prev = > prev.filter(id => id !== category.id)) }"}"                        />                        <span className="category-icon">{category.icon"}</span>"                        <div className="category-info">"                          <div className="category-label">{category.label"}</div>"                          <div className="category-description">{category.description}</div>"                        </div>                      </label>                    ))}                  </div>                </div>"                {/* Urgency and Duration */"};"                <div className="form-row">"                  <div className="form-section">"                    <label className="form-label">Urgency</label>"                    <select                      className="form-select",                      value={newRequestForm.urgency}",",                      onChange={(e) => setNewRequestForm(prev => ( ...prev", urgency: e.targetvalue as any"))"}"                    >                      <option value = "low", >Low - Can wait</option>"                      <option value = "medium", >Medium - Soon</option>"                      <option value = "high", >High - Urgent</option>"                      <option value = "critical", >Critical - Emergency</option>"                    </select>                  </div>"                  <div className="form-section">"                    <label className="form-label">Duration (minutes)</label>"                    <input                      type = "number",                      min = "5",                      max = "180",                      className="form-input",                      value={newRequestForm.preferredDuration}                      onChange={ (e) =  /> setNewRequestForm(prev => ( ...prev", preferredDuration: parseInt(e.target.value  );))}                    />                  </div>                </div>"                {/* Temporary Tether */"};"                <div className="form-section">"                  <label className="form-checkbox-container">"                    <input                      type = "checkbox",                      checked={newRequestForm.isTemporary}                      onChange={(e) =  /> setNewRequestForm(prev => ( ...prev", isTemporary: e.target.checked))"}"                    />                    <span className="checkmark"></span>"                    <span className="checkbox-label">Temporary tether (expires automatically)</span>"                  </label>                  {newRequestForm.isTemporary && ("}"                    <div className="temporary-options">"                      <label className="form-label">Expires in (hours)</label>"                      <select                        className="form-select",                        value={newRequestForm.expiresIn}                        onChange={ (e) => setNewRequestForm(prev => ( ...prev", expiresIn: parseInt(e.target.value  );))"}"                      >                        <option value = "1", >1 hour</option>"                        <option value = "6", >6 hours</option>"                        <option value = "24", >24 hours</option>"                        <option value = "72", >3 days</option>"                      </select>                    </div>                  )}                </div>"                {/* Message */"};"                <div className="form-section">"                  <label className="form-label">Personal Message (Optional)</label>"                  <textarea                    className="form-textarea",                    placeholder="Add", a personal message to your tether request...",                    value={newRequestForm.message}                    onChange={(e) => setNewRequestForm(prev => ( ...prev", message: e.target.value))}                    rows={3"}"                  />                </div>              </div>"              <div className="modal-footer">"                <button                  className="cancel-btn",                  onClick={() => setShowNewRequest(false)"}"                >                  Cancel                </button>                <motion.button;                  className="send-btn",                  onClick={handleSendRequest}                  whileHover={ scale: 105}                  whileTap={ scale: 095}                  disabled={!newRequestForm.friendCode}                >                  Send Request                </motion.button>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      <style jsx>{}        .tether-request-container {},  padding: 2rem          max-width: 1000px,  margin: 0 auto        }        .request-header {},  display: 'flex,          justify-content: spacebetween          align-items: flexstart          margin-bottom: 2rem,  gap: 2rem        }        .header-content {},  flex: 1        }        .section-title {},          font-size: 18rem          font-weight: bold,  background: linear-gradient45deg, #8B5CF6, #10B981)          background-clip: text          -webkit-background-clip: text          -webkit-text-fill-color: transparent          margin-bottom: 05rem        }        .section-description {},  color: rgba255, 255, 255, 0.7)          line-height: 16        }        .new-request-btn {},  display: flex          align-items: center,  gap: 05rem,  padding: 075rem 1.5rem,  background: linear-gradient135deg, #8B5CF6, #7C3AED),  border: none          border-radius: 12px,  color: white,          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease          box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3)        }        .new-request-btn:hover {},  transform: translateY(-2px          box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4)        }        .btn-icon {},          font-size: 12rem        }        .pending-requests {},  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 20px,  padding: 2rem          backdrop-filter: blur(10px        }        .subsection-title {},          font-size: 13rem          font-weight: 600,  color: #8B5CF6,          margin-bottom: 15rem        }        .empty-state {},          text-align: center,  padding: 3rem 1rem,  color: rgba255, 255, 255, 0.6)        }        .empty-icon {},          font-size: 3rem          margin-bottom: 1rem        }        .empty-title {},          font-size: 12rem          font-weight: 600          margin-bottom: 05rem        }        .empty-description {},          font-size: 09rem,  opacity: 07        }        .request-list {},  display: flex          flex-direction: column,  gap: 1rem        }        .request-card {},  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.15)          border-radius: 16px,  padding: 15rem,  transition: all 0.3s ease        }        .request-card:hover {},  transform: translateY(-2px          box-shadow: 0 8px 25px rgba(139, 92, 246, 0.15)        }        .request-header-info {},  display: flex          align-items: center,  gap: 1rem          margin-bottom: 1rem        }        .request-avatar {},  position: relative,  width: 50px,  height: 50px}        .avatar-placeholder {},  width: 100,  height: 100,  background: linear-gradient135deg, #8B5CF6, #10B981)          border-radius: 12px,  display: flex          align-items: center          justify-content: center          font-size: 12rem          font-weight: bold,  color: white}        .urgency-indicator {},  position: absolute,  top: -5px,  right: -5px,  width: 16px,  height: 16px,          border-radius: 50,  border: 2px solid rgba(15, 15, 35, 0.9)        }        .request-details {},  flex: 1        }        .request-from {},          font-weight: 600          font-size: 11rem          margin-bottom: 025rem        }        .request-meta {},  display: flex          align-items: center,  gap: 1rem          font-size: 09rem,  color: rgba255, 255, 255, 0.7)        }        .tether-type {},  display: flex          align-items: center,  gap: 025rem        }        .request-urgency {},          align-self: flexstart        }        .urgency-badge {},  padding: 025rem 0.75rem          border-radius: 20px          font-size: 08rem          font-weight: 600,  color: white,          text-transform: uppercase          letter-spacing: 05px        }        .request-message {},  margin: 1rem 0,  padding: 1rem,  background: rgba255, 255, 255, 0.05)          border-radius: 12px          line-height: 15          font-style: italic        }        .request-duration {},          font-size: 09rem,  color: rgba255, 255, 255, 0.6)          margin-bottom: 1rem        }        .request-actions {},  display: flex,  gap: 075rem          justify-content: flexend        }        .decline-btn, .accept-btn {},  padding: 05rem 1.25rem,  border: none          border-radius: 8px          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .decline-btn {},  background: rgba239, 68, 68, 0.2),  color: #FCA5A5,  border: 1px solid rgba(239, 68, 68, 0.3)        }        .decline-btn:hover {},  background: rgba239, 68, 68, 0.3)          border-color: rgba239, 68, 68, 0.5)        }        .accept-btn {},  background: linear-gradient135deg, #10B981, #059669),  color: white}        .accept-btn:hover {},  transform: translateY(-1px          box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3)        }        /* Modal Styles */        .modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.8)          backdrop-filter: blur(10px,  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 1rem        }        .modal-content {},  background: linear-gradient135deg, rgba(15, 15, 35, 0.95), rgba(26, 26, 62, 0.95)),  border: 1px solid rgba(139, 92, 246, 0.3)          border-radius: 20px,  width: 100,          max-width: 600px          max-height: 90vh          overflow-y: auto          backdrop-filter: blur(20px        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 15rem 2rem          border-bottom: 1px solid rgba(255, 255, 255, 0.1)        }        .modal-header h3 {},          font-size: 13rem          font-weight: 600,  color: #8B5CF6,  margin: 0        }        .close-btn {},  background: none,  border: none,  color: rgba255, 255, 255, 0.6)          font-size: 15rem,  cursor: pointer,  padding: 025rem          border-radius: 50,  width: 32px,  height: 32px,  display: flex          align-items: center          justify-content: center,  transition: all 0.3s ease        }        .close-btn:hover {},  background: rgba255, 255, 255, 0.1),  color: white}        .modal-body {},  padding: 2rem          max-height: 60vh          overflow-y: auto        }        .form-section {},          margin-bottom: 2rem        }        .form-row {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 1rem        }        .form-label {},  display: block          font-weight: 600,  color: #8B5CF6,          margin-bottom: 075rem          font-size: 09rem          text-transform: uppercase          letter-spacing: 05px        }        .form-input, .form-select, .form-textarea {},  width: 100,  padding: 075rem 1rem,  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.2)          border-radius: 12px,  color: white,          font-size: 1rem,  transition: all 0.3s ease        }        .form-input:focus, .form-select:focus, .form-textarea:focus {},  outline: none          border-color: #8B5CF6          box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.2)        }        .form-input::placeholder {},  color: rgba255, 255, 255, 0.5)        }        .input-hint {},          font-size: 08rem,  color: rgba255, 255, 255, 0.6)          margin-top: 05rem          font-style: italic        }        .form-checkbox-container {},  display: flex          align-items: center,  gap: 075rem  cursor: "pointer,",  padding: 05rem 0        }        .form-checkbox-container input[]ype="checkbox]" { "};",  display: none        }        .checkmark {},  width: 20px,  height: 20px,  background: rgba255, 255, 255, 0.1),  border: 2px solid rgba(255, 255, 255, 0.3)          border-radius: 4px  position: "relative,",  transition: all 0.3s ease        }        .form-checkbox-container input[]ype="checkbox]:checked" + .checkmark {"}",  background: #8B5CF6          border-color: #8B5CF6        },","        .form-checkbox-container input[]ype="checkbox]:checked" + .checkmark::after { "}",",  content: ",",  position: absolute,  top: 50,  left: 50,  transform: translate(-50, -50%),  color: white,          font-size: 12px          font-weight: bold        }        .checkbox-label {},          font-weight: 500        }        .anonymous-info, .temporary-options {},          margin-top: 075rem,  padding: 1rem,  background: rgba139, 92, 246, 0.1),  border: 1px solid rgba(139, 92, 246, 0.2)          border-radius: 10px          font-size: 09rem,  color: rgba255, 255, 255, 0.8)        }        .tether-type-grid {},  display: grid          grid-template-columns: repeat2, 1fr),  gap: 1rem        }        .tether-type-option {},  cursor: pointer        }        .tether-type-option input[]ype="radio]" { "};",  display: none        }        .type-card {},  padding: 1rem,  background: rgba255, 255, 255, 0.05),  border: 2px solid rgba(255, 255, 255, 0.1)          border-radius: 12px          text-align: "center,",  transition: all 0.3s ease        }        .tether-type-option input[]ype="radio]:checked" + .type-card {},",          border-color: #8B5CF6,  background: rgba139, 92, 246, 0.1),  transform: scale(1.02        }        .type-icon {},          font-size: 15rem          margin-bottom: 05rem        }        .type-name {},          font-weight: 600          margin-bottom: 025rem        }        .type-desc {},          font-size: 08rem,  color: rgba255, 255, 255, 0.7)        }        .strength-levels {  display: flex          flex-direction: "column,",  gap: 1rem        }        .strength-option {},  cursor: pointer        }        .strength-option input[]ype="radio]" { "}";",  display: none        }        .strength-card {},  padding: 15rem,  background: rgba255, 255, 255, 0.05),  border: 2px solid rgba(255, 255, 255, 0.1`;          border-radius: 12px,",  transition: all 0.3s ease        }        .strength-option input[]ype="radio]:checked" + .strength-card {"}",  transform: scale(1.02          box-shadow: 0 4px 20px rgba(139, 92, 246, 0.2)        }        .strength-header {},  display: flex          align-items: center,  gap: 075rem          margin-bottom: 075rem        }        .strength-indicator {},  width: 12px,  height: 12px,          border-radius: 50        }        .strength-name {},          font-weight: 600          font-size: 11rem        }        .strength-description {},  color: rgba255, 255, 255, 0.8)          margin-bottom: 1rem          line-height: 14        }        .strength-permissions {},  display: flex          flex-wrap: wrap,  gap: 05rem        }        .permission-tag {},  padding: 025rem 0.5rem,  background: rgba255, 255, 255, 0.1)          border-radius: 15px          font-size: 07rem,  color: rgba255, 255, 255, 0.8)        }        .data-categories {},  display: grid          grid-template-columns: repeat2, 1fr),  gap: 1rem        }        .data-category {},  display: flex          align-items: center,  gap: 075rem,  padding: 1rem,  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 10px,  cursor: pointer,  transition: all 0.3s ease        }        .data-category:hover {"}",  background: rgba255, 255, 255", 0.08);"        }        .data-category input[]ype="checkbox]:", checked + .category-icon + .category-info { color: #8B5CF6}","        .category-icon {},          font-size: 12rem,  width: 24px,          text-align: center        }        .category-info {},  flex: 1        }        .category-label {},          font-weight: 600          margin-bottom: 025rem        }        .category-description {},          font-size: 08rem,  color: rgba255, 255, 255, 0.6)        }        .modal-footer {},  padding: 15rem 2rem          border-top: 1px solid rgba(255, 255, 255, 0.1),  display: flex          justify-content: flexend,  gap: 1rem        }        .cancel-btn, .send-btn {},  padding: 075rem 1.5rem,  border: none          border-radius: 12px          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .cancel-btn {},  background: rgba255, 255, 255, 0.1),  color: rgba255, 255, 255, 0.8)        }        .cancel-btn:hover {},  background: rgba255, 255, 255, 0.15)        }        .send-btn {},  background: linear-gradient135deg, #8B5CF6, #7C3AED),  color: white}        .send-btn: hover:not(:disabled {},  transform: translateY(-1px          box-shadow: 0 4px 15px rgba(139, 92, 246, 0.4)        }        .send-btn:disabled {},  opacity: 05,  cursor: notallowed        }        @media(max-width: 768px {}          .request-header {},            flex-direction: column,  gap: 1rem          }          .tether-type-grid {},            grid-template-columns: 1fr          }          .data-categories {},            grid-template-columns: 1fr          }          .form-row {},            grid-template-columns: 1fr          }          .modal-content {},  margin: 05rem            max-width: none          },";"          .modal-header, .modal-body", .modal-footer {"
  ",  padding: 1rem          "
)}</style>    </div>  )},export default TetherRequest;