// Helper Matching System with Skill-based Matching and Schedulingimport React, { useState, useEffect }, from react",import { ", AlertCircle }, from ", lucide-react",interface Helper {}  id: string,  name: string,  avatar ? : string,  title: string,  specializations: string[]  languages: string[]  rating: number,  reviewCount: number,  hourlyRate: number,  availability: AvailabilitySlot[]  bio: string,  credentials: string[]  experience: number, // years,  sessionsCompleted: number,  responseTime: string,  isVerified: boolean,  isOnline: boolean  timezone: "string,",  preferredMethods: ("chat  | ", voice'  | 'video')[]'},interface AvailabilitySlot {}  day: string,  startTime: string,  endTime: string,  isRecurring: boolean},interface BookingRequest {}  helperId: string,  date: Date,  time: string,  duration: "number,",  method: "chat  | ", voice"  | ", video,",",  topic: string  notes ? : string  paymentMethod?: string},interface Review {}  id: string,  userId: string,  userName: string,  rating: number,  comment: string,  date: Date,  helpfulCount: number},export const HelperMatching: ReactFC = () => {},  const []elpers, setHelpers] = useState<Helper[]>([])  const []ilteredHelpers, setFilteredHelpers] = useState<Helper[]>([])  const []electedHelper, setSelectedHelper] = useState<Helper | null>(null)  const []earchQuery", setSearchQuery] = useState(")"),;",  const []ilters", setFilters] = useState({",  specialization: "all,",    priceRange: "all,", `;`    availability: "all,",    rating: 0,",    language: "all,",    method: "all});",  const []howBookingModal, setShowBookingModal] = useState(false)  const []ookingDetails, setBookingDetails] = useState<BookingRequest | null>(null)  const []electedDate, setSelectedDate] = useState(new Date())  const []urrentView", setCurrentView] = useState<", grid'  | 'list'>('grid)")"  // Initialize mock helpers;  useEffect(() => {},    const mockHelpers: Helper[ ] []      {  id: "helper-1,",        name: "Dr., Sarah Mitchell",        title: "Licensed, Clinical Psychologist",        specializations: []nxiety, ", Depression", ", Trauma", ", PTSD],",",        languages: []nglish, ", Spanish],",",        rating: 49,        reviewCount: 234,        hourlyRate: 120,        availability: []];          { day: "Monday, startTime: ", 09:", ", 00", endTime: ", 17:", ", 00, isRecurring: true }",","          { day: "Tuesday, startTime: ", 09: "00, endTime: ", 17: "00, isRecurring: true }"          { day: "Wednesday, startTime: ", 09: "00, endTime: ", 17: "00, isRecurring: true }"          { day: "Thursday, startTime: ", 09: "00, endTime: ", 17: "00, isRecurring: true }"          { day: "Friday, startTime: ", 09: "00, endTime: ", 14:"00, isRecurring: true }"        ]",        bio: "Specializing, in evidence-based treatments for anxiety and trauma with 15+ years of experience.",        credentials: []h.D Clinical Psychology", ", CBT Certified", ", EMDR Trained],",",        experience: 15,        sessionsCompleted: 1420,        responseTime: "Within, 2 hours",  isVerified: true,        isOnline: "true,        timezone: "EST,",        preferredMethods: []ideo, ", voice]" }"      {",  id: "helper-2,",        name: "Michael, Chen, LMFT",        title: "Marriage & Family Therapist",        specializations: []elationships, ", Couples Therapy", ", Family Dynamics],",",        languages: []nglish, ", Mandarin],",",        rating: 48,        reviewCount: 189,        hourlyRate: 95,        availability: []];          { day: "Monday, startTime: ", 14:", ", 00", endTime: ", 20:", ", 00, isRecurring: true }",","          { day: "Tuesday, startTime: ", 14: "00, endTime: ", 20: "00, isRecurring: true }"          { day: "Thursday, startTime: ", 14: "00, endTime: ", 20: "00, isRecurring: true }"          { day: "Saturday, startTime: ", 10:", ", 00", endTime: ", 16:", ", 00, isRecurring: true }"]",        bio: "Helping, couples and families build stronger, healthier relationships through compassionate guidance.",        credentials: []MFT, ", Gottman Method Trained],",",        experience: 10,        sessionsCompleted: 890,        responseTime: "Within 4 hours",  isVerified: true,        isOnline: "false,        timezone: "PST,",        preferredMethods: []ideo, ", chat]"},","      {  id: "helper-3,        name: "Emma, Rodriguez",        title: "Peer, Support Specialist",        specializations: []epression, ", Self-Esteem", ", Life Transitions],",",        languages: []nglish, ", Portuguese],",",        rating: 47,        reviewCount: 342,        hourlyRate: 45,        availability: []];          { day: "Monday, startTime: ", 18:", ", 00", endTime: ", 22:", ", 00, isRecurring: true }",","          { day: "Wednesday, startTime: ", 18: "00, endTime: ", 22: "00, isRecurring: true }"          { day: "Friday, startTime: ", 18: "00, endTime: ", 22: "00, isRecurring: true }"          { day: "Sunday, startTime: ", 12: "00, endTime: ", 18:"00, isRecurring: true }"        ]",        bio: "Lived, experience advocate providing compassionate peer support for mental health challenges.",        credentials: []ertified Peer Support Specialist", ", Mental Health First Aid],",",        experience: 5,        sessionsCompleted: 567,        responseTime: "Within 1 hour",  isVerified: true,        isOnline: "true,        timezone: "CST,",        preferredMethods: []hat, ", voice", ", video]"},","      {  id: "helper-4,        name: "Dr James Wilson",        title: "Psychiatrist & Therapist",        specializations: []ipolar Disorder", ", ADHD", ", Medication Management],",",        languages: []nglish,        rating: 49,        reviewCount: 156,        hourlyRate: 200,",",        availability: []];          { day: "Tuesday, startTime: ", 10: "00, endTime: ", 16: "00, isRecurring: true }","          { day: "Thursday, startTime: ", 10: "00, endTime: ", 16: "00, isRecurring: true }"        ]",        bio: "Combining, medication management with psychotherapy for comprehensive mental health treatment.",        credentials: [].D., ", Board Certified Psychiatrist", ", DBT Certified],",",        experience: 20,        sessionsCompleted: 2100,        responseTime: "Within 24 hours",",  isVerified: true,        isOnline: "true,",        timezone: "EST,        preferredMethods: []ideo      }    ]    setHelpers(mockHelpers)    setFilteredHelpers(mockHelpers)  }, [])  // Apply filters  useEffect(() => {},    let filtered = []..helpers];    // Search query    if (searchQuery)  {      filtered = filtered.filter(helper =>, helper.name.toLowerCase().includes(searchQuery.toLowerCase()) ||        helper.specializations.some(spec = > , spec.toLowerCase().includes(searchQuery.toLowerCase())        ) ||        helper.bio.toLowerCase().includes(searchQuery.toLowerCase())      )    }    // Specialization filter,    if (filters.specialization !== "all) {,      filtered = filtered.filter(helper =>, helper.specializations.includes(filters.specialization)      )    }    // Price range filter;    if (filters.priceRange !== all) {,      const []in", max] = filters.priceRange.split(', -')map(Number),",      filtered = filtered.filter(helper =>        helper.hourlyRate >= min && helper.hourlyRate <= "max"      )    }    // Rating filter;    if (filters.rating > 0)  {      filtered = filtered.filter(helper =>, helper.rating >= filters.rating      )    }    // Language filter;    if (filters.language !== all) {      filtered = filtered.filter(helper =>, helper.languages.includes(filters.language)      )    }    // Method filter;    if (filters.method !== all) {      filtered = filtered.filter(helper =>, helper.preferredMethods.includes(filters.method as any)      )    }    // Availability filter;    if (filters.availability = == online",      filtered = filtered.filter(helper => helper.isOnline);    },    setFilteredHelpers(filtered)  }, []earchQuery, filters, helpers])  const handleBookSession = (helper: Helper => {},    setSelectedHelper(helper)    setShowBookingModal(true)  },  const confirmBooking = () => {},    if (!bookingDetails) return // Process booking    alert(``ession booked with ${selectedHelper?.name}, on ${selectedDate.toLocaleDateString()}, at ${bookingDetails.time})"    // Reset    setShowBookingModal(false)    setBookingDetails(null)    setSelectedHelper(null)  },  const getAvailableTimeSlots = (helper: Helper, date: Date => {}`;    const dayName = date.toLocaleDateString(``n-US", { weekday: ", long"});",    const daySlots = helper.availability.filter(slot => slot.day === dayName`;        const timeSlots: string[ ] [];    daySlots.forEach(slot = > { " }",",      const start = parseInt(slot.startTime.split(': ')]]);",      const end = parseInt(slot.endTime.split(': ')]]);",      for (let hour = start, hour < end; hour++) {        timeSlots.push(``{hour.toString().padStart(2`, ``)}":00`);`        timeSlots.push(``{hour.toString().padStart(2`, ``')}``30`)`}"    })        return timeSlots  };  return (;    <div className="helper-matching">", ", `;`      <div className="matching-header">"        <h1>Find Your Perfect Support Match</h1>        <p>Connect with verified helpers who understand your journey</p>      </div>"      <div className="search-section">"        <div className="search-bar">"          <Search className="search-icon"  />"          <input            type = "text",            placeholder="Search", by name, specialization", or keyword...",            value={searchQuery}            onChange={(e) =  /> setSearchQuery(e.target.value)"}"          />        </div>        "        <div className="view-toggle">"          <button ",            className={ currentView === "grid"}",            onClick={() => setCurrentView("grid")}"          >            Grid View          </button>          <button ",            className={ currentView === "list"}",            onClick={() => setCurrentView("list")}"          >            List View          </button>        </div>      </div>"      <div className="filters-section">"        <div className="filter-group">"          <label>Specialization</label>          <select             value={filters.specialization}            onChange={(e) => setFilters( ...filters, specialization: e.targetvalue)"}"          >            <option value = "all", >All Specializations</option>"            <option value = "Anxiety", >Anxiety</option>"            <option value = "Depression", >Depression</option>"            <option value = "Trauma", >Trauma & PTSD</option>"            <option value = "Relationships", >Relationships</option>"            <option value = "ADHD", >ADHD</option>"            <option value="Bipolar", Disorder", >Bipolar Disorder</option>"          </select>        </div>"        <div className="filter-group">"          <label>Price Range</label>          <select             value={filters.priceRange}            onChange={(e) => setFilters( ...filters, priceRange: e.targetvalue)"}"          >            <option value = "all", >All Prices</option>"            <option value = "0-50", >$0 - $50</option>"            <option value = "50-100", >$50 - $100</option>"            <option value = "100-150", >$100 - $150</option>"            <option value = "150-999", >$150+</option>"          </select>        </div>"        <div className="filter-group">"          <label>Language</label>          <select             value={filters.language}            onChange={(e) => setFilters( ...filters, language: e.targetvalue)"}"          >            <option value = "all", >All Languages</option>"            <option value = "English", >English</option>"            <option value = "Spanish", >Spanish</option>"            <option value = "Mandarin", >Mandarin</option>"            <option value = "Portuguese", >Portuguese</option>"          </select>        </div>"        <div className="filter-group">"          <label>Session Type</label>          <select             value={filters.method}            onChange={(e) => setFilters( ...filters, method: e.targetvalue)"}"          >            <option value = "all", >All Types</option>"            <option value = "video", >Video Call</option>"            <option value = "voice", >Voice Call</option>"            <option value = "chat", >Text Chat</option>"          </select>        </div>"        <div className="filter-group">"          <label>Availability</label>          <select             value={filters.availability}            onChange={(e) => setFilters( ...filters, availability: e.targetvalue)"}"          >            <option value = "all", >All Helpers</option>"            <option value = "online", >Available Now</option>"          </select>        </div>      </div>"      <div className="results-info">";"        <span>Found {filteredHelpers.length"}, helpers</span>"        <button           onClick={() => setFilters(",",",  specialization: "all`  priceRange: "all,", `;`            availability: "all,",            rating: 0,",            language: "all,",            method: "all})},          className="clear-filters"        >          Clear Filters        </button>      </div>"      <div className={helpers-container $currentView"}>        { filteredHelpers.map(helper = > ("   );"          <div key={helper.id"}, className="helper-card">"            <div className="helper-header">"              <div className="helper-avatar">"                {helper.avatar ? (}                  <img src={helper.avatar}, alt={helper.name}  />                ) : ("                  <User size={40}  />                )}                {helper.isOnline && <span className="online-indicator"></span>"};"              </div>              <div className="helper-info">"                <h3>                  {helper.name"}"                  {helper.isVerified && ("}"                    <Shield className="verified-badge", size={16}  />"                  )"}"                </h3>                <p className="helper-title">{helper.title"}</p>"                <div className="helper-meta">"                  <span className="rating">"                    <Star size={14"}, fill=", currentColor"  />"                    {helper.rating} ({helper.reviewCount"}, reviews);"                  </span>                  <span className="sessions">"                    <CheckCircle size={14}  />                    {helper.sessionsCompleted"}, sessions"                  </span>                </div>              </div>              <div className="helper-price">"                <span className="price">${helper.hourlyRate}</span>"                <span className="price-unit">/hour</span>"              </div>            </div>"            <div className="helper-specializations">"              { helper.specializations.map(spec = > ("   );"                <span key={spec"}, className="specialization-tag">{spec}</span>"              ))"}"            </div>"            <p className="helper-bio">{helper.bio"}</p>","            <div className="helper-details">"              <div className="detail-item">"                <Globe size={14}  />                <span>{helper.languages.join(", ")}</span>"              </div>              <div className="detail-item">"                <Briefcase size={14}  />                <span>{helper.experience"}, years experience</span>"              </div>              <div className="detail-item">"                <Clock size={14}  />                <span>{helper.responseTime"}</span>"              </div>            </div>"            <div className="helper-methods">"              {helper.preferredMethods.includes("video") && ("}"                <span className="method-badge">"                  <Video size={14}  /> Video;                </span>              )}              {helper.preferredMethods.includes("voice") && ("}"                <span className="method-badge">"                  <Phone size={14}  /> Voice;                </span>              )}              {helper.preferredMethods.includes("chat") && ("}"                <span className="method-badge">"                  <MessageCircle size={14}  /> Chat;                </span>              )"}"            </div>"            <div className="helper-actions">"              <button className="view-profile-btn">",                View Profile              </button>              <button ",                className="book-session-btn",                onClick={() => handleBookSession(helper)}              >                Book Session              </button>            </div>          </div>        ))"}"      </div>"      {showBookingModal && selectedHelper && ("}"        <div className="booking-modal">"          <div className="modal-content">"            <div className="modal-header">"              <h2>Book Session with {selectedHelper.name}</h2>              <button onClick={() => setShowBookingModal(false)"}, className="close-btn">"                <X  />              </button>            </div>"            <div className="booking-form">"              <div className="calendar-section">"                <h3>Select Date</h3>                <div className="calendar-nav">"                  <button onClick={() => setSelectedDate(new Date(selectedDate.setDate(selectedDate.getDate() - 1)))}>                    <ChevronLeft  />                  </button>                  <span>{selectedDate.toLocaleDateString()}</span>                  <button onClick={() => setSelectedDate(new Date(selectedDate.setDate(selectedDate.getDate() + 1)))"}>"                    <ChevronRight  />                  </button>                </div>              </div>"              <div className="time-slots-section">"                <h3>Available Time Slots</h3>                <div className="time-slots">"                  {getAvailableTimeSlots(selectedHelper, selectedDate).map(slot  => (                    <button ";",                      key={slot"}",                      className={time-slot $bookingDetails?.time === slot ? ``elected :}                      onClick={ () => setBookingDetails(, ...bookingDetails,                        helperId: selectedHelperid,                        date: selectedDate,                        time: slot,                        duration: 60,                        method: ``ideo`                        topic:  }, as BookingRequest)}                    >                      {slot}                    </button>                  ))"}"                </div>              </div>";"              <div className="session-details">"                <div className="form-group">"                  <label>Session Duration</label>                  <select                     onChange={(e) => setBookingDetails(, ...bookingDetails,                      duration: parseInt(e.target.value}, as BookingRequest)"}"                  >                    <option value = "30", >30 minutes</option>"                    <option value = "60", selected>60 minutes</option>"                    <option value = "90", >90 minutes</option>"                  </select>                </div>"                <div className="form-group">"                  <label>Session Method</label>                  <div className="method-options">"                    {selectedHelper.preferredMethods.map(method  => ("                      <button ";",                        key={method"}",                        className={method-option $bookingDetails?.method === method ? ``elected :}                        onClick={ () => setBookingDetails(, ...bookingDetails`,                          method }, as BookingRequest)"}"                      >";"                        {method = == ``ideo" && <Video  />"};"                        { method = == "voice"}";"                        { method = == "chat"};"                        {method}                      </button>                    ))"}"                  </div>                </div>"                <div className="form-group">"                  <label>What would you like to discuss?</label>                  <textarea ",                    placeholder="Brief", description of topics you", d like to cover...";",                    onChange={(e) => setBookingDetails(, ...bookingDetails`,                      topic: e.target.value}, as BookingRequest)"}"                  />                </div>              </div>";"              <div className="booking-summary">"                <h3>Booking Summary</h3>                <div className="summary-item", ">"                  <span>Helper: </span                  <span>{selectedHelper.name"}</span>"                </div>                <div className="summary-item">"                  <span>Date: </span                  <span>{selectedDate.toLocaleDateString()"}</span>"                </div>                <div className="summary-item">"                  <span>Time: </span                  <span>{bookingDetails?.time | | "Not selected"}</span>"                </div>                <div className="summary-item">"                  <span>Duration: </span                  <span>{bookingDetails?.duration || 60"}, minutes</span>"                </div>                <div className="summary-item total">"                  <span>Total Cost: </span                  <span>${selectedHelper.hourlyRate * ((bookingDetails?.duration || 60) / 60)}"span>"                </div>              </div>"              <div className="modal-actions">"                <button onClick={() => setShowBookingModal(false)"}, className="cancel-btn">",                  Cancel                </button>                <button ",                  onClick={confirmBooking"}",                  className="confirm-btn",                  disabled={!bookingDetails?.time || !bookingDetails?.topic}                >                  Confirm Booking                </button>              </div>            </div>          </div>        </div>      )}      <style jsx>{}        .helper-matching {},          max-width: 1400px,  margin: 0 auto,  padding: 20px        }        .matching-header {},          text-align: center          margin-bottom: 40px        }        .matching-header h1 {},  margin: 0 0 10px 0          font-size: 25em,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%)          -webkit-background-clip: text          -webkit-text-fill-color: transparent        }        .matching-header p {},  color: #666,          font-size: 11em        }        .search-section {},  display: flex,  gap: 20px          margin-bottom: 30px        }        .search-bar {},  flex: 1,  position: relative}        .search-icon {},  position: absolute,  left: 15px,  top: 50,  transform: translateY(-50%,  width: 20px,  height: 20px,  color: #666}        .search-bar input {},  width: 100,  padding: 15px 15px 15px 45px,  border: 2px solid #e5e5e5          border-radius: 12px          font-size: 16px,  transition: bordercolor 0.3s        }        .search-bar input:focus {},  outline: none          border-color: #667eea        }        .view-toggle {},  display: flex,  gap: 5px,  background: #f0f0f0,  padding: 5px          border-radius: 10px        }        .view-toggle button {},  padding: 10px 20px,  background: transparent,  border: none          border-radius: 8px,  cursor: pointer,  transition: all 0.3s        }        .view-toggle button.active {},  background: white          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1)        }        .filters-section {},  display: flex,  gap: 15px          margin-bottom: 20px          flex-wrap: wrap        }        .filter-group {},  display: flex          flex-direction: column,  gap: 5px        }        .filter-group label {},          font-size: 12px,  color: #666,          font-weight: 600        }        .filter-group select {},  padding: 10px 15px,  border: 1px solid #e5e5e5          border-radius: 8px,  background: white          font-size: 14px,  cursor: pointer,  transition: bordercolor 0.3s        }        .filter-group select:hover {},          border-color: #667eea        }        .results-info {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 20px,  color: #666}        .clear-filters {},  padding: 8px 16px,  background: none,  border: 1px solid #e5e5e5          border-radius: 8px,  color: #666,  cursor: pointer,  transition: all 0.3s        }        .clear-filters:hover {},          border-color: #667eea,  color: #667eea}        .helpers-container {},  display: grid,  gap: 20px        }        .helpers-container.grid {},          grid-template-columns: repeat(autofill, minmax(350px, 1fr))        }        .helpers-container.list {},          grid-template-columns: 1fr        }        .helper-card {},  background: white          border-radius: 16px,  padding: 25px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08),  transition: all 0.3s        }        .helper-card:hover {},  transform: translateY(-2px          box-shadow: 0 4px 25px rgba(0, 0, 0, 0.12)        }        .helper-header {},  display: flex,  gap: 15px          margin-bottom: 20px        }        .helper-avatar {},  position: relative,  width: 60px,  height: 60px,          border-radius: 50,  background: #f0f0f0,  display: flex          align-items: center          justify-content: center,  color: #666}        .helper-avatar img {},  width: 100,  height: 100,          border-radius: 50          object-fit: cover        }        .online-indicator {},  position: absolute,  bottom: 0,  right: 0,  width: 16px,  height: 16px,  background: #22c55e,  border: 3px solid white          border-radius: 50        }        .helper-info {},  flex: 1        }        .helper-info h3 {},  margin: 0,  display: flex          align-items: center,  gap: 8px        }        .verified-badge {},  color: #667eea}        .helper-title {},  margin: 5px 0,  color: #666,          font-size: 14px        }        .helper-meta {},  display: flex,  gap: 15px          margin-top: 8px        }        .helper-meta span {},  display: flex          align-items: center,  gap: 5px          font-size: 13px,  color: #888}        .rating {},  color: #f59e0b}        .helper-price {},          text-align: right        }        .price {},          font-size: 24px          font-weight: bold,  color: #333}        .price-unit {},          font-size: 14px,  color: #666}        .helper-specializations {},  display: flex          flex-wrap: wrap,  gap: 8px          margin-bottom: 15px        }        .specialization-tag {},  padding: 5px 12px,  background: #e0e7ff,  color: #4c51bf,          border-radius: 20px          font-size: 13px        }        .helper-bio {},  color: #666,          line-height: 16          margin-bottom: 15px        }        .helper-details {},  display: flex          flex-wrap: wrap,  gap: 20px          margin-bottom: 15px,  padding: 15px 0          border-top: 1px solid #e5e5e5          border-bottom: 1px solid #e5e5e5        }        .detail-item {},  display: flex          align-items: center,  gap: 5px          font-size: 14px,  color: #666}        .helper-methods {},  display: flex,  gap: 10px          margin-bottom: 20px        }        .method-badge {},  display: flex          align-items: center,  gap: 5px,  padding: 5px 10px,  background: #f0f0f0          border-radius: 15px          font-size: 13px,  color: #666}        .helper-actions {},  display: flex,  gap: 10px        }        .view-profile-btn,        .book-session-btn {},  flex: 1,  padding: 12px,  border: none          border-radius: 10px          font-size: 15px,  cursor: pointer,  transition: all 0.3s        }        .view-profile-btn {},  background: #f0f0f0,  color: #333}        .view-profile-btn:hover {},  background: #e0e0e0        }        .book-session-btn {},  background: #667eea,  color: white}        .book-session-btn:hover {},  background: #5a67d8        }        .booking-modal {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000        }        .modal-content {},  background: white          border-radius: 20px,  width: 90,          max-width: 700px          max-height: 90vh          overflow-y: auto        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 25px          border-bottom: 1px solid #e5e5e5        }        .modal-header h2 {},  margin: 0        }        .close-btn {},  width: 40px,  height: 40px,          border-radius: 50,  border: none,  background: #f0f0f0,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: background 0.3s        }        .close-btn:hover {},  background: #e0e0e0        }        .booking-form {},  padding: 25px        }        .calendar-section {},          margin-bottom: 30px        }        .calendar-section h3 {},  margin: 0 0 15px 0        }        .calendar-nav {},  display: flex          align-items: center          justify-content: center,  gap: 20px        }        .calendar-nav button {},  width: 36px,  height: 36px,          border-radius: 50,  border: 1px solid #e5e5e5,  background: white,  cursor: pointer,  display: flex          align-items: center          justify-content: center        }        .time-slots-section {},          margin-bottom: 30px        }        .time-slots-section h3 {},  margin: 0 0 15px 0        }        .time-slots {},  display: grid          grid-template-columns: repeat(autofill, minmax(80px, 1fr)),  gap: 10px        }        .time-slot {},  padding: 10px,  border: 1px solid #e5e5e5          border-radius: 8px,  background: white,  cursor: pointer          text-align: center,  transition: all 0.3s        }        .time-slot:hover {},          border-color: #667eea        }        .time-slot.selected {},  background: #667eea,  color: white,          border-color: #667eea        }        .session-details {},          margin-bottom: 30px        }        .form-group {},          margin-bottom: 20px        }        .form-group label {},  display: block          margin-bottom: 8px          font-weight: 600,  color: #333}        .form-group select,        .form-group textarea {},  width: 100,  padding: 12px,  border: 1px solid #e5e5e5          border-radius: 8px          font-size: 15px        }        .form-group textarea {},  resize: vertical,          min-height: 100px        }        .method-options {},  display: flex,  gap: 10px        }        .method-option {},  flex: 1,  padding: 12px,  border: 1px solid #e5e5e5          border-radius: 8px,  background: white,  cursor: pointer,  display: flex          flex-direction: column          align-items: center,  gap: 5px,  transition: all 0.3s        }        .method-option:hover {},          border-color: #667eea        }        .method-option.selected {},  background: #667eea,  color: white,          border-color: #667eea        }        .booking-summary {},  background: #f7f7f7          border-radius: 12px,  padding: 20px          margin-bottom: 30px        }        .booking-summary h3 {},  margin: 0 0 15px 0        }        .summary-item {},  display: flex          justify-content: spacebetween,  padding: 10px 0          border-bottom: 1px solid #e5e5e5        }        .summary-item.total {},          border-bottom: none          padding-top: 15px          font-weight: bold          font-size: 18px        }        .modal-actions {},  display: flex,  gap: 10px,  padding: 20px          border-top: 1px solid #e5e5e5        }        .cancel-btn,        .confirm-btn {},  flex: 1,  padding: 15px,  border: none          border-radius: 10px          font-size: 16px,  cursor: pointer,  transition: all 0.3s        }        .cancel-btn {},  background: #f0f0f0,  color: #333}        .confirm-btn {},  background: #667eea,  color: white}        .confirm-btn:disabled {"}",  background: #ccc,",  cursor: notallowed        }      }</style>    </div>  )}";""