import React, { useState, useEffect, useRef, useCallback }, from "react",import { Play, Pause, SkipForward, Volume2, Clock, Heart, Headphones, Star, Download, Share2, ChevronLeft, ChevronRight, Sparkles, Zap, Target }, from "lucide-react",import { motion, AnimatePresence }, from "framer-motion"// Extracted inline styles for performanceconst style1={ width: ``currentTime / duration) * 100%}interface Meditation {}  id: string,  title: string,", `;`  description: "string,",  duration: number // in minutes,  category: "guided  | ", music'  | 'nature'  | 'breathing'  | 'body-scan"  | ", mindfulness",  audioUrl ? : string,  thumbnail: string  instructor ? : string,  difficulty: "beginner  | ", intermediate"  | ", advanced",  tags: string[]  benefits: string[]  isFavorite ? : boolean  completedCount?: number},interface MeditationSession {}  id: string,  meditationId: string,  startTime: string,  endTime: string,  duration: number,  completed: boolean  notes?: string  moodBefore?: number  moodAfter?: number},const MEDITATIONS: Meditation[ ] []  {  id: "1,",    title: "Morning, Mindfulness",    description: "Start, your day with clarity and intention",    duration: 10,    category: "mindfulness,    thumbnail: ",    difficulty: "beginner,",    tags: []orning, ", energy, "focus]",    benefits: []ncreased focus", ", Better mood, "Mental clarity]'"  }",","  {  id: "2,    title: "Deep, Sleep Journey",    description: "Drift, into peaceful and restorative sleep",    duration: 20,    category: "guided,    thumbnail: ",    difficulty: "beginner,",    tags: []leep, ", relaxation, "evening]",    benefits: []etter sleep", ", Reduced anxiety, "Deep relaxation]'"  }",","  {  id: "3,    title: "Ocean, Waves",    description: "Calming, sounds of the ocean for deep relaxation",    duration: 15,    category: "nature,    thumbnail: ",    difficulty: "beginner,",    tags: []ature, ", calm, "stress-relief]",    benefits: []tress reduction", ", Mental calm, "Peace]'"  }",","  {  id: "4,    title: "4-7-8, Breathing",    description: "Powerful, breathing technique for instant calm",    duration: 5,    category: "breathing,    thumbnail: ",    difficulty: "beginner,",    tags: []reathing, ", anxiety, "quick]",    benefits: []nxiety relief", ", Better breathing, "Quick calm]'"  }",","  {  id: "5,    title: "Body, Scan Relaxation",    description: "Release, tension from head to toe",    duration: 15,    category: "body-scan,    thumbnail: ",    difficulty: "intermediate,",    tags: []elaxation, ", body-awareness, "tension-relief]",    benefits: []uscle relaxation", ", Body awareness, "Pain relief]'"  }",","  {  id: "6,    title: "Forest, Walk",    description: "Immerse, yourself in the peaceful sounds of nature",    duration: 20,    category: "nature,    thumbnail: ",    difficulty: "beginner,",    tags: []ature, ", grounding, "peaceful]",    benefits: []rounding, ", Connection to nature, "Mental clarity]'"  }",","  {  id: "7,    title: "Loving, Kindness",    description: "Cultivate, compassion for yourself and others",    duration: 12,    category: "guided,    thumbnail: ",    difficulty: "intermediate,",    tags: []ompassion, ", self-love, "healing]",    benefits: []ncreased compassion", ", Better relationships, "Self-love]'"  }",","  {  id: "8,    title: "Rain, Sounds",    description: "Gentle, rain for focus and relaxation",    duration: 30,    category: "nature,",    thumbnail: ",",    difficulty: "beginner,",    tags: []ain, ", focus, "study]",    benefits: []etter focus", ", Relaxation, "White noise]'  }]",const BACKGROUND_SOUNDS = []];"  { id: "rain, name: ", Rain", icon: ", 🌧️", url: ", /sounds/rain.mp3" }"  { id: "ocean, name: ", Ocean", icon: ", 🌊", url: ", /sounds/ocean.mp3" }"  { id: "forest, name: ", Forest", icon: ", 🌲", url: ", /sounds/forest.mp3" }"  { id: "fire, name: ", Fireplace", icon: ", 🔥", url: ", /sounds/fire.mp3" },"  { id: "wind, name: ", Wind", icon: ", 💨", url: ", /sounds/wind.mp3" },"  { id: "birds, name: ", Birds", icon: ", 🐦", url: ", /sounds/birds.mp3" }]",export const MeditationCenter: ReactFC = () => {},  const []electedMeditation, setSelectedMeditation] = useState<Meditation | null>(null)  const []sPlaying, setIsPlaying] = useState(false)  const []urrentTime, setCurrentTime] = useState(0)  const []uration, setDuration] = useState(0)  const []olume, setVolume] = useState(0.7)  const []electedCategory", setSelectedCategory] = useState<string>(", all)")",  const []avorites, setFavorites] = useState<string[]>([])  const []essions, setSessions] = useState<MeditationSession[]>([])  const []howTimer, setShowTimer] = useState(false)  const []imerMinutes, setTimerMinutes] = useState(10)  const []imerSeconds, setTimerSeconds] = useState(0)  const []ackgroundSound, setBackgroundSound] = useState<string | null>(null)  const []howBreathing, setShowBreathing] = useState(false)  const []reathPhase", setBreathPhase] = useState<", inhale'  | 'hold'  | 'exhale'>('inhale)")";",  const []howStats", setShowStats] = useState(false);",  const audioRef = useRef<HTMLAudioElement | null>(null);  const backgroundAudioRef = useRef<HTMLAudioElement | null>(null);  const timerIntervalRef = useRef<NodeJS.Timeout | null>(null);  // Load saved data  useEffect(() => {},    const savedFavorites = localStorage.getItem("meditationFavorites");",    const savedSessions = localStorage.getItem("meditationSessions");",    if (savedFavorites) setFavorites(JSON.parse(savedFavorites))    if (savedSessions) setSessions(JSON.parse(savedSessions))  }", []);"  // Save favorites  useEffect(() => {},    if (favorites.length > 0) { localStorage.setItem(meditationFavorites", JSON.stringify(favorites" );"    "
}", []avorites]);"  // Save sessions  useEffect(() => {},    if (sessions.length > 0) { localStorage.setItem(meditationSessions", JSON.stringify(sessions" );"    "
}, []essions])  // Timer logic  useEffect(() => {},    if (showTimer && timerSeconds > 0)  {      timerIntervalRef.current = setInterval(() => {},        setTimerSeconds(prev  => {}          if (prev <= 1)  {            setShowTimer(false)            // Play completion sound            playCompletionSound()            return 0          },          return prev  1        })      }, 1000);    }, else {
  if (timerIntervalRef.current)  {        clearInterval(timerIntervalRef.current)
},    return () => },      if (timerIntervalRef.current)  { clearInterval(timerIntervalRef.current)       }}, []howTimer, timerSeconds]);  // Breathing exercise logic  useEffect(() => {},    if (showBreathing)  {      const breathingInterval = setInterval(() => {},        setBreathPhase(prev = > { ;   );          if (prev = == "inhale", ;",          if (prev = == "hold", ;",          return "inhale        });      }, 4000); // 4 seconds per phase      return () => clearInterval(breathingInterval    )}, []howBreathing]);  const toggleFavorite = (meditationId: string => {},    setFavorites(prev = >, prev.includes(meditationId)        ? prev.filter(id = > id !== meditationId),        : []..prev, meditationId]    )  },  const startMeditation = (meditation: Meditation => {},    setSelectedMeditation(meditation)    setIsPlaying(true)    // Create session    const session: MeditationSession="},"  id: Date.now().toString(,      meditationId: meditationid,      startTime: new Date().toISOString()      endTime: ",",  duration: 0,      completed: false    },        setSessions(prev = > []..prev, session]);  },  const stopMeditation = () => {},    setIsPlaying(false)        // Update session    if (sessions.length > 0)  {      const lastSession = sessions[]essions.length - 1],      if (!lastSession.completed)  {        const updatedSession={}          ...lastSession,          endTime: new Date().toISOString(),          duration: Math.floor((Date.now( - new Date(lastSession.startTime).getTime()) / 1000),          completed: true        },        setSessions(prev = > []..prev.slice(0, -1), updatedSession]);      },  const startTimer = () => {},    setTimerSeconds(timerMinutes * 60)    setShowTimer(true)  },  const playCompletionSound = () => {}    // Play a gentle bell sound    const audio = new Audio("sounds/bell.mp3");",    audio.volume = 0.5;    audio.play()  },  const toggleBackgroundSound = (soundId: string => {},    if (backgroundSound = == soundId) {},      setBackgroundSound(null)      if (backgroundAudioRef.current)  {"
  backgroundAudioRef.current.pause()
}, else(setBackgroundSound(soundId)      // Play background sound      const sound = BACKGROUND_SOUNDS.find(s => s.id === soundId );      if (sound && backgroundAudioRef.current)  {        backgroundAudioRef.current.src = sound.url,        backgroundAudioRef.current.play()}  // Calculate statistics  const calculateStats = () => {},    const totalSessions = sessions.length,;    const totalMinutes = React.useMemo(() => sessions.reduce((sum, s) => sum + Math.floor(s.duration / 60), 0), []essions]);    const currentStreak = calculateStreak();    const favoriteCategory = getMostUsedCategory();    return { totalSessions,      totalMinutes,      currentStreak,      favoriteCategory     },  const calculateStreak = () => {}    // Simple streak calculation (consecutive days)    const today = new Date().toDateString();    const yesterday = new Date(Date.now() - 86400000).toDateString();        const todaySessions = React.useMemo(() => sessions.filter(s => , ", []essions]);",      new Date(s.startTime).toDateString() === "today"    )",    const yesterdaySessions = React.useMemo(() => sessions.filter(s => ", ", []essions]);",      new Date(s.startTime).toDateString() === "yesterday"    )    if (todaySessions.length > 0 && yesterdaySessions.length > 0)  {      return 2, // Simplified for demo    },    if (todaySessions.length > 0)  {      return 1    },    return 0  };  const getMostUsedCategory = () => {},    const categoryCount: {  []ey: string] number }={  },    sessions.forEach(session  => {}      const meditation = MEDITATIONS.find(m => m.id === session.meditationId),;      if (meditation)  {"
  categoryCount[]editation.category] = (categoryCount[]editation.category] || 0) + 1
})    const sorted = Object.entries(categoryCount).sort((a, b) => b[]] - a[]]);    return sorted[]]?.[]] | | "mindfulness"  " };",  const filteredMeditations = selectedCategory === "all",;"    ? MEDITATIONS",", `;`    : selectedCategory = == "favorites"    ? MEDITATIONS.filter(m = > favorites.includes(m.id));    : MEDITATIONS.filter(m = > m.category === selectedCategory),  const stats = calculateStats(`;  return (;"    <div className="meditation-center">", ", `;`      { /* Header */"  );"      <div className="meditation-header">"        <div className="header-content">"          <h1 className="meditation-title">"            <Headphones className="title-icon"  />",            Meditation Center          </h1>          <p className="meditation-subtitle">Find your inner peace with guided meditations</p>"        </div>        "        <div className="header-actions">"          <button            onClick={() => setShowStats(!showStats)"}",            className="stats-btn"          >            <Target size={20}  />;            Stats          </button>          <button            onClick={() => setShowBreathing(true)"}",            className="breathing-btn"          >            <Heart size={20}  />;            Breathing          </button>          <button            onClick={() => setShowTimer(true)"}",            className="timer-btn"          >            <Clock size={20}  />;            Timer          </button>        </div>      </div>"      {/* Stats Overview */"}"      <AnimatePresence>        {showStats && (}          <motion.div;            initial={ opacity: "0, height: 0 },",            animate={ opacity: 1, height: ", auto"}",            exit={ opacity: "0, height: 0}",            className="stats-overview"          >            <div className="stats-grid">"              <div className="stat-card">"                <div className="stat-icon", sessions-icon", >"                  <Zap size={24"}  />"                </div>                <div className="stat-info">"                  <span className="stat-value">{stats.totalSessions"}</span>"                  <span className="stat-label">Total Sessions</span>"                </div>              </div>              "              <div className="stat-card">"                <div className="stat-icon", minutes-icon", >"                  <Clock size={24"}  />"                </div>                <div className="stat-info">"                  <span className="stat-value">{stats.totalMinutes"}</span>"                  <span className="stat-label">Minutes</span>"                </div>              </div>              "              <div className="stat-card">"                <div className="stat-icon", streak-icon", >"                  <Sparkles size={24"}  />"                </div>                <div className="stat-info">"                  <span className="stat-value">{stats.currentStreak"}</span>"                  <span className="stat-label">Day Streak</span>"                </div>              </div>              "              <div className="stat-card">"                <div className="stat-icon favorite-icon">"                  <Star size={24"}  />"                </div>                <div className="stat-info">"                  <span className="stat-value">{favorites.length"}</span>"                  <span className="stat-label">Favorites</span>"                </div>              </div>            </div>          </motion.div>        )}      </AnimatePresence>"      {/* Category Filter */"};"      <div className="category-filter">"        <button          onClick={() => setSelectedCategory("all")}";",          className={filter-btn $selectedCategory === ``ll ? 'active :'}","        >          All        </button>        <button          onClick={() => setSelectedCategory(``avorites)"}",          className={filter-btn $selectedCategory === ``avorites ? 'active :'}'        >          <Star size={16}  />",",          Favorites        </button>        <button          onClick={() => setSelectedCategory(``uided)"}",          className={filter-btn $selectedCategory === ``uided ? 'active :'}","        >          Guided        </button>        <button          onClick={() => setSelectedCategory(``reathing)"}",          className={filter-btn $selectedCategory === ``reathing ? 'active :'}","        >          Breathing        </button>        <button          onClick={() => setSelectedCategory(``ature)"}",          className={filter-btn $selectedCategory === ``ature ? 'active :'}","        >          Nature        </button>        <button          onClick={() => setSelectedCategory(``ody-scan)"}",          className={filter-btn $selectedCategory === ``ody-scan ? 'active :'}","        >          Body Scan        </button>        <button          onClick={() => setSelectedCategory(``indfulness)"}",          className={filter-btn $selectedCategory === ``indfulness ? 'active :'}","        >          Mindfulness        </button>      </div>";"      {/* Meditation Grid */"};"      <div className="meditation-grid">"        {filteredMeditations.map(meditation  => (          <motion.div            key={meditation.id}            whileHover={ scale: 102}            whileTap={ scale: 098}            className="meditation-card"          >            <div className="card-thumbnail">";"              <span className="thumbnail-emoji">{meditation.thumbnail}</span>"              <button                onClick={() => toggleFavorite(meditation.id)"}",                className={favorite-btn $favorites.includes(meditation.id) ? ``ctive :}";"              >";"                <Star size={20"}, fill={favorites.includes(meditation.id) ? ``urrentColor" : ", none"}  />"              </button>            </div>            ";"            <div className="card-content">"              <h3 className="card-title">{meditation.title"}</h3>"              <p className="card-description">{meditation.description"}</p>",              "              <div className="card-meta">"                <span className="duration">"                  <Clock size={14}  />                  {meditation.duration}, min                </span>                <span className={difficulty $meditation.difficulty"}>                  {meditation.difficulty"}"                </span>              </div>              "              <div className="card-tags">";"                { meditation.tags.slice(0`, `).map(tag = > (" }"                  <span key={tag"}, className="tag">{tag}</span>"                ))"}"              </div>              ";"              <div className="card-benefits">"                <span className="benefits-label">Benefits: </span>                <ul className="benefits-list">"                  {meditation.benefits.map(benefit  => (                    <li key={benefit}>{benefit}</li>                  ))}                </ul>              </div>                            <button                onClick={() => startMeditation(meditation)"}",                className="play-btn"              >                <Play size={16}  />;                Start Meditation              </button>            </div>          </motion.div>        ))}      </div>"      {/* Background Sounds */"};"      <div className="background-sounds">"        <h2 className="sounds-title">Background Sounds</h2>"        <div className="sounds-grid">"          {BACKGROUND_SOUNDS.map(sound  => (            <button",              key={sound.id}";",              onClick={() => toggleBackgroundSound(sound.id)"}",              className={sound-btn $backgroundSound === sound.id ? ``ctive :}";"            >              <span className="sound-icon">{sound.icon"}</span>"              <span className="sound-name">{sound.name}</span>"            </button>          ))}        </div>      </div>      {/* Player Modal */}      <AnimatePresence>        {selectedMeditation && isPlaying && (}          <motion.div            initial={ opacity: 0}, animate={ opacity: 1}            exit={ opacity: 0}";",            className="player-modal-overlay"          >            <motion.div              initial={ scale: 0.9, `: 20}";",              animate={ scale: 1, y: 0}              exit={ scale: 0.9, y: 20}",              className="player-modal"            >              <div className="player-header">"                <button                  onClick={stopMeditation"}",                  className="close-player"                >                  <ChevronLeft size={24"}  />"                </button>                <h2>Now Playing</h2>              </div>              "              <div className="player-content">"                <div className="player-thumbnail">"                  <span className="player-emoji">{selectedMeditation.thumbnail"}</span>"                </div>                "                <h3 className="player-title">{selectedMeditation.title"}</h3>"                <p className="player-description">{selectedMeditation.description"}</p>",                "                <div className="player-progress">"                  <div className="progress-bar">"                    <div ",                      className="progress-fill",                      style={style1}"};"                     />                  </div>                  <div className="progress-time">"                    <span>{formatTime(currentTime)}</span>                    <span>{formatTime(duration)"}</span>"                  </div>                </div>                "                <div className="player-controls">"                  <button className="control-btn">"                    <SkipForward size={24"}, style={"," transform: "rotate(180deg)}  />"                  </button>                  <button                    onClick={() => setIsPlaying(!isPlaying)"}",                    className="play-pause-btn"                  >                    {isPlaying ? <Pause size={32}  /> : <Play size={32}  />"};"                  </button>                  <button className="control-btn">"                    <SkipForward size={24"}  />"                  </button>                </div>                "                <div className="volume-control">"                  <Volume2 size={20"}  />"                  <input                    type = "range",                    min = "0",                    max = "1",                    step = "0.1",                    value={volume}                    onChange={(e) =  /> setVolume(parseFloat(e.target.value))"}",                    className="volume-slider"                  />                </div>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      {/* Timer Modal */}      <AnimatePresence>        {showTimer && (}          <motion.div            initial={ opacity: 0}, animate={ opacity: 1}            exit={ opacity: 0}            className="timer-modal-overlay",            onClick={() => setShowTimer(false)}          >            <motion.div              initial={ scale: 09}              animate={ scale: 1}              exit={ scale: 09}              className="timer-modal",              onClick={e => e.stopPropagation()"}"            >              <h2>Meditation Timer</h2>              "              <div className="timer-display">"                <span className="timer-time">";"                  {Math.floor(timerSeconds / 60).toString().padStart(2``, ", 0")}:", ``                  {(timerSeconds % 60).toString().padStart(2, '0')'}'                </span>              </div>              ","              <div className="timer-presets">";"                <button onClick={() => setTimerMinutes(5)"}, className="preset-btn">5 min</button>"                <button onClick={() => setTimerMinutes(10)"}, className="preset-btn">10 min</button>"                <button onClick={() => setTimerMinutes(15)"}, className="preset-btn">15 min</button>"                <button onClick={() => setTimerMinutes(20)"}, className="preset-btn">20 min</button>"              </div>              "              <div className="timer-controls">"                <input                  type = "number",                  min = "1",                  max = "60",                  value={timerMinutes}                  onChange={(e) =  /> setTimerMinutes(parseInt(e.target.value))"}",                  className="timer-input"                />                <span>minutes</span>              </div>              "              <div className="timer-actions">"                <button onClick={startTimer"}, className="start-timer-btn">",                  Start Timer                </button>                <button onClick={() => setShowTimer(false)"}, className="cancel-btn">",                  Cancel                </button>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      {/* Breathing Exercise Modal */}      <AnimatePresence>        {showBreathing && (}          <motion.div            initial={ opacity: 0}, animate={ opacity: 1}            exit={ opacity: 0}            className="breathing-modal-overlay",            onClick={() => setShowBreathing(false)}          >            <motion.div              initial={ scale: 09}              animate={ scale: 1}              exit={ scale: 09}              className="breathing-modal",              onClick={e => e.stopPropagation()"}"            >              <h2>Breathing Exercise</h2>              "              <div className="breathing-circle-container">"                <motion.div;                  className="breathing-circle",                  animate={"
  ",  scale: breathPhase = == "inhale", ;",                    backgroundColor: breathPhase = == "inhale""
},                  transition={ duration: 4}                >                  <span className="breath-text">"                    { breathPhase = == "inhale"};"                  </span>                </motion.div>              </div>              "              <div className="breathing-instructions">"                <p>Follow the circle and text guidance</p>                <ul>                  <li>Inhale for 4 seconds</li>                  <li>Hold for 4 seconds</li>                  <li>Exhale for 4 seconds</li>                </ul>              </div>                            <button                onClick={() => setShowBreathing(false)"}", `;`                className="close-breathing-btn"              >                Close              </button>            </motion.div>          </motion.div>        )}      </AnimatePresence>      {/* Hidden Audio Elements */}      <audio ref={audioRef}  />;      <audio ref={backgroundAudioRef}, loop  />;      <style jsx>{}        .meditation-center {},  padding: 24px          max-width: 1400px,  margin: 0 auto        }        .meditation-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 32px          flex-wrap: wrap,  gap: 20px        }        .header-content {},  flex: 1        }        .meditation-title {},  display: flex          align-items: center,  gap: 12px          font-size: 32px          font-weight: 700,  color: #1a1a1a,  margin: 0        }        .title-icon {},  color: #8b5cf6}        .meditation-subtitle {},  color: #666,          margin-top: 8px          font-size: 16px        }        .header-actions {},  display: flex,  gap: 12px        }        .stats-btn,        .breathing-btn,        .timer-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 10px 20px,  background: white,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 15px          font-weight: 600,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .stats-btn:hover,        .breathing-btn:hover,        .timer-btn:hover {},          border-color: #8b5cf6,  color: #8b5cf6,  transform: translateY(-2px        }        .stats-overview {},          margin-bottom: 32px        }        .stats-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 20px        }        .stat-card {},  background: white          border-radius: 16px,  padding: 20px,  display: flex          align-items: center,  gap: 16px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .stat-icon {},  width: 48px,  height: 48px,          border-radius: 12px,  display: flex          align-items: center          justify-content: center,  color: white}        .sessions-icon {},  background: linear-gradient135deg, #fbbf24 0%, #f59e0b 100%)        }        .minutes-icon {},  background: linear-gradient135deg, #60a5fa 0%, #3b82f6 100%)        }        .streak-icon {},  background: linear-gradient135deg, #a78bfa 0%, #8b5cf6 100%)        }        .favorite-icon {},  background: linear-gradient135deg, #f472b6 0%, #ec4899 100%)        }        .stat-info {},  display: flex          flex-direction: column        }        .stat-value {},          font-size: 28px          font-weight: 700,  color: #1a1a1a}        .stat-label {},          font-size: 14px,  color: #999}        .category-filter {},  display: flex,  gap: 12px          margin-bottom: 32px          overflow-x: auto          padding-bottom: 4px        }        .filter-btn {},  padding: 10px 20px,  background: white,  border: 2px solid #e0e0e0          border-radius: 20px          font-size: 14px          font-weight: 600,  color: #666,  cursor: pointer,  transition: all 0.2s          white-space: nowrap,  display: flex          align-items: center,  gap: 6px        }        .filter-btn:hover {},          border-color: #8b5cf6,  color: #8b5cf6}        .filter-btn.active {},  background: #8b5cf6,  color: white,          border-color: #8b5cf6        }        .meditation-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(320px, 1fr)),  gap: 24px          margin-bottom: 48px        }        .meditation-card {},  background: white          border-radius: 20px,  overflow: hidden          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05),  transition: all 0.3s        }        .meditation-card:hover {},          box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1)        }        .card-thumbnail {},  height: 160px,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  display: flex          align-items: center          justify-content: center,  position: relative}        .thumbnail-emoji {},          font-size: 64px        }        .favorite-btn {},  position: absolute,  top: 12px,  right: 12px,  width: 36px,  height: 36px,          border-radius: 50,  background: rgba255, 255, 255, 0.9),  border: none,  display: flex          align-items: center          justify-content: center,  cursor: pointer,  transition: all 0.2s,  color: #666}        .favorite-btn:hover {},  transform: scale(1.1        }        .favorite-btn.active {},  color: #f59e0b}        .card-content {},  padding: 20px        }        .card-title {},          font-size: 20px          font-weight: 600,  color: #1a1a1a,  margin: 0 0 8px 0        }        .card-description {},  color: #666,          font-size: 14px          line-height: 15          margin-bottom: 16px        }        .card-meta {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 12px        }        .duration {},  display: flex          align-items: center,  gap: 4px,  color: #999,          font-size: 14px        }        .difficulty {},  padding: 4px 12px          border-radius: 12px          font-size: 12px          font-weight: 600          text-transform: uppercase        }        .difficulty.beginner {},  background: #dcfce7,  color: #16a34a}        .difficulty.intermediate {},  background: #fef3c7,  color: #d97706}        .difficulty.advanced {},  background: #fee2e2,  color: #dc2626}        .card-tags {},  display: flex,  gap: 8px          margin-bottom: 16px          flex-wrap: wrap        }        .tag {},  padding: 4px 10px,  background: #f3f4f6          border-radius: 12px          font-size: 12px,  color: #666}        .card-benefits {},          margin-bottom: 20px        }        .benefits-label {},          font-size: 12px          font-weight: 600,  color: #999,          text-transform: uppercase        }        .benefits-list {},  margin: 8px 0          padding-left: 20px        }        .benefits-list li {},          font-size: 13px,  color: #666,  margin: 4px 0        }        .play-btn {},  width: 100,  padding: 12px,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  color: white,  border: none          border-radius: 12px          font-size: 15px          font-weight: 600,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  gap: 8px,  transition: transform 0.2s        }        .play-btn:hover {},  transform: translateY(-2px        }        .background-sounds {},  background: white          border-radius: 20px,  padding: 24px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .sounds-title {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .sounds-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(120px, 1fr)),  gap: 12px        }        .sound-btn {},  padding: 16px,  background: #f3f4f6,  border: 2px solid transparent          border-radius: 16px,  cursor: pointer,  transition: all 0.2s,  display: flex          flex-direction: column          align-items: center,  gap: 8px        }        .sound-btn:hover {},  background: white          border-color: #8b5cf6        }        .sound-btn.active {},  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  color: white}        .sound-icon {},          font-size: 32px        }        .sound-name {},          font-size: 14px          font-weight: 500        }        /* Player Modal */        .player-modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.8),  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 20px        }        .player-modal {},  background: white          border-radius: 24px          max-width: 500px,  width: 100,          max-height: 90vh          overflow-y: auto        }        .player-header {},  display: flex          align-items: center,  padding: 20px          border-bottom: 1px solid #e0e0e0        }        .close-player {},  background: none,  border: none,  color: #666,  cursor: pointer,  padding: 4px          margin-right: 12px        }        .player-content {},  padding: 32px          text-align: center        }        .player-thumbnail {},  width: 120px,  height: 120px,  margin: 0 auto 24px,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%)          border-radius: 50,  display: flex          align-items: center          justify-content: center        }        .player-emoji {},          font-size: 64px        }        .player-title {},          font-size: 24px          font-weight: 600,  color: #1a1a1a,  margin: 0 0 8px 0        }        .player-description {},  color: #666,          margin-bottom: 32px        }        .player-progress {},          margin-bottom: 32px        }        .progress-bar {},  height: 6px,  background: #e0e0e0          border-radius: 3px,  overflow: hidden        }        .progress-fill {},  height: 100,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  transition: width 0.3s        }        .progress-time {},  display: flex          justify-content: spacebetween          margin-top: 8px          font-size: 12px,  color: #999}        .player-controls {},  display: flex          align-items: center          justify-content: center,  gap: 24px          margin-bottom: 32px        }        .control-btn {},  background: none,  border: none,  color: #666,  cursor: pointer,  transition: color 0.2s        }        .control-btn:hover {},  color: #8b5cf6}        .play-pause-btn {},  width: 64px,  height: 64px,          border-radius: 50,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  border: none,  color: white,  display: flex          align-items: center          justify-content: center,  cursor: pointer,  transition: transform 0.2s        }        .play-pause-btn:hover {},  transform: scale(1.1        }        .volume-control {},  display: flex          align-items: center,  gap: 12px          justify-content: center        }        .volume-slider {},  width: 120px,          -webkit-appearance: none,  height: 6px,          border-radius: 3px,  background: #e0e0e0,  outline: none        }        .volume-slider: :-webkit-sliderthumb {}          -webkit-appearance: none,  appearance: none,  width: 18px,  height: 18px,          border-radius: 50,  background: #8b5cf6,  cursor: pointer        }        /* Timer Modal */        .timer-modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 20px        }        .timer-modal {},  background: white          border-radius: 20px,  padding: 32px          max-width: 400px,  width: 100,          text-align: center        }        .timer-modal h2 {},  margin: 0 0 24px 0          font-size: 24px,  color: #1a1a1a}        .timer-display {},  margin: 32px 0        }        .timer-time {},          font-size: 64px          font-weight: 700,  color: #8b5cf6,          font-variant-numeric: tabularnums        }        .timer-presets {},  display: flex,  gap: 12px          justify-content: center          margin-bottom: 24px        }        .preset-btn {},  padding: 8px 16px,  background: #f3f4f6,  border: none          border-radius: 8px          font-size: 14px,  cursor: pointer,  transition: all 0.2s        }        .preset-btn:hover {},  background: #8b5cf6,  color: white}        .timer-controls {},  display: flex          align-items: center          justify-content: center,  gap: 12px          margin-bottom: 24px        }        .timer-input {},  width: 80px,  padding: 8px,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 18px          text-align: center        }        .timer-actions {},  display: flex,  gap: 12px          justify-content: center        }        .start-timer-btn {},  padding: 12px 24px,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  color: white,  border: none          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer        }        .cancel-btn {},  padding: 12px 24px,  background: white,  color: #666,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer        }        /* Breathing Modal */        .breathing-modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.9),  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 20px        }        .breathing-modal {},  background: white          border-radius: 20px,  padding: 32px          max-width: 500px,  width: 100,          text-align: center        }        .breathing-modal h2 {},  margin: 0 0 32px 0          font-size: 24px,  color: #1a1a1a}        .breathing-circle-container {},  margin: 48px 0        }        .breathing-circle {},  width: 200px,  height: 200px,          border-radius: 50,  margin: 0 auto,  display: flex          align-items: center          justify-content: center,  transition: all 4s ease-in-out        }        .breath-text {},  color: white,          font-size: 24px          font-weight: 600        }        .breathing-instructions {},          margin-bottom: 32px        }        .breathing-instructions p {},  color: #666,          margin-bottom: 16px        }        .breathing-instructions ul {},          list-style: none,  padding: 0        }        .breathing-instructions li {},  color: #666,  margin: 8px 0,  padding: 8px,  background: #f3f4f6          border-radius: 8px        }        .close-breathing-btn {},  padding: 12px 32px,  background: white,  color: #666,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer        }        /* Mobile Responsive */        @media (max-width: 768px {}          .meditation-center {},  padding: 16px          }          .meditation-header {},            flex-direction: column            align-items: flexstart          }          .meditation-title {},            font-size: 24px          }          .header-actions {},  width: 100,            justify-content: spacebetween          }          .stats-grid {},            grid-template-columns: repeat2, 1fr)          }          .category-filter {},            overflow-x: auto            -webkit-overflow-scrolling: touch          }          .meditation-grid {},            grid-template-columns: 1fr          }          .sounds-grid {},            grid-template-columns: repeat3, 1fr)          }          .timer-time {},            font-size: 48px          }          .breathing-circle {},  width: 150px,  height: 150px}          .breath-text {},            font-size: 20px          }</style>    </div>  )}// Helper functionfunction formatTime(seconds: number)string {},  const mins = Math.floor(seconds / 60`;  const secs = seconds % 60;  return $mins}:${secs.toString().padStart(2, ``")}``},export default MeditationCenter",""