import React, { useState, useEffect, useCallback }, from "react",import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell }, from "recharts",import { Calendar, TrendingUp, Heart, AlertCircle, Download, Share2, ChevronDown, Plus, X, Clock, Brain, Sparkles }, from "lucide-react",import { format, subDays, startOfWeek, endOfWeek, eachDayOfInterval, parseISO }, from "date-fns",import { motion, AnimatePresence }, from "framer-motion"// Extracted inline styles for performanceconst style1={  borderColor: selectedEmotions.includes(key ? emotion.color : ``ransparent`,                          backgroundColor: selectedEmotions.includes(key ? ``emotion.color}interface MoodEntry {  id: string,  date: string,  time: string,  moodScore: number,  emotions: string[,]  triggers: string[,]  notes: string,  activities: string[]  sleepHours ? : number  energyLevel?: number  anxietyLevel?: number  stressLevel?: number}interface MoodPattern {}  pattern: string,  frequency: number,  triggers: string[,]  recommendation: string},const EMOTION_WHEEL={},  happy: { color: "FFD700, label: ", Happy", icon: ", 😊" },", `;`  sad: { color: "4169E1, label: ", Sad", icon: ", 😢" }",  anxious: { color: "FF6B6B, label: ", Anxious", icon: ", 😰" }",  angry: { color: "DC143C, label: ", Angry", icon: ", 😠" }",  peaceful: { color: "90EE90, label: ", Peaceful", icon: ", 😌" }",  excited: { color: "FF69B4, label: ", Excited", icon: ", 🤗" }",  tired: { color: "778899, label: ", Tired", icon: ", 😴" }",  grateful: { color: "FFB6C1, label: ", Grateful", icon: ", 🙏" },",  overwhelmed: { color: "8B4513, label: ", Overwhelmed", icon: ", 😵" },",  confident: { color: "9370DB, label: ", Confident", icon: ", 💪" );"},const COMMON_TRIGGERS = []ork stress", ", Relationship", ", Sleep", ", Social media", ", Exercise"];",  "Weather", ", Caffeine", ", Alcohol", ", Medication", ", Family",",  "Finances", ", Health", ", News", ", Conflict", ", Deadlines"]",const ACTIVITIES = []xercise", ", Meditation", ", Reading", ", Music", ", Nature walk"];",  "Socializing", ", Creative work", ", Gaming", ", Cooking", ", TV/Movies",",  "Journaling", ", Therapy", ", Yoga", ", Dancing", ", Volunteering"]",export const MoodTracking: ReactFC = () => {},  const []oodEntries, setMoodEntries] = useState<MoodEntry[]>([])  const []howAddMood, setShowAddMood] = useState(false)  const []urrentMood, setCurrentMood] = useState(5)  const []electedEmotions, setSelectedEmotions] = useState<string[]>([])  const []electedTriggers, setSelectedTriggers] = useState<string[]>([])  const []electedActivities, setSelectedActivities] = useState<string[]>([])  const []oodNotes", setMoodNotes] = useState(")"),",  const []nergyLevel, setEnergyLevel] = useState(5)  const []nxietyLevel, setAnxietyLevel] = useState(5)  const []tressLevel, setStressLevel] = useState(5)  const []leepHours, setSleepHours] = useState(7)  const []iewMode", setViewMode] = useState<", week"  | ", month'  | 'year'>('week)")",  const []howPatterns, setShowPatterns] = useState(false);  const []howExport", setShowExport] = useState(false);"  // Load mood entries from localStorage  useEffect(() => {},    const savedEntries = localStorage.getItem("moodEntries");",    if (savedEntries)  {
  setMoodEntries(JSON.parse(savedEntries))    
}", []);"  // Save mood entries to localStorage  useEffect(() => {},    if (moodEntries.length > 0) { localStorage.setItem(moodEntries", JSON.stringify(moodEntries");"    
}, []oodEntries])  const saveMoodEntry = useCallback(() => {},    const newEntry: MoodEntry=}",",  id: Date.now().toString(),", `;`      date: new Date().toISOString().split('T')]]",",      time: new Date().toTimeString().split(")[]],",",      moodScore: currentMood,      emotions: selectedEmotions,      triggers: selectedTriggers,      activities: selectedActivities,      notes: moodNotes,      sleepHours,      energyLevel,      anxietyLevel,      stressLevel    },    setMoodEntries(prev = > []ewEntry", ...prev]);"    // Reset form    setShowAddMood(false)    setCurrentMood(5)    setSelectedEmotions([])    setSelectedTriggers([])    setSelectedActivities([])    setMoodNotes()");",    setEnergyLevel(5)    setAnxietyLevel(5)    setStressLevel(5)    setSleepHours(7)    // Show success notification;    showNotification(Mood entry saved successfully!");"  }, []urrentMood, selectedEmotions, selectedTriggers, selectedActivities, moodNotes, sleepHours, energyLevel, anxietyLevel, stressLevel])  const showNotification = (message: string => {}    // Implementation would use a toast notification system  },  const toggleEmotion = (emotion: string => {},    setSelectedEmotions(prev = >, prev.includes(emotion)        ? prev.filter(e = > e !== emotion),        : []..prev, emotion]    )  },  const toggleTrigger = (trigger: string => {},    setSelectedTriggers(prev = >, prev.includes(trigger)        ? prev.filter(t = > t !== trigger),        : []..prev, trigger]    )  },  const toggleActivity = (activity: string => {},    setSelectedActivities(prev = >, prev.includes(activity)        ? prev.filter(a = > a !== activity),        : []..prev, activity]    )  }  // Calculate mood patterns  const calculatePatterns = (): MoodPattern[] = > {},    const patterns: MoodPattern[ ] []        // Analyze trigger patterns;    const triggerFrequency: {  []ey: string] number }={  },    moodEntries.forEach(entry  => {}      entry.triggers.forEach(trigger = > {},        triggerFrequency[]rigger] = (triggerFrequency[]rigger] || 0) + 1      })    })    // Find most common triggers for low mood    const lowMoodEntries = React.useMemo(() => moodEntries.filter(e => e.moodScore <= 4),;    const lowMoodTriggers: {  []ey: string] number }={  },    lowMoodEntries.forEach(entry  => {}      entry.triggers.forEach(trigger = > { []oodEntries]) },        lowMoodTriggers[]rigger] = (lowMoodTriggers[]rigger] || 0) + 1      })    })    Object.entries(lowMoodTriggers).forEach(([]rigger, count]) => {},      if (count >= 3)  {        patterns.push({  pattern: `ow mood often associated with ${trigger}, frequency: count,`          triggers: []rigger],          recommendation: `onsider strategies to manage ${trigger}", or reduce exposure when possible.", ``        })      },    "}),"    // Analyze time patterns    const morningMoods = React.useMemo(() => moodEntries.filter(e  => {}      const hour = parseInt(e.time.split(`` )[]]), []oodEntries]);      return hour >= 6 && hour < 12"    "}),;",    const eveningMoods = React.useMemo(() => moodEntries.filter(e  => {}      const hour = parseInt(e.time.split(': ')]]), []oodEntries]);",      return hour >= 18 && hour  24    });    if (morningMoods.length > 5 && eveningMoods.length > 5)  { const avgMorning = React.useMemo(() => morningMoods.reduce((sum, e) => sum + e.moodScore, 0) / morningMoods.length, []orningMoods]);",      const avgEvening = React.useMemo(() => eveningMoods.reduce((sum, e) => sum + e.moodScore", 0) / eveningMoods.length, []veningMoods] };",      if (avgMorning > avgEvening + 2)  {        patterns.push({  pattern: "Better, mood in mornings",", `;`  frequency: morningMoods.length,          triggers: [],",",          recommendation: "You, r", mood tends to be better in the morning. Consider scheduling important tasks earlier in the day.", `;`        })      "}, else if (avgEvening > avgMorning + 2) {,        patterns.push({",  pattern: "Better mood in evenings",",  frequency: eveningMoodslength,          triggers: [],",          recommendation: "You tend to feel better in the evening. Plan relaxing morning routines to improve early mood."        })      }    }    // Sleep correlation    const goodSleepEntries = React.useMemo(() => moodEntries.filter(e => e.sleepHours && e.sleepHours >= 7), []oodEntries]);    const poorSleepEntries = React.useMemo(() => moodEntries.filter(e => e.sleepHours && e.sleepHours < 6),;    if (goodSleepEntries.length > 3 && poorSleepEntries.length > 3)  { const avgGoodSleep = useMemo(() => goodSleepEntries.reduce((sum, e) => sum + e.moodScore, 0) / goodSleepEntries.length,", []oodEntries]), []oodSleepEntries]);",      const avgPoorSleep = React.useMemo(() => poorSleepEntries.reduce((sum, e) => sum + e.moodScore", 0) / poorSleepEntries.length, []oorSleepEntries] };",      if (avgGoodSleep > avgPoorSleep + 1.5)  {        patterns.push({  pattern: "Sleep, significantly affects mood",",  frequency: goodSleepEntrieslength + poorSleepEntries.length,          triggers: []leep],",          recommendation: "Prioritize, getting 7-9 hours of sleep. Your mood is notably better with adequate rest."        })      }    },    return patterns  }  // Prepare chart data;  const getChartData = () => {},    const today = new Date(),    let days: Date[ ] [];    if (viewMode = == week", ",;",      days = eachDayOfInterval({},  start: startOfWeek(today,        end: endOfWeek(today      })    "}, else if (viewMode = == ", month",      days = eachDayOfInterval({},  start: subDaystoday, 30),        end: today      })    }, else {      days = eachDayOfInterval({  start: subDaystoday, 365),        end: today      })    },    return days.map(day  => }      const dateStr = format(day, 'yyyy-MM-dd)';',      const dayEntries = React.useMemo(() => moodEntries.filter(e => e.date === dateStr), []oodEntries]);      const avgMood = dayEntries.length > 0;        ? dayEntries.reduce((sum, e) => sum + e.moodScore, 0) / dayEntries.length        : null      return {
  ","  date: format(day, viewMode = == ", year", ", `;`        mood: avgMood,        energy: dayEntrieslength > 0          ? dayEntries.reduce((sum, e) => sum + (e.energyLevel || 0), 0) / dayEntries.length          : null, anxiety: dayEntrieslength > 0          ? dayEntries.reduce((sum, e) => sum + (e.anxietyLevel || 0), 0) / dayEntries.length          : null, entries: dayEntrieslength      
})  }  // Emotion distribution data  const getEmotionDistribution = () => {},    const emotionCounts: {  []ey: string] number }={  },    moodEntries.forEach(entry  => {}      entry.emotions.forEach(emotion = > {},        emotionCounts[]motion] = (emotionCounts[]motion] || 0) + 1      })    })    return Object.entries(emotionCounts).map(([]motion, count]) => (},  name: EMOTION_WHEELemotion as keyof typeof EMOTION_WHEEL]?.label || emotion,      value: count,",      fill: EMOTION_WHEELemotion as keyof typeof EMOTION_WHEEL]?.color | | "8884d8"    })},  const exportData = (format: "json  | 'csv') => {}',    if (format = == "json",      const dataStr = JSON.stringify(moodEntries, null, 2);      const blob = new Blob([]ataStr]", { type: ", application/json"});",      const url = URL.createObjectURL(blob`;      const a = document.createElement("a"),",      a.href="url",      a.download = ``ood-data-${new Date().toISOString().split(T)[]]}".json");",      a.click()    }, else(// CSV export,      const headers = []ate", ", Time", ", Mood Score", ", Emotions", ", Triggers", ", Activities", ", Notes", ", Sleep Hours", ", Energy", ", Anxiety, "Stress];",      const rows = React.useMemo(() => moodEntries.map(e => [ ]        e.date,        e.time,        e.moodScore`,        e.emotions.join(,),        e.triggers.join(, ),;        e.activities.join(, ),;        e.notes",", []oodEntries] );",        e.sleepHours | | ",", `;`        e.energyLevel || ;",",        e.anxietyLevel | | ",",        e.stressLevel ||       ])      const csvContent = []eaders, ...rows].map(row => row.join(",")).join("n"),;",      const blob = new Blob([]svContent]", { type: ", text/csv"});",      const url = URL.createObjectURL(blob`;      const a = document.createElement("a"),",      a.href="url",      a.download = ``ood-data-${new Date().toISOString().split(``)[]]}".csv;",      a.click()    },        setShowExport(false)    showNotification(``ata exported successfully!")", ``  },  const shareWithTherapist = () => {}    // Generate shareable report    const report={},  period: ``{subDaysnew Date(), 30).toISOString().split(``)[]]}", to ${new Date().toISOString().split(T)[]]}",      entries: moodEntries.slice0, 30),      patterns: calculatePatterns(,      averageMood: moodEntries.slice0, 30).reduce((sum, e) => sum + e.moodScore, 0) / Math.min(30, moodEntries.length)`,      mostCommonEmotions: getEmotionDistribution().slice0, 5)    }    // In production, this would send to therapist via secure channel;", ``    showNotification("Report shared with your therapist");"  },  return(;    <div className="mood-tracking">", ", `;`      {/* Header */");"      <div className="mood-header">"        <div className="mood-title-section">"          <h1 className="mood-title">"            <Heart className="mood-icon" />",            Mood Tracking          </h1>          <p className="mood-subtitle">Track your emotional journey and discover patterns</p>"        </div>        "        <div className="mood-actions">"          <button            onClick={() => setShowAddMood(true)"}",            className="btn-primary", mood-add-btn"          >            <Plus size={20"} />",            Log Mood          </button>          "          <div className="mood-view-selector">"            <button              onClick={() => setViewMode("week")}";",              className={view-btn $viewMode === ``eek ? 'active :'}","            >              Week            </button>            <button              onClick={() => setViewMode(``onth)"}",              className={view-btn $viewMode === ``onth ? 'active :'}","            >              Month            </button>            <button              onClick={() => setViewMode(``ear)"}",              className={view-btn $viewMode === ``ear ? 'active :'}","            >              Year            </button>          </div>        </div>      </div>";"      {/* Quick Stats */"};"      <div className="mood-stats-grid">"        <div className="mood-stat-card">"          <div className="stat-icon-wrapper", mood-gradient", >"            <TrendingUp size={24"} />"          </div>          <div className="stat-content">"            <span className="stat-label">Current Streak</span>"            <span className="stat-value">{moodEntries.length"}, days</span>"          </div>        </div>        "        <div className="mood-stat-card">"          <div className="stat-icon-wrapper", energy-gradient", >"            <Sparkles size={24"} />"          </div>          <div className="stat-content">"            <span className="stat-label">Average Mood</span>"            <span className="stat-value">"              {moodEntries.length > 0"}"                ? (moodEntries.reduce((sum, e) => sum + e.moodScore", 0) / moodEntries.length).toFixed(1);"                : "0"}/10"            </span>          </div>        </div>        "        <div className="mood-stat-card">"          <div className="stat-icon-wrapper", calm-gradient", >"            <Brain size={24"} />"          </div>          <div className="stat-content">"            <span className="stat-label">Top Emotion</span>"            <span className="stat-value">"              {getEmotionDistribution()[]]?.name | | "None"}"            </span>          </div>        </div>        "        <div className="mood-stat-card">"          <div className="stat-icon-wrapper alert-gradient">"            <Clock size={24"} />"          </div>          <div className="stat-content">"            <span className="stat-label">Best Time</span>"            <span className="stat-value">Morning</span>"          </div>        </div>      </div>"      {/* Mood Chart */"};"      <div className="mood-chart-container">"        <h2 className="chart-title">Mood Trends</h2>"        <ResponsiveContainer width = "100%", height={300}>"          <LineChart data={getChartData()"}>"            <CartesianGrid strokeDasharray="3", 3", stroke=", #e0e0e0" />", `;`            <XAxis dataKey = "date", stroke=", #666" />","            <YAxis domain={[]`, `0]"}, stroke=", #666" />"            <Tooltip",              contentStyle={
  ",",  backgroundColor: "rgba(255, 255, 255, 0.95)",", `;`                border: "1px, solid #e0e0e0",",                borderRadius: "8px
}"            />            <Legend />            <Line              type = "monotone",              dataKey = "mood",              stroke = "8b5cf6",              strokeWidth={2"}",              dot={", fill: "8b5cf6, r: 4}",              activeDot={ r: 6}              name = "Mood"            />            <Line              type = "monotone",              dataKey = "energy",              stroke = "10b981",              strokeWidth={2"}",              dot={", fill: "10b981, r: 4}",              name = "Energy"            />            <Line              type = "monotone",              dataKey = "anxiety",              stroke = "ef4444",              strokeWidth={2"}",              dot={", fill: "ef4444, r: 4}",              name = "Anxiety"            />          </LineChart>        </ResponsiveContainer>      </div>"      {/* Emotion Distribution */"};"      <div className="mood-emotions-section">"        <h2 className="section-title">Emotion Distribution</h2>"        <div className="emotion-chart-wrapper">"          <ResponsiveContainer width = "100%", height={250}>"            <PieChart>              <Pie                data={getEmotionDistribution()"}",                cx = "50%",                cy = "50%",                labelLine={false}";",                label={
  {( name", percent") => ``name
}${(percent * 100).toFixed(0)}%}",",                outerRadius={80"}", `;`                fill = "8884d8",                dataKey = "value"              >                {getEmotionDistribution().map((entry", index) => ("}"                  <Cell key={cell-$index}, fill={entry.fill} />, ))}              </Pie>              <Tooltip />            </PieChart>          </ResponsiveContainer>        </div>      </div>"      {/* Patterns & Insights */"};"      <div className="mood-patterns-section">"        <div className="patterns-header">"          <h2 className="section-title">Patterns & Insights</h2>"          <button            onClick={() => setShowPatterns(!showPatterns)"}",            className="btn-secondary"          >            {showPatterns ? 'Hide' : 'Show"}, Analysis"          </button>        </div>                <AnimatePresence>          {showPatterns && (}            <motion.div;              initial={ opacity: "0, `, `eight: 0 },",              animate={ opacity: 1, height: ", auto" }`;`              exit={ opacity: "0, height: 0}",              className="patterns-content"            >              {calculatePatterns().map((pattern", index) => ("}"                <div key={index"}, className="pattern-card">"                  <div className="pattern-header">"                    <AlertCircle className="pattern-icon" />"                    <h3 className="pattern-title">{pattern.pattern"}</h3>"                  </div>                  <p className="pattern-recommendation">{pattern.recommendation"}</p>"                  {pattern.triggers.length > 0 && ("}"                    <div className="pattern-triggers">"                      { pattern.triggers.map(trigger = > ("  );"                        <span key={trigger"}, className="trigger-tag">{trigger}</span>"                      ))}                    </div>                  )}                </div>              ))}            </motion.div>          )}        </AnimatePresence>      </div>"      {/* Recent Entries */"};"      <div className="mood-entries-section">"        <h2 className="section-title">Recent Entries</h2>"        <div className="entries-list">"          { moodEntries.slice(0, 5).map(entry = > ("  );"            <div key={entry.id"}, className="mood-entry-card">"              <div className="entry-header">"                <div className="entry-date">"                  <Calendar size={16} />                  {format(parseISO(entry.date)", ", MMM dd, yyyy)"}"                </div>                <div className="entry-score">"                  <span className="score-value">{entry.moodScore"}</span>"                  <span className="score-label">/10</span>"                </div>              </div>              "              <div className="entry-emotions">"                { entry.emotions.map(emotion = > ("  );"                  <span key={emotion"}, className="emotion-badge">"                    {EMOTION_WHEEL[]motion as keyof typeof EMOTION_WHEEL]?.icon} {emotion}                  </span>                ))"}"              </div>              ","              {entry.notes && ("}"                <p className="entry-notes">{entry.notes}</p>"              )}              <div className="entry-footer">"                {entry.triggers.length > 0 && ("}"                  <div className="entry-triggers">"                    <span className="meta-label">Triggers: </span>                    { entry.triggers.map(trigger = > ("  );"                      <span key={trigger"}, className="trigger-chip">{trigger}</span>"                    ))}                  </div>                )}              </div>            </div>          ))}        </div>      </div>"      {/* Export/Share Actions */"};"      <div className="mood-export-section">"        <button          onClick={() => setShowExport(true)"}",          className="btn-secondary"        >          <Download size={18} />;          Export Data        </button>        <button          onClick={shareWithTherapist"}",          className="btn-secondary"        >          <Share2 size={18} />;          Share with Therapist        </button>      </div>      {/* Add Mood Modal */}      <AnimatePresence>        {showAddMood && (}          <motion.div            initial={ opacity: 0}, animate={ opacity: 1}            exit={ opacity: 0}            className="mood-modal-overlay",            onClick={() => setShowAddMood(false)}          >            <motion.div              initial={ scale: 09, y: 20}              animate={ scale: 1, y: 0}              exit={ scale: 0.9, y: 20}",              className="mood-modal",              onClick={e => e.stopPropagation()"}"            >              <div className="modal-header">"                <h2>How are you feeling?</h2>                <button                  onClick={() => setShowAddMood(false)"}",                  className="modal-close"                >                  <X size={24"} />"                </button>              </div>              "              <div className="modal-content">"                {/* Mood Slider */"};"                <div className="mood-slider-section">"                  <label className="slider-label">Overall Mood</label>"                  <div className="mood-slider-container">"                    <span className="slider-emoji">😢</span>"                    <input                      type = "range",                      min = "1",                      max = "10",                      value={currentMood}                      onChange={(e) = /> setCurrentMood(parseInt(e.target.value))"}",                      className="mood-slider"                    />                    <span className="slider-emoji">😊</span>"                  </div>                  <div className="slider-value">{currentMood}/10</div>"                </div>                "                {/* Emotion Wheel */"};"                <div className="emotion-wheel-section">"                  <label className="section-label">Select Emotions</label>"                  <div className="emotion-grid">";"                    {Object.entries(EMOTION_WHEEL).map(([]ey, emotion]) => (}                      <button                        key={key}, onClick={() => toggleEmotion(key)"}",                        className={emotion-btn $selectedEmotions.includes(key) ? ``elected :},                        style={style1}20` ` ``ransparent`}}                      >";"                        <span className="emotion-icon">{emotion.icon"}</span>"                        <span className="emotion-label">{emotion.label}</span>"                      </button>                    ))}                  </div>                </div>                "                {/* Additional Metrics */"};"                <div className="additional-metrics">"                  <div className="metric-row">"                    <label>Energy Level</label>                    <input                      type = "range",                      min = "1",                      max = "10",                      value={energyLevel}                      onChange={(e) = /> setEnergyLevel(parseInt(e.target.value))"}",                      className="metric-slider"                    />                    <span className="metric-value">{energyLevel"}/10</span>"                  </div>                  "                  <div className="metric-row">"                    <label>Anxiety Level</label>                    <input                      type = "range",                      min = "1",                      max = "10",                      value={anxietyLevel}                      onChange={(e) = /> setAnxietyLevel(parseInt(e.target.value))"}",                      className="metric-slider"                    />                    <span className="metric-value">{anxietyLevel"}/10</span>"                  </div>                  "                  <div className="metric-row">"                    <label>Stress Level</label>                    <input                      type = "range",                      min = "1",                      max = "10",                      value={stressLevel}                      onChange={(e) = /> setStressLevel(parseInt(e.target.value))"}",                      className="metric-slider"                    />                    <span className="metric-value">{stressLevel"}/10</span>"                  </div>                  "                  <div className="metric-row">"                    <label>Hours of Sleep</label>                    <input                      type = "number",                      min = "0",                      max = "24",                      step = "0.5",                      value={sleepHours}                      onChange={(e) = /> setSleepHours(parseFloat(e.target.value))"}",                      className="sleep-input"                    />                  </div>                </div>                "                {/* Triggers */"};"                <div className="triggers-section">"                  <label className="section-label">What triggered these feelings?</label>"                  <div className="trigger-chips">"                    {COMMON_TRIGGERS.map(trigger  => (                      <button",                        key={trigger}";",                        onClick={() => toggleTrigger(trigger)"}",                        className={trigger-chip $selectedTriggers.includes(trigger) ? ``elected :}";"                      >                        {trigger}                      </button>                    ))}                  </div>                </div>                "                {/* Activities */"};"                <div className="activities-section">"                  <label className="section-label">Activities today</label>"                  <div className="activity-chips">"                    {ACTIVITIES.map(activity  => (                      <button",                        key={activity}";",                        onClick={() => toggleActivity(activity)"}",                        className={activity-chip $selectedActivities.includes(activity) ? ``elected :}";"                      >                        {activity}                      </button>                    ))}                  </div>                </div>                "                {/* Notes */"};"                <div className="notes-section">"                  <label className="section-label">Additional Notes</label>"                  <textarea                    value={moodNotes}                    onChange={(e) => setMoodNotes(e.target.value)"}",                    placeholder="Any", thoughts you", d like to record...",                    className="mood-notes-textarea",                    rows={4"}"                  />                </div>              </div>              "              <div className="modal-footer">"                <button                  onClick={() => setShowAddMood(false)"}",                  className="btn-secondary"                >                  Cancel                </button>                <button                  onClick={saveMoodEntry"}",                  className="btn-primary",                  disabled={selectedEmotions.length === 0}                >                  Save Entry                </button>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      {/* Export Modal */}      <AnimatePresence>        {showExport && (}          <motion.div            initial={ opacity: 0}, animate={ opacity: 1}            exit={ opacity: 0}            className="export-modal-overlay",            onClick={() => setShowExport(false)}          >            <motion.div              initial={ scale: 09}              animate={ scale: 1}              exit={ scale: 09}              className="export-modal",              onClick={e => e.stopPropagation()"}"            >              <h3>Export Mood Data</h3>              <p>Choose your preferred format: </p              <div className="export-options">"                <button                  onClick={() => exportData("json")}",                  className="export-btn"                >                  <Download size={20"} />",                  Export as JSON                </button>                <button                  onClick={() => exportData("csv")}",                  className="export-btn"                >                  <Download size={20} />;                  Export as CSV                </button>              </div>              <button                onClick={() => setShowExport(false)"}", `;`                className="btn-secondary"              >                Cancel              </button>            </motion.div>          </motion.div>        )}      </AnimatePresence>      <style jsx>{}        .mood-tracking {},  padding: 24px          max-width: 1400px,  margin: 0 auto        }        .mood-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 32px          flex-wrap: wrap,  gap: 20px        }        .mood-title-section {},  flex: 1        }        .mood-title {},  display: flex          align-items: center,  gap: 12px          font-size: 32px          font-weight: 700,  color: #1a1a1a,  margin: 0        }        .mood-icon {},  color: #8b5cf6}        .mood-subtitle {},  color: #666,          margin-top: 8px          font-size: 16px        }        .mood-actions {},  display: flex,  gap: 16px          align-items: center        }        .mood-add-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 12px 24px,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  color: white,  border: none          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: transform 0.2s, box-shadow 0.2s        }        .mood-add-btn:hover {},  transform: translateY(-2px          box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3)        }        .mood-view-selector {},  display: flex,  background: #f5f5f5          border-radius: 12px,  padding: 4px        }        .view-btn {},  padding: 8px 16px,  background: transparent,  border: none          border-radius: 8px          font-size: 14px          font-weight: 500,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .view-btn.active {},  background: white,  color: #8b5cf6,          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1)        }        .mood-stats-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(250px, 1fr)),  gap: 20px          margin-bottom: 32px        }        .mood-stat-card {},  background: white          border-radius: 16px,  padding: 20px,  display: flex          align-items: center,  gap: 16px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05),  transition: transform 0.2s, box-shadow 0.2s        }        .mood-stat-card:hover {},  transform: translateY(-2px          box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1)        }        .stat-icon-wrapper {},  width: 48px,  height: 48px,          border-radius: 12px,  display: flex          align-items: center          justify-content: center,  color: white}        .mood-gradient {},  background: linear-gradient135deg, #667eea 0%, #764ba2 100%)        }        .energy-gradient {},  background: linear-gradient135deg, #f093fb 0%, #f5576c 100%)        }        .calm-gradient {},  background: linear-gradient135deg, #4facfe 0%, #00f2fe 100%)        }        .alert-gradient {},  background: linear-gradient135deg, #fa709a 0%, #fee140 100%)        }        .stat-content {},  display: flex          flex-direction: column        }        .stat-label {},          font-size: 14px,  color: #999,          font-weight: 500        }        .stat-value {},          font-size: 24px          font-weight: 700,  color: #1a1a1a}        .mood-chart-container {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .chart-title {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .mood-emotions-section {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .section-title {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .emotion-chart-wrapper {},  display: flex          justify-content: center        }        .mood-patterns-section {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .patterns-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 20px        }        .patterns-content {},  display: grid,  gap: 16px        }        .pattern-card {},  background: #f8f9fa          border-radius: 12px,  padding: 16px          border-left: 4px solid #8b5cf6        }        .pattern-header {},  display: flex          align-items: center,  gap: 12px          margin-bottom: 12px        }        .pattern-icon {},  color: #8b5cf6,  size: 20        }        .pattern-title {},          font-size: 16px          font-weight: 600,  color: #1a1a1a,  margin: 0        }        .pattern-recommendation {},  color: #666,          line-height: 16          margin-bottom: 12px        }        .pattern-triggers {},  display: flex,  gap: 8px          flex-wrap: wrap        }        .trigger-tag {},  padding: 4px 12px,  background: white          border-radius: 20px          font-size: 12px,  color: #666}        .mood-entries-section {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .entries-list {},  display: grid,  gap: 16px        }        .mood-entry-card {},  background: #f8f9fa          border-radius: 12px,  padding: 16px,  transition: transform 0.2s        }        .mood-entry-card:hover {},  transform: translateX(4px        }        .entry-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 12px        }        .entry-date {},  display: flex          align-items: center,  gap: 8px,  color: #666,          font-size: 14px        }        .entry-score {},  display: flex          align-items: baseline,  gap: 4px        }        .score-value {},          font-size: 24px          font-weight: 700,  color: #8b5cf6}        .score-label {},          font-size: 14px,  color: #999}        .entry-emotions {},  display: flex,  gap: 8px          flex-wrap: wrap          margin-bottom: 12px        }        .emotion-badge {},  padding: 6px 12px,  background: white          border-radius: 20px          font-size: 14px,  display: flex          align-items: center,  gap: 4px        }        .entry-notes {},  color: #666,          line-height: 16          margin-bottom: 12px        }        .entry-footer {},  display: flex          flex-direction: column,  gap: 8px        }        .entry-triggers {},  display: flex          align-items: center,  gap: 8px          flex-wrap: wrap        }        .meta-label {},          font-size: 12px,  color: #999,          font-weight: 600        }        .trigger-chip {},  padding: 4px 10px,  background: #e0e0e0          border-radius: 12px          font-size: 12px,  color: #666}        .mood-export-section {},  display: flex,  gap: 16px          justify-content: center        }        .btn-primary {},  padding: 12px 24px,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  color: white,  border: none          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: transform 0.2s, box-shadow 0.2s        }        .btn-primary: hover:not(:disabled {},  transform: translateY(-2px          box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3)        }        .btn-primary:disabled {},  opacity: 05,  cursor: notallowed        }        .btn-secondary {},  padding: 12px 24px,  background: white,  color: #666,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: all 0.2s,  display: flex          align-items: center,  gap: 8px        }        .btn-secondary:hover {},  background: #f5f5f5          border-color: #8b5cf6,  color: #8b5cf6}        /* Modal Styles */        .mood-modal-overlay,        .export-modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 20px        }        .mood-modal {},  background: white          border-radius: 24px          max-width: 800px,  width: 100,          max-height: 90vh          overflow-y: auto          box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3)        }        .export-modal {},  background: white          border-radius: 20px,  padding: 32px          max-width: 400px,  width: 100,          text-align: center        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 24px          border-bottom: 1px solid #e0e0e0        }        .modal-header h2 {},  margin: 0          font-size: 24px,  color: #1a1a1a}        .modal-close {},  background: none,  border: none,  color: #999,  cursor: pointer,  padding: 4px,  display: flex          align-items: center          justify-content: center,  transition: color 0.2s        }        .modal-close:hover {},  color: #666}        .modal-content {},  padding: 24px        }        .modal-footer {},  padding: 24px          border-top: 1px solid #e0e0e0,  display: flex          justify-content: flexend,  gap: 12px        }        .mood-slider-section {},          margin-bottom: 32px        }        .slider-label,        .section-label {},  display: block          margin-bottom: 12px          font-size: 16px          font-weight: 600,  color: #1a1a1a}        .mood-slider-container {},  display: flex          align-items: center,  gap: 16px        }        .slider-emoji {},          font-size: 24px        }        .mood-slider {},  flex: 1          -webkit-appearance: none,  height: 8px,          border-radius: 4px,  background: linear-gradientto right, #ff6b6b 0%, #ffd93d 50%, #6bcf7f 100%),  outline: none        }        .mood-slider: :-webkit-sliderthumb {}          -webkit-appearance: none,  appearance: none,  width: 24px,  height: 24px,          border-radius: 50,  background: white,  cursor: pointer          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2)        }        .mood-slider: :-moz-rangethumb {},  width: 24px,  height: 24px,          border-radius: 50,  background: white,  cursor: pointer          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2)        }        .slider-value {},          text-align: center          margin-top: 12px          font-size: 18px          font-weight: 600,  color: #8b5cf6}        .emotion-wheel-section {},          margin-bottom: 32px        }        .emotion-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(120px, 1fr)),  gap: 12px        }        .emotion-btn {},  padding: 12px,  background: white,  border: 2px solid #e0e0e0          border-radius: 12px,  cursor: pointer,  transition: all 0.2s,  display: flex          flex-direction: column          align-items: center,  gap: 4px        }        .emotion-btn:hover {},  transform: translateY(-2px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1)        }        .emotion-btn.selected {},          border-width: 2px        }        .emotion-icon {},          font-size: 24px        }        .emotion-label {},          font-size: 12px,  color: #666}        .additional-metrics {},  background: #f8f9fa          border-radius: 12px,  padding: 20px          margin-bottom: 32px        }        .metric-row {},  display: flex          align-items: center          margin-bottom: 16px        }        .metric-row: lastchild {},          margin-bottom: 0        }        .metric-row label {},  flex: 0 0 140px          font-size: 14px,  color: #666}        .metric-slider {},  flex: 1          -webkit-appearance: none,  height: 6px,          border-radius: 3px,  background: #e0e0e0,  outline: none        }        .metric-slider: :-webkit-sliderthumb {}          -webkit-appearance: none,  appearance: none,  width: 18px,  height: 18px,          border-radius: 50,  background: #8b5cf6,  cursor: pointer        }        .metric-value {},  flex: 0 0 50px          text-align: right          font-size: 14px          font-weight: 600,  color: #1a1a1a}        .sleep-input {},  width: 80px,  padding: 8px,  border: 1px solid #e0e0e0          border-radius: 8px          font-size: 14px        }        .triggers-section,        .activities-section {},          margin-bottom: 24px        }        .trigger-chips,        .activity-chips {},  display: flex          flex-wrap: wrap,  gap: 8px        }        .trigger-chip,        .activity-chip {},  padding: 8px 16px,  background: white,  border: 2px solid #e0e0e0          border-radius: 20px          font-size: 14px,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .trigger-chip: hover,        .activity-chip:hover {},          border-color: #8b5cf6,  color: #8b5cf6}        .trigger-chip.selected {},  background: #ff6b6b,  color: white,          border-color: #ff6b6b        }        .activity-chip.selected {},  background: #10b981,  color: white,          border-color: #10b981        }        .notes-section {},          margin-bottom: 24px        }        .mood-notes-textarea {},  width: 100,  padding: 12px,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 14px,  resize: vertical,          font-family: inherit        }        .mood-notes-textarea:focus {},  outline: none          border-color: #8b5cf6        }        .export-options {},  display: flex          flex-direction: column,  gap: 12px,  margin: 24px 0        }        .export-btn {},  padding: 12px 20px,  background: white,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 16px,  display: flex          align-items: center          justify-content: center,  gap: 8px,  cursor: pointer,  transition: all 0.2s        }        .export-btn:hover {},  background: #f5f5f5          border-color: #8b5cf6,  color: #8b5cf6}        /* Mobile Responsive */        @media (max-width: 768px {}          .mood-tracking {},  padding: 16px          }          .mood-header {},            flex-direction: column            align-items: flexstart          }          .mood-title {},            font-size: 24px          }          .mood-actions {},  width: 100,            flex-direction: column,  gap: 12px          }          .mood-add-btn {},  width: 100,            justify-content: center          }          .mood-view-selector {},  width: 100,            justify-content: spacebetween          }          .mood-stats-grid {},            grid-template-columns: 1fr          }          .emotion-grid {},            grid-template-columns: repeat(autofill, minmax(100px, 1fr))          }          .modal-content {},  padding: 16px          }          .metric-row label {},  flex: 0 0 100px          }          .mood-export-section {},            flex-direction: column          }          .btn-secondary {"}",  width: 100%,",            justify-content: center          }</style>    </div>  )},export default MoodTracking;