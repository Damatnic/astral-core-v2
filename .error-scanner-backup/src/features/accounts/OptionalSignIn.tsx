import React, { useState, useEffect }, from "react",import.useOptionalAuth, from "../../contexts/OptionalAuthContext",import.useNotification, from "../../contexts/NotificationContext",import.AppButton, from "../../components/AppButton",import.AppInput, from "../../components/AppInput",import.Modal, from "../../components/Modal",import.getEncryptionService, from "../../services/encryptionService",interface OptionalSignInProps {}  onClose ? : () => void  showBenefits?: boolean",  context?:  save-session"  | ", export-data"  | ", general",  sessionData?: any},interface TestAccount {}  email: string,  password: string,  name: "string,",  userType: "seeker  | ", helper"  | ", admin",  profile?: any}// Test accounts for demonstrationconst TEST_ACCOUNTS: TestAccount[ ] []  {  email: "user@test.com,",    process.env.REACT_APP_PASSWORD,";",    name: "Test, ", User",    userType: "seeker}"  {
  ",  email: "helper@test.com,    process.env.REACT_APP_PASSWORD    name: "Test Helper",    userType: "helper,",    profile: {  specializations: []nxiety, ", depression]",",",      experience: "3, years",      bio: "Licensed, therapist specializing in anxiety and mood disorders.",      verified: true
}{",  email: "admin@test.com,    process.env.REACT_APP_PASSWORD,    name: "Test Admin",",    userType: "admin}];",export const OptionalSignIn: React.FC<OptionalSignInProps = ({},  onClose,  showBenefits = true",",  context = "general",  sessionData}) => {};  const { login, register, isLoading, isAuthenticated", isAnonymous } = useOptionalAuth(;",  const.addToast = useNotification()  const []ode", setMode] = useState<", benefits'  | 'signin'  | 'register'  | 'demo'>('benefits)")",  const []mail", setEmail] = useState(")"),",  const []assword", setPassword] = useState(")"),",  const []ame", setName] = useState(")"),",  const []howPassword, setShowPassword] = useState(false)  const []greedToTerms, setAgreedToTerms] = useState(false;  const []ememberChoice", setRememberChoice] = useState(false);",  const encryptionService = getEncryptionService();  // Check if user has previously declined account creation,  const hasDeclinedAccount = localStorage.getItem("account_declined") === "true";",  useEffect(() => {},    if (isAuthenticated && !isAnonymous)  {
  onClose?.()    
}, []sAuthenticated, isAnonymous, onClose])  const handleDemoLogin = async (testAccount: TestAccount => {},    try {      // Store demo user data      const userData={},  email: testAccountemail,        name: testAccountname        userType: testAccountuserType        helperProfile: testAccountprofile || null",",        sub: ``emo_${testAccountuserType}_${Date.now();        demo: true},      const token = demo_token_${Date.now()}_${Math.random().toString(36).substr(2, 9)}";",      localStorage.setItem(``emo_user", JSON.stringify(userData))", ``      localStorage.setItem("demo_token", token");"      // Trigger a page reload to activate the demo session      window.location.reload()     }, catch (error) {
  addToast("Demo login failed. Please try again., ", error')'    
},  const handleRegister = async (e: React.FormEvent => {},    e.preventDefault()    if (!agreedToTerms) { ,",      addToast("Please agree to the Terms of Service and Privacy Policy", ", error)" };",      return    },    try {      await register(email, password, name)            // If we have session data to migrate, do it now      if (sessionData)  {        await migrateAnonymousData(sessionData)      },      addToast(Account created successfully! Welcome to AstralCore., ", success')',      onClose?.()    "}, catch (error) { addToast("Registration failed. Please try again.", ", error" );"    
},  const handleSignIn = async (e: React.FormEvent => {},    e.preventDefault()        try {      await login()      // If we have session data to migrate, do it now      if (sessionData)  {        await migrateAnonymousData(sessionData)      },      addToast(Signed in successfully!, ", success')',      onClose?.()    "}, catch (error) { addToast("Sign in failed. Please try again.", ", error" );"    
},  const migrateAnonymousData = async (data: any => {},    try {      // Encrypt and store the migrated data      const migratedData={}        ...data,        migratedAt: new Date().toISOString(),        originalAnonymousId: localStorage.getItem("anonymous_id"}";",      await encryptionService.secureSetItem("migrated_session_data", JSON.stringify(migratedData"));",      addToast("Your anonymous session data has been saved to your account!, ", success')',    "}, catch (error) {
  console.error("Failed to migrate anonymous data: ", error),      addToast("Warning: Failed to migrate some session data", ", warning')')'    
},  const handleDeclineAccount = () => {},    if (rememberChoice) { ,",      localStorage.setItem("account_declined", ", true')")",      localStorage.setItem("account_declined_date", new Date(").toISOString())" };"    },    addToast("You can continue using AstralCore anonymously. Create an account anytime in Settings., ", info')',    onClose?.()  },  const getContextualMessage = () => {},    switch (context) {},      case 'save-session':,",        return "Create an account to save your current session and access it from any device."      case 'export-data':,        return "Create an account to export your data with enhanced security and cloud backup options.", default: "        return "Your privacy comes first. Account creation is completely optional.    }  };  const getBenefitsForContext = () => {};    const commonBenefits = []ero knowledge encryption","];",      "Complete data portability",",",      "Access from any device",",",      "Secure cloud backup];",    switch (context) {},      case 'save-session':,        return []ave your current session progress", ", Resume conversations across devices"]"          "Automatic session backup,","          ...commonBenefits]      case 'export-data':,        return []nhanced export formats (PDF reports)']"          "Encrypted data packages",",          "Historical data analysis","          ...commonBenefits"]",  default:",;",        return []ave your journal entries", ", Track mood patterns over time", ", Backup safety plans securely";"          ...commonBenefits"]", "}}",",  if (mode = == "benefits",    return (;      <div className="optional-signin-container">"        <div className="signin-header">"          <div className="privacy-first-badge">"            <span className="shield-icon">üõ°Ô∏è</span>"            <span>Privacy First Design</span>          </div>          <h2>Optional Account Creation</h2>          <p className="context-message">{getContextualMessage()"}</p>"        </div>"        <div className="anonymity-guarantee">"          <div className="guarantee-item">"            <span className="icon">üîí</span>"            <div>              <strong>Always Anonymous</strong>              <p>Your data stays anonymous even with an account</p>            </div>          </div>          <div className="guarantee-item">"            <span className="icon">üö´</span>"            <div>              <strong>No Required Fields</strong>              <p>Only email needed", no personal information</p>"            </div>          </div>          <div className="guarantee-item">"            <span className="icon">üîë</span>"            <div>              <strong>Zero Knowledge</strong>              <p>We can't see your data even if we wanted to</p>'            </div>          </div>        </div>"        <div className="benefits-section">"          <h3>Optional Benefits of Creating an Account: </h3          <ul className="benefits-list">"            {getBenefitsForContext(").map((benefit", index) => (")"}"              <li key={index"}>"                <span className="checkmark">‚úì</span>"                {benefit}              </li>            ))"}"          </ul>        </div>"        <div className="action-buttons">"          <AppButton            onClick={() => setMode("signin")}",            variant = "primary",            className="create-account-btn"          >            Create Optional Account          </AppButton>          "          <AppButton            onClick={() => setMode("demo")}",            variant = "secondary",            className="demo-btn"          >            Try Demo Account          </AppButton>        </div>"        <div className="anonymous-option">"          <p>Want to continue without an account?</p>          <div className="remember-choice">"            <label>              <input                type = "checkbox",                checked={rememberChoice}                onChange={(e) = /> setRememberChoice(e.target.checked)}              />              Don't ask again for 30 days'            </label>          </div>          <AppButton            onClick={handleDeclineAccount"}",            variant = "ghost",            className="continue-anonymous-btn"          >            Continue Anonymously          </AppButton>        </div>"        {onClose && ("}"          <button className="close-btn", onClick={onClose"}, aria-label=", Close">"            √ó          </button>        )}      </div>    )  },  if (mode = == "demo",    return (;      <div className="demo-accounts-container">"        <div className="demo-header">"          <button onClick={() => setMode("benefits")}, className="back-btn">"            ‚Üê Back          </button>          <h2>Demo Accounts</h2>          <p>Try AstralCore with pre-configured test accounts</p>        </div>"        <div className="demo-accounts">"          {TEST_ACCOUNTS.map((account, index) => ("}"            <div key={index"}, className="demo-account-card">"              <div className="account-type">"                <span className={type-badge $account.userType"}>                  {account.userType.toUpperCase()"}"                </span>              </div>              <div className="account-details">"                <h3>{account.name"}</h3>"                <p className="account-email">{account.email"}</p>"                <p className="account-description">"                  {account.userType = == 'seeker' && 'Experience the app as someone seeking support'};","                  { account.userType = == "helper",  };"                  { account.userType = == "admin",  };"                </p>              </div>              <AppButton                onClick={() => handleDemoLogin(account)"}",                variant = "primary",                disabled={isLoading"}",                className="demo-login-btn"              >                {isLoading ? 'Signing In...' : 'Try This Account}'              </AppButton>            </div>          ))"}"        </div>"        <div className="demo-note">"          <p>            <strong>Note: </strong Demo accounts are reset when you close your browser.             All data is temporary and for demonstration purposes only.          </p>        </div>      </div>    )  },  if (mode = == "register",    return (;      <div className="register-form-container">"        <div className="form-header">"          <button onClick={() => setMode("benefits")}, className="back-btn">"            ‚Üê Back          </button>          <h2>Create Optional Account</h2>          <p>Only email required ‚Ä¢ Completely anonymous ‚Ä¢ Zero knowledge encryption</p>        </div>"        <form role="form", onSubmit={handleRegister"}, className="register-form">"          <div className="form-group">"            <label htmlFor = "reg-email", >Email Address *</label>"            <AppInput              id = "reg-email",              type = "email",              value={email}              onChange={(e) => setEmail(e.target.value)"}",              placeholder="your.email@example.com",              required;              autoComplete = "email"            />            <small>Used only for account recovery and important security notifications</small>          </div>"          <div className="form-group">"            <label htmlFor = "reg-name", >Display Name (Optional)</label>"            <AppInput              id = "reg-name",              type = "text",              value={name}              onChange={(e) => setName(e.target.value)"}",              placeholder="How", you", d like to be addressed",              autoComplete = "name"            />            <small>This stays completely private and anonymous</small>          </div>"          <div className="form-group">"            <label htmlFor = "reg-password", >Password *</label>"            <div className="password-input">"              <AppInput                id = "reg-password",                type={showPassword ? "text" : ", password}",                value={password}                onChange={(e) => setPassword(e.target.value)"}",                placeholder="Create", a secure password",                required;                autoComplete = "new-password",                minLength={8"}"              />              <button                type = "button",                className="password-toggle",                onClick={() => setShowPassword(!showPassword)"}"              >                {showPassword ? 'üëÅÔ∏è' : '}"              </button>            </div>            <small>Minimum 8 characters ‚Ä¢ Used for zero-knowledge encryption</small>          </div>"          <div className="form-group">"            <label className="checkbox-label">"              <input                type = "checkbox",                checked={agreedToTerms}                onChange={(e) = /> setAgreedToTerms(e.target.checked)"}",                required"              />              I agree to the <a href = "legal/terms", target=", _blank">Terms of Service</a> and{"              <a href = "legal/privacy", target=", _blank">Privacy Policy</a>"            </label>          </div>"          <div className="form-actions">"            <AppButton              type = "submit",              variant = "primary",              disabled={isLoading || !agreedToTerms"}",              className="register-btn"            >              {isLoading ? 'Creating Account...' : 'Create Account"}"            </AppButton>          </div>        </form>"        <div className="signin-link">"          <p>            Already have an account?{"            <button onClick={() => setMode("signin")}, className="link-btn">",              Sign In            </button>          </p>        </div>      </div>    )  },  if (mode = == "signin",    return (;      <div className="signin-form-container">"        <div className="form-header">"          <button onClick={() => setMode("benefits")}, className="back-btn">"            ‚Üê Back          </button>          <h2>Sign In to Your Account</h2>          <p>Access your encrypted data from any device</p>        </div>"        <form role="form", onSubmit={handleSignIn"}, className="signin-form">"          <div className="form-group">"            <label htmlFor = "signin-email", >Email Address</label>"            <AppInput              id = "signin-email",              type = "email",              value={email}              onChange={(e) => setEmail(e.target.value)"}",              placeholder="your.email@example.com",              required;              autoComplete = "email"            />          </div>"          <div className="form-group">"            <label htmlFor = "signin-password", >Password</label>"            <div className="password-input">"              <AppInput                id = "signin-password",                type={showPassword ? "text" : ", password}",                value={password}                onChange={(e) => setPassword(e.target.value)"}",                placeholder="Enter", your password",                required;                autoComplete = "current-password"              />              <button                type = "button",                className="password-toggle",                onClick={() => setShowPassword(!showPassword)"}"              >                {showPassword ? 'üëÅÔ∏è' : '}"              </button>            </div>          </div>"          <div className="form-actions">"            <AppButton              type = "submit",              variant = "primary",              disabled={isLoading"}",              className="signin-btn"            >              {isLoading ? 'Signing In...' : 'Sign In"}"            </AppButton>          </div>        </form>"        <div className="register-link">"          <p>            Don"t have an account?{"            <button onClick={() => setMode("register")}, className="link-btn">",              Create One            </button>          </p>        </div>"        <div className="forgot-password">"          <button className="link-btn", onClick={() => addToast(", Password reset feature coming soon!", ", info")}>", `;`            Forgot your password?          </button>        </div>      </div>    )  },  return null};export default OptionalSignIn;