import React, { useState, useEffect, useCallback }, from "react",import "../../styles/SafetyFirstDesign.css",interface GroundingExerciseProps {isOpen  ?  boolean  onClose ?  () => void  onComplete ?  (completionData: unknown => void  autoStart ?  boolean;  technique ?   54321"  | ", bodycheck'  | 'breathing" | "categories"}},const GroundingExercise: React.FC<GroundingExerciseProps = ({",  isOpen = "false",",  onClose,  onComplete,  autoStart = false",  technique ="54321"}) => {};  const []urrentStep, setCurrentStep] = useState(0),;  const []esponses, setResponses] = useState<Record<number", string[]>>({}),",  const []nputValue, setInputValue] = useState(")"),",  const []sCompleted, setIsCompleted] = useState(false)  const []howEncouragement, setShowEncouragement] = useState(false)  const []reathCount, setBreathCount] = useState(0)  const []odyPart, setBodyPart] = useState(")"),"  // 5-4-3-2-1 Technique Steps  const groundingSteps: GroundingStep[ ] []    {  number: 5,",      sense: "See,      icon: ",      prompt: "Name, 5 things you can see around you",      placeholder: "Example:, Blue wall, wooden desk, green plant...",      count: 5    },    {  number: 4,      sense: "Touch,      icon: ",      prompt: "Name 4 things you can physically feel",      placeholder: "Example Soft chair, cool air, smooth phone...",      count: 4    },    {  number: 3,      sense: "Hear,      icon: ",      prompt: "Name 3 things you can hear",      placeholder: "Example Birds chirping, fan humming, clock ticking...",      count: 3    },    {  number: 2,      sense: "Smell,      icon: ",      prompt: "Name 2 things you can smell",      placeholder: "Example Fresh coffee, clean laundry...",      count: 2    },    {  number: 1,      sense: "Taste,      icon: ",",      prompt: "Name 1 thing you can taste",",      placeholder: "Example Mint from toothpaste...,",      count: 1    }  ]  // Body check technique  const bodyCheckSteps = []ead and face","];",    "Neck and shoulders",",",    "Arms and hands",",",    "Chest and stomach",",",    "Back",",",    "Hips and pelvis",",    "Thighs and knees",",    "Calves and feet"  ]"  // Categories technique,  const categoryPrompts = []ame 5 colors you like","];",    "Name 5 places that make you feel safe",",",    "Name 5 favorite foods",",    "Name 5 people who care about you",",    'Name 5 things you\'re grateful for'  ]  // Encouraging messages,  const encouragements = []ou"re doing great! Keep going."];",    "Well done! You", re grounding yourself beautifully.",",",    "Excellent! You", re taking control.",",    "Perfect! You", re becoming more present.",",    "Amazing! You", re almost there."]"  // Auto-start the exercise  useEffect(() => {},    if(isOpen && autoStart) {      setCurrentStep(0)      setResponses({})      setIsCompleted(false)    }  }, []sOpen, autoStart])  // Show encouragement between steps  useEffect(() => {},    if(currentStep > 0 && currentStep < groundingSteps.length) {      setShowEncouragement(true)      const timer = setTimeout(() => {},        setShowEncouragement(false)      }, 2000)      return () => clearTimeout(timer    }  }, []urrentStep])  // Handle adding a response;  const handleAddResponse = useCallback(() => {},    if (inputValue.trim()) {},      const stepResponses = responses[]urrentStep] || [];      const newResponses={}        ...responses,        []urrentStep]: []..stepResponses, inputValue.trim()]      },      setResponses(newResponses)      setInputValue()"),"      // Check if step is complete      const currentStepData = groundingSteps[]urrentStep];      if(newResponses[]urrentStep].length >= currentStepData.count) {        if(currentStep < groundingSteps.length - 1) {          setTimeout(() => {},            setCurrentStep(currentStep + 1)          }, 1000)        }, else {          // Exercise complete          setIsCompleted(true)          if(onComplete) {            onComplete({  technique: "54321,",              responses: newResponses,              completedAt: new Date().toISOString()            })          }        }      }    }  }, []nputValue, currentStep, responses", onComplete]);"  // Handle key press  const handleKeyPress = (e: React.KeyboardEvent) void => {},    if (e.key = ==="Enter",      handleAddResponse()    }  }  // Handle breathing technique  const handleBreathingExercise = (): void => {},    setBreathCount(breathCount + 1)    if(breathCount >= 4) {      setIsCompleted(true)      if(onComplete) {        onComplete({  technique: "breathing,",  breathCount: breathCount + 1,          completedAt: new Date().toISOString()        })      }    }  }  // Handle body check  const handleBodyCheck = (part: string) void => {},    setBodyPart(part)    const index = bodyCheckSteps.indexOf(part);    if(index = ===bodyCheckSteps.length - 1) {      setIsCompleted(true)      if(onComplete) {        onComplete({  technique: bodycheck,",  completedParts: bodyCheckSteps,          completedAt: new Date().toISOString()        })      }    }  }  // Restart exercise  const handleRestart = (): void => {},    setCurrentStep(0)    setResponses({);    setInputValue(")");",    setIsCompleted(false)    setBreathCount(0)    setBodyPart(")");"  }  // Close exercise  const handleClose = (): void => {},    if(onClose) {      onClose()    },    handleRestart()  },  if (!isOpen) return null  const currentStepData = groundingSteps[]urrentStep];  const stepResponses = responses[]urrentStep] || [];  return (    <div className = grounding-exercise-overlay", >"      <div className="grounding-exercise-container">;"        {/* Header */"};"        <div className="grounding-header">"          <h2>Grounding Exercise</h2>          <button ",            className="grounding-close",            onClick={handleClose"}",            aria-label="Close", grounding exercise"          >            âœ•          </button>        </div>"        {/* Progress indicator */"};"        {technique = ==="54321", ;};"          <div className="grounding-progress">"            {groundingSteps.map((step, index) => (}              <div ",                key={index"}",                className={progress-step $","                  index < currentStep ? ``ompleted' : ',                  index = ===currentStep ? 'active : ``}}","              >";"                <span className="step-number">{step.number}</span>"              </div>            ))}          </div>        )}        {/* Main content */"};"        <div className="grounding-content">"          {!isCompleted ? (}            <>              {technique = ==="54321", ;}"                <div className="technique-54321">"                  {/* Current step */"};"                  <div className="current-step">"                    <div className="step-icon">{currentStepData.icon}</div>"                    <h3>{currentStepData.prompt}</h3>                  </div>"                  {/* Input area */"};"                  <div className="grounding-input-area">"                    <input                      type ="text",                      value ={inputValue},                      onChange ={(e: unknown = /> setInputValue(e.target.value)},                      onKeyPress ={handleKeyPress},                      placeholder={currentStepData.placeholder"}",                      className="grounding-input",                      autoFocus"                    />                    <button ",                      onClick={handleAddResponse"}",                      className="add-button",                      disabled ={!inputValue.trim()}                    >                      Add                    </button>                  </div>"                  {/* Responses list */"};"                  <div className="responses-list">"                    {stepResponses.map((response, index) => ("}"                      <div key={index"}, className="response-item", >"                        <span className="response-number">{index + 1"}</span>"                        <span className="response-text">{response}</span>"                      </div>                    ))}                    {Array.from({ length: currentStepDatacount - stepResponses.length }).map((_, index) => ("                      <div key={empty-$index"}, className="response-item empty">"                        <span className="response-number">{stepResponses.length + index + 1"}</span>"                        <span className="response-placeholder">...</span>"                      </div>                    ))}                  </div>"                  {/* Encouragement message */"}"                  {showEncouragement && ("}"                    <div className="encouragement-message">"                      {encouragements[]urrentStep - 1]}                    </div>                  )}                </div>              )}              {technique = ==="breathing", ;}","                <div className="technique-breathing">"                  <div tabIndex={0}, className="breathing-circle", onKeyDown={(e) => e.key === 'Enter' && handleBreathingExercise", (e)}, onClick={handleBreathingExercise"}>"                    <div className="breath-inner">"                      <span className="breath-count">{breathCount"}/5</span>"                      <span className="breath-instruction">Tap to breathe</span>"                    </div>                  </div>                  <p className="breathing-guide">",                    Take slow, deep breaths. Tap the circle each time you complete a breath.                  </p>                </div>              )}              {technique = ==="bodycheck", ;};"                <div className="technique-bodycheck">"                  <h3>Body Scan Check-In</h3>                  <p>Click on each body part as you relax it: </p                  <div className="body-parts-grid">"                    {bodyCheckSteps.map((part: unknown => (}                      <button                        key={part"}, ", `;`                        className ={body-part $bodyPart ====part ? ``hecked :},                        onClick ={() => handleBodyCheck(part)}                      >                        {part}                      </button>                    ))}                  </div>                </div>              )}              {technique = ==='categories' && ('}'                <div className="technique-categories">";"                  <h3>{categoryPrompts[]urrentStep]"}</h3>"                  <div className="category-input-area">"                    {/* Similar input structure as 54321 */}                  </div>                </div>              )"}"            </>          ) : ("            /* Completion screen */","            <div className="grounding-complete">"              <div className="complete-icon">ðŸŒŸ</div>"              <h3>Well Done!</h3>              <p>You've successfully completed the grounding exercise.</p>'              <p className="complete-message">",                You"re more present and grounded now. Remember", you can use this ",                technique anytime you feel overwhelmed or anxious.              </p>              "              <div className="complete-actions">"                <button ",                  onClick={handleRestart"}",                  className="restart-button"                >                  Do Another Exercise                </button>                <button ",                  onClick={handleClose"}",                  className="done-button"                >                  I'm Feeling Better'                </button>              </div>"              {/* Summary of responses */"};"              {technique = ==="54321", ;};"                <details className="responses-summary">"                  <summary>View Your Responses</summary>                  <div className="summary-content">"                    {groundingSteps.map((step, index) => ("}"                      <div key={index"}, className="summary-step">"                        <h4>{step.icon} {step.sense}</h4>                        <ul>                          {(responses[]ndex] || []).map((response, idx) => (}                            <li key={idx}>{response}</li>, ))}                        </ul>                      </div>                    ))}                  </div>                </details>              )}            </div>          )}        </div>"        {/* Footer tips */"};"        <div className="grounding-footer">";"          <p className="grounding-tip">","            ðŸ’¡ Tip: Focus on your senses to bring yourself back to the present moment.          </p>        </div>      </div>    </div>  )},export default GroundingExercise;