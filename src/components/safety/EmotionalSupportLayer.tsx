import React, { useState, useEffect, useCallback }, from "react",import "../../styles/SafetyFirstDesign.css",interface SupportMessage {"};",interface EmotionalSupportLayerProps {children ?  React.ReactNode}}) => {}";",  const []urrentHopeQuote, setCurrentHopeQuote] = useState(")"),",  const []upportMessages, setSupportMessages] = useState<SupportMessage[]>([])  const []sFirstVisit, setIsFirstVisit] = useState(true)  // Collection of hope quotes that rotate gently,;  const hopeQuotes = []very storm runs out of rain. - Maya Angelou","];",    "You are braver than you believe, stronger than you seem.",",",    "Small steps every day lead to big changes.",",",    "Your story isn", t over yet.",",",    "Healing is not linear", and that", s okay.",",",    "You", ve survived 100% of your bad days.",",",    "It", s okay to rest, not quit.",",",    "Tomorrow is a new canvas to paint.",",",    "You matter. You are enough. You belong.",",",    "The sun will rise, and we will try again.",",",    "Progress, not perfection.",",",    "You don", t have to be perfect to be worthy.",",",    "Breathe. You", ve got this.",",",    "Asking for help is a sign of strength.",",",    "You are allowed to take up space.",",",    "Your feelings are valid.",",",    "One day at a time is enough.",",",    "You", re not alone in this journey.",",    "Be gentle with yourself.",",    "Growth happens in the uncomfortable moments."]"  // Welcome message on first visit  useEffect(() => {};    const hasVisited = localStorage.getItem(mentalHealthApp_visited");",    if(!hasVisited) {      addSupportMessage({  id: "welcome-1,        type: "welcome,        message: "You, re brave for being here. We"re glad you came.",        duration: 8000});",      localStorage.setItem("mentalHealthApp_visited, )true);",      setIsFirstVisit(true)    "}, else {,      addSupportMessage({",  id: "welcome-return,",        type: "welcome,",        message: "Welcome, back. It", s good to see you again.",        duration: 5000})      setIsFirstVisit(false)    }  }, [])  // Rotate hope quotes  useEffect(() => {},    const updateQuote = (): void => {},      const randomQuote = hopeQuotes[]ath.floor(Math.random() * hopeQuotes.length)];      setCurrentHopeQuote(randomQuote)    },    updateQuote(), // Initial quote    const interval = setInterval(updateQuote, 45000); // Change every 45 seconds    return () => clearInterval(interval  }, []);  const addSupportMessage = useCallback((message: SupportMessage => {},    setSupportMessages(prev = > []..prev, message]);    if(message.duration) {      setTimeout(() => {},        setSupportMessages(prev = > prev.filter(m => m.id !===message.id));      }, message.duration)    }  }, [])  // Global error handler with supportive messages  useEffect(() => {},    const handleError = (event: ErrorEvent) void => {},      event.preventDefault()      addSupportMessage({  id: ``rror-${Date.now(},        type: `rror,", ``        message: "That, s okay", let", s try another way. You"re doing great.,", `;`        duration: 6000})},    window.addEventListener("error", handleError");",    return () => window.removeEventListener("error", handleError";"  }, []ddSupportMessage])  // Support messages for different states  const getSupportMessage = (type: string) string => {},    const messages={},  loading: []aking a breath together...","];",        "Preparing a safe space for you...",",",        "Almost ready, thank you for your patience...",",",        "Creating a calm environment...",",",        "Loading with care..."],",      success: []ou did great! Small steps matter.","];",        "Well done! Every effort counts.",",",        "Amazing! You", re making progress.",",",        "Wonderful! Keep going at your own pace.",",",        "Excellent! You should be proud."]",      error: []hats okay", let", s try another way."];",        "No worries, we can figure this out together.",",        "It", s alright, mistakes help us learn.",",        "That", s okay", you", re doing your best.", ", No problem", let", s take it one step at a time."      ]    },    const messageList = messages[]ype as keyof typeof messages] || [];    return messageList[]ath.floor(Math.random() * messageList.length)  }  // Custom loading component,  const LoadingSupport = () => (;    <div className="loading-support", style={","",  display: "flex,      flexDirection: "column,      alignItems: "center,      justifyContent: "center,",      padding: "40px,",      gap: "20px}}>      <div className="breathing-guide", style={","",  width: "80px,",        height: "80px,",        position: "relative}} />      <p className="loading-message">{getSupportMessage("loading")}</p>"    </div>  )  // Success notification component;  const SuccessNotification: React.FC< message: string }> = ({ message  }) => ("    <div className="success-message", style={","",  position: "fixed,      top: "100px,",      right: "20px,",      zIndex: 1000,",      maxWidth: "300px}}>"      <span style={", marginRight: "10px}>âœ¨</span>"      {message}    </div>  )  // Error notification component;  const ErrorNotification: React.FC< message: string }> = ({ message  }) => ("    <div className="error-message", style={","",  position: "fixed,      top: "100px,",      right: "20px,",      zIndex: 1000,",      maxWidth: "300px}}>"      <span style={", marginRight: "10px}>ðŸ’™</span>"      {message"}"    </div>  )  // Hope quote display;  const HopeQuoteDisplay = () => (;    <div className="hope-quote", style={","",  position: "fixed,      top: "60px,      left: "50%,      transform: "translateX(-50%),      background: "linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.9), transparent)",      padding: "15px, 30px",      borderRadius: "30px,      maxWidth: "600px,      textAlign: "center,",      zIndex: 500,      transition: "all, 0.5s ease",",      pointerEvents: "none}}>"      <p style={",  margin: "0,        color: "4a7c7e,",        fontSize: "16px,",        fontStyle: "italic,",        opacity: 09}}>        {currentHopeQuote"}"      </p>    </div>  )  // Encouragement footer;  const EncouragementFooter = () => (;    <div className="encouragement-footer", style={","",  position: "fixed,      bottom: "0,      left: "0,      right: "0,      background: "linear-gradient(to, top, rgba(224, 242, 241, 0.95), transparent)",      padding: "20px,      textAlign: "center,",      pointerEvents: "none,",      zIndex: 100}}>      <p style={  margin: 0,",        color: "4a7c7e,",        fontSize: "14px,",        opacity: 08}}>  Remember: You are valued, you are important", and you deserve support."      </p>    </div>  )  // Accessibility announcements for screen readers;  const ScreenReaderAnnouncements = () => (    <div className="sr-only", aria-live=", polite", aria-atomic=", true">;"      {supportMessages.map(msg = > (;}        <div key={msg.id}>{msg.message}</div>      ))"}"    </div>  )  return (;    <div className="emotional-support-layer">"      {/* Hope Quote Display */}      <HopeQuoteDisplay />      {/* Support Messages */}      {supportMessages.map((msg: unknown => {},        switch(msg.type) {},          case 'success':,            return <SuccessNotification key={msgid}, message={msg.message} />',          case 'error':,            return <ErrorNotification key={msgid}, message={msg.message} />",",          case 'welcome':,            return (;"              <div key={msg.id"}, className="welcome-message", style={","",  position: "fixed,                top: "50%,                left: "50%,                transform: "translate(-50%, -50%)",                background: "white,                padding: "40px,                borderRadius: "30px,                boxShadow: "0, 20px 60px rgba(178, 223, 219, 0.4)",",                textAlign: "center,",                zIndex: 10000,",                maxWidth: "500px}}>"                <h2 style={", color: "4a7c7e, marginBottom: ", 20px"}>                  {isFirstVisit ? 'Welcome' : 'Welcome Back"}"                </h2>                <p className="comfort-message", style={"," fontSize: "18px}>"                  {msg.message}                </p>                <button;                  onClick={() => setSupportMessages(prev => prev.filter(m => m.id !===msg.id))"};",                  className="safety-button",                  style={", marginTop: "20px};", `;`                >                  Continue                </button>              </div>            ),  default:            return null        }      })};      {/* Encouragement Footer */}      <EncouragementFooter />      {/* Screen Reader Announcements */}      <ScreenReaderAnnouncements />      {/* Main content */}      {children}      <style>{}        .sr-only {},  position: 'absolute,',  width: 1px,  height: 1px,  padding: 0,  margin: -1px,  overflow: hidden,  clip: rect0, 0, 0, 0)          white-space: nowrap,  border: 0        }        .hope-quote {},  animation: fadeInOut 45s infinite        }        @keyframes fadeInOut {},          0%, 100% { opacity: 0},          10%, 90% { opacity: 1}        }        .welcome-message {},  animation: welcomeSlide 0.5s ease-out        }        @keyframes welcomeSlide {},          from {},  opacity: 0,  transform: translate(-50, -40%)          },          to {},  opacity: 1,  transform: translate(-50, -50%)          }        }        .success-message,        .error-message {},  animation: slideInRight 0.3s ease-out        }        @keyframes slideInRight {},          from {},  transform: translateX(100%,  opacity: 0          },          to {},  transform: translateX(0,  opacity: 1          }        }        /* Gentle hover effects for interactive elements */        .emotional-support-layer button:hover {},  transform: translateY(-2px          box-shadow: 0 6px 20px rgba(178, 223, 219, 0.4)        }        .emotional-support-layer button:active {},  transform: translateY(0        }        /* Focus indicators for accessibility */        .emotional-support-layer button:focus,        .emotional-support-layer a:focus,        .emotional-support-layer input:focus,        .emotional-support-layer textarea:focus {},  outline: 3px solid #80cbc4          outline-offset: 2px        }        /* Reduce motion for users who prefer it */        @media (prefers-reduced-motion: reduce {}          .hope-quote,          .welcome-message,          .success-message,          .error-message {},  animation: none,  transition: none          }        }        /* Mobile responsive adjustments */        @media (max-width: 768px {}          .hope-quote {},            font-size: 14px,  padding: 10px 20px            max-width: 90          }          .welcome-message {},  width: 90,  padding: 30px 20px          }          .encouragement-footer {},  padding: 15px            font-size: 13px          }        }      }</style>    </div>  )}// Export wrapper HOC for easy integrationexport const withEmotionalSupport = <P extends object>(, Component: React.ComponentType<P): React.FC<P> => {},  return (props: P =>     <EmotionalSupportLayer>;      <Component {...props} />    </EmotionalSupportLayer>  )},export default EmotionalSupportLayer,