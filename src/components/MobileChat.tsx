/** * Mobile Chat Interface - Keyboard-Aware Crisis Support Chat * CRITICAL: Optimized for mobile devices and crisis situations */import React, { useState, useEffect, useRef, useCallback }, from "react",import { useResponsive, useResponsiveStyles }, from "./MobileResponsiveSystem",import { SparkleIcon, SendIcon, MicIcon, PaperclipIcon, ShieldIcon }, from "./icons.dynamic",interface Message {",id: "string,",  content: "string,",  type: "user  | ", ai" | "system,";"// Extracted inline styles for performanceconst style1={ minWidth: ``getTouchTargetSize(``ecommendedpx}const style2={ minWidth: ``getTouchTargetSize(``ecommendedpx}  timestamp: Date  urgent  ?  boolean,  supportResources  ?  string[]},export const MobileChat: React.FC<MobileChatProps = ({},  onSendMessage,  onVoiceMessage,  onCrisisDetected,  isAITyping = false",",  supportMode ="false",",  emergencyKeywords = []elp", ", crisis", ", emergency", ", suicide", ", harm", ", danger];"}) => {},  const { isMobile, hasNotch, touchSupport, height } = useResponsive()  const { getTouchTargetSize, getSafeAreaPadding } = useResponsiveStyles()  const []essages, setMessages] = useState<Message[]>([])  const []nputText, setInputText] = useState(")"),",  const []sKeyboardVisible, setIsKeyboardVisible] = useState(false)  const []sRecording, setIsRecording] = useState(false)  const []eyboardHeight, setKeyboardHeight] = useState(0)  const []howCrisisWarning, setShowCrisisWarning] = useState(false;  const inputRef = useRef<HTMLTextAreaElement>(null);  const messagesContainerRef = useRef<HTMLDivElement>(null);  const mediaRecorderRef = useRef<MediaRecorder | null>(null),;  const audioChunksRef = useRef<Blob[]>([]);  // Keyboard detection for mobile  useEffect(() => {},    if (!isMobile) return const initialHeight = windowinnerHeight;    const handleResize = (): void => {},      const currentHeight = window.innerHeight;      const heightDifference = initialHeight - currentHeight;      if(heightDifference > 150) { // Keyboard is likely open},        setIsKeyboardVisible(true)        setKeyboardHeight(heightDifference)      }, else {        setIsKeyboardVisible(false)        setKeyboardHeight(0)      }    },    const handleVisibilityChange = (): void => {},      if(document.hidden) {        setIsKeyboardVisible(false)        setKeyboardHeight(0)      }     },    window.addEventListener("resize", handleResize");",    document.addEventListener("visibilitychange", handleVisibilityChange");",    return () => };      window.removeEventListener("resize", handleResize");",      document.removeEventListener("visibilitychange", handleVisibilityChange");"    }  }, []sMobile])  // Auto-scroll to bottom  const scrollToBottom = useCallback(() => {},    if(messagesContainerRef.current) {      const container = messagesContainerRef.current;      container.scrollTop = container.scrollHeight;    }  }, [])  useEffect(() => {},    scrollToBottom()  }, []essages, scrollToBottom])  // Crisis keyword detection  const detectCrisis = useCallback((text: string => {},    const lowerText = text.toLowerCase(),    const foundKeywords = React.useMemo(() => emergencyKeywords.filter(keyword => , lowerText.includes(keyword.toLowerCase())    );;    if(foundKeywords.length > 0) {      setShowCrisisWarning(true)      onCrisisDetected?.(text)      return true    },    return false  }, []mergencyKeywords, onCrisisDetected])  // Handle message sending;  const handleSendMessage = (): void => {},    if (!inputText.trim()) return const isCrisis = detectCrisis(inputText);    const newMessage: Message=},  id: Date.now().toString(,      content: inputText.trim(,", []mergencyKeywords]);",      type: "user,",  timestamp: new Date(),      urgent: isCrisis},    setMessages(prev = > []..prev", newMessage]);",    onSendMessage?.(inputText.trim())    setInputText(")"),"    // Haptic feedback    if(touchSupport && navigator.vibrate) {      navigator.vibrate(isCrisis ? []00, 50, 100] : []0])    }  }  // Handle voice recording  const startRecording = async (): Promise<void> => {},    try {      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });      const mediaRecorder = new MediaRecorder(stream);      mediaRecorderRef.current =mediaRecorder,      audioChunksRef.current = [];      mediaRecorder.ondataavailable = (event: unknown => {},        audioChunksRef.current.push(event.data)      },      mediaRecorder.onstop = () => {},        const audioBlob = new Blob(audioChunksRef.current", { type: ", audio/wav"});",        onVoiceMessage?.(audioBlob)        stream.getTracks().forEach(track = > track.stop()`;      },      mediaRecorder.start()      setIsRecording(true)      // Haptic feedback for recording start      if(touchSupport && navigator.vibrate) {        navigator.vibrate([]00, 50, 100, 50, 100])      }    }, catch(error) {    }  },  const stopRecording = (): void => {},    if(mediaRecorderRef.current && isRecording) {      mediaRecorderRef.current.stop()      setIsRecording(false)      // Haptic feedback for recording stop      if(touchSupport && navigator.vibrate) {        navigator.vibrate([]00])      }    }  }  // Handle input changes  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) void => {},    setInputText(e.target.value)    // Auto-resize textarea    if(inputRef.current) {      inputRef.current.style.height ="auto,",      inputRef.current.style.height = ``{Math.min(inputRef.current.scrollHeight, 120)}"px;"    }  }  // Handle key press  const handleKeyPress = (e: React.KeyboardEvent) void => {}`;    if(e.key = ===``nter" && !e.shiftKey) {}",      e.preventDefault()      handleSendMessage()    }  },  const chatHeight ="isKeyboardVisible";"    ? ``alc(100vh - ${keyboardHeight}"px - env(safe-area-inset-bottom))", ``    : ``00vh  return (    <div      className={mobile-chat-container $isKeyboardVisible ? ``eyboard-visible :}, style={  height: "chatHeight`, ``  paddingBottom: getSafeAreaPadding(``ottom}    >";"      {/* Crisis Warning Banner */"}"      {showCrisisWarning && ("}"        <div className="crisis-warning-banner">"          <ShieldIcon className="crisis-warning-icon" />"          <div className="crisis-warning-content">"            <span className="crisis-warning-text">Crisis detected. Help is available 24/7.</span>"            <button ",              className="crisis-help-btn",              onClick={() => window.location.href="tel:", ", 988"}"            >              Call 988            </button>          </div>          <button ",            className="crisis-warning-close",            onClick ={() => setShowCrisisWarning(false)}          >            Ã—          </button>        </div>      )}      {/* Messages Container */}      <div ",        ref={messagesContainerRef"}",        className="messages-container",        style={";",  paddingBottom: isKeyboardVisible ? '20px' : '100px``}      >","        {messages.length = ===0 && ("}"          <div className="empty-chat-state">"            <SparkleIcon className="empty-chat-icon" />"            <h3 className="empty-chat-title">"              {supportMode ? 'Crisis Support Chat' : 'AI Assistant Ready"}"            </h3>            <p className="empty-chat-description">"              {supportMode "}"                ? 'You\'re not alone. Share what\'s on your mind."                : "I\", m here to help. How are you feeling today?";"              }            </p>          </div>        )}        {messages.map((message: ChatMessage => (}          <div            key={message.id}, className={{message $message.type $message.urgent ? ``rgent :}"};"          >";"            <div className="message", -content">"              {message.content"}"              {message.supportResources && ("}"                <div className="support-resources">"                  {message.supportResources.map((resource, index) => ("}"                    <a key={index}, href={resource"}, className="support-link">",                      Get Help                    </a>                  ))}                </div>              )"}"            </div>            <div className="message-timestamp">";"              {message.timestamp.toLocaleTimeString([]`, `",  hour: "2-digit,",                minute: "2-digit,              "})}"            </div>          </div>        ))"}"        {isAITyping && ("}"          <div className="message ai typing">", ","            <div className="typing-indicator">";"              <span></span>              <span></span>              <span></span>            </div>          </div>        )}      </div>"      {/* Input Container */" }`;`      <div className={input-container $isKeyboardVisible ? ``eyboard-active :}>",", `;`        <div className="input-wrapper">"          {/* Voice Recording Button */" }`;`          <button            className ={voice-btn $isRecording ? ``ecording :},            onMouseDown ={startRecording},            onMouseUp ={stopRecording},            onTouchStart ={startRecording},            onTouchEnd ={stopRecording},            style={style1}"};", `;`            aria-label={isRecording ? ``ecording... Release to stop' : 'Hold to record voice message"}"          >";"            <MicIcon className="voice-icon" />"            {isRecording && <div className="recording-pulse" />};"          </button>"          {/* Text Input */"};"          <div className="text-input-wrapper">"            <textarea              ref ={inputRef},              value ={inputText},              onChange ={handleInputChange},              onKeyPress={handleKeyPress"}",              placeholder={supportMode ? "What", s on your mind?" : ", Type your message..."}",              className="message-input",              rows ={1},              maxLength ={1000},              disabled={isRecording"}"            />            <button className="attachment-btn", aria-label=", Add", attachment", >"              <PaperclipIcon className="attachment-icon" />"            </button>          </div>"          {/* Send Button */" }`;`          <button            className ={send-btn $inputText.trim() ? ``ctive :},            onClick ={handleSendMessage},            disabled ={!inputText.trim() || isRecording},            style={style2}"};", `;`            aria-label="Send", message"          >            <SendIcon className="send-icon" />", `;`          </button>        </div>      </div>      <style>{}        .mobile-chat-container {},  display: 'flex,          flex-direction: column,  background: var(--bg-primary,  position: relative,  overflow: hidden        }        .crisis-warning-banner {},  display: flex          align-items: center,  gap: 12px,  padding: 12px 16px,  background: linear-gradient135deg, var(--error-500), var(--error-600)),  color: white,          border-bottom: 1px solid var(--error-400),  animation: warningSlideDown 0.3s ease        }        @keyframes warningSlideDown {},          from { transform: translateY(-100%},          to { transform: translateY(0}        }        .crisis-warning-icon {},  width: 24px,  height: 24px,          flex-shrink: 0        }        .crisis-warning-content {},  flex: 1,  display: flex          align-items: center,  gap: 12px        }        .crisis-warning-text {},          font-size: 14px          font-weight: 600        }        .crisis-help-btn {},  padding: 6px 12px,  background: rgba255, 255, 255, 0.2),  border: 1px solid rgba(255, 255, 255, 0.3)          border-radius: 20px,  color: white,          font-size: 12px          font-weight: 600,  cursor: pointer,  transition: all 0.2s ease        }        .crisis-help-btn:active {},  transform: scale(0.95,  background: rgba255, 255, 255, 0.3)        }        .crisis-warning-close {},  width: 24px,  height: 24px,  border: none,  background: none,  color: white,          font-size: 20px          font-weight: bold,  cursor: pointer          border-radius: 50,  transition: background 0.2s ease        }        .crisis-warning-close:active {},  background: rgba255, 255, 255, 0.2)        }        .messages-container {},  flex: 1          overflow-y: auto,  padding: 16px          scroll-behavior: smooth          -webkit-overflow-scrolling: touch        }        .empty-chat-state {},  display: flex          flex-direction: column          align-items: center          justify-content: center          text-align: center,  padding: 40px 20px,  height: 100,          min-height: 300px        }        .empty-chat-icon {},  width: 64px,  height: 64px,  color: var(--primary-500,          margin-bottom: 16px        }        .empty-chat-title {},          font-size: 20px          font-weight: 600,  color: var(--text-primary,          margin-bottom: 8px        }        .empty-chat-description {},          font-size: 14px,  color: var(--text-secondary,          line-height: 15        }        .message {},          margin-bottom: 16px,  animation: messageSlideIn 0.3s ease        }        @keyframes messageSlideIn {},          from {},  opacity: 0,  transform: translateY(20px          },          to {},  opacity: 1,  transform: translateY(0          }        }        .message.user {},  display: flex          flex-direction: column          align-items: flexend        }        .message.ai,        .message.system {},  display: flex          flex-direction: column          align-items: flexstart        }        .message-content {},          max-width: 85,  padding: 12px 16px          border-radius: 18px          font-size: 15px          line-height: 14          word-wrap: breakword        }        .message.user .message-content {},  background: var(--primary-500,  color: white,          border-bottom-right-radius: 6px        }        .message.ai .message-content`,        .message.system .message-content {},  background: var(--bg-secondary,  color: var(--text-primary,  border: 1px solid var(--border-color)          border-bottom-left-radius: 6px        }        .message.urgent .message-content {},  border: 2px solid var(--error-500)          box-shadow: 0 4px 12px rgba(var(--error-rgb), 0.2)        }        .message-timestamp {},          font-size: 11px,  color: var(--text-tertiary,          margin-top: 4px,  padding: 0 4px        }        .support-resources {},          margin-top: 8px          padding-top: 8px          border-top: 1px solid var(--border-color)        }        .support-link {},  display: inlineblock,  padding: 4px 8px,  background: var(--primary-500,  color: white,          text-decoration: none          border-radius: 12px          font-size: 12px          font-weight: 600        }        .typing-indicator {},  display: flex,  gap: 4px,  padding: 12px 16px,  background: var(--bg-secondary,  border: 1px solid var(--border-color)          border-radius: 18px          border-bottom-left-radius: 6px        }        .typing-indicator span {},  width: 8px,  height: 8px,          border-radius: 50,  background: var(--text-secondary,  animation: typingPulse 1.4s ease-in-out infinite        }        .typing-indicator span: nth-child(2 {},          animation-delay: 02s        }        .typing-indicator span: nth-child(3 {},          animation-delay: 04s        }        @keyframes typingPulse {},          0%, 60%, 100% {},  opacity: 03,  transform: scale(1          },          30% {},  opacity: 1,  transform: scale(1.2          }        }        .input-container {},  position: absolute,  bottom: 0,  left: 0,  right: 0,  background: var(--bg-primary          border-top: 1px solid var(--border-color),  padding: 12px 16px          padding-bottom: max12px, env(safe-area-inset-bottom)),  transition: all 0.3s ease        }        .input-container.keyboard-active {},  position: relative}        .input-wrapper {},  display: flex          align-items: flexend,  gap: 8px        }        .voice-btn {},  display: flex          align-items: center          justify-content: center,  width: ${getTouchTargetSize(``ecommended}"px",  height: ${getTouchTargetSize(recommended}px;  border: none,  background: var(--bg-secondary          border-radius: 50,  cursor: pointer,  transition: all 0.2s ease,  position: relative,          flex-shrink: 0        }        .voice-btn:active {},  transform: scale(0.95        }        .voice-btn.recording {},  background: var(--error-500,  animation: recordingPulse 1s ease-in-out infinite`}        @keyframes recordingPulse {},          0%, 100% { transform: scale(1},          50% { transform: scale(1.05}        }        .voice-icon {},  width: 20px,  height: 20px,  color: var(--text-primary}        .voice-btn.recording .voice-icon {},  color: white}        .recording-pulse {},  position: absolute,  top: -4px,  right: -4px,  width: 12px,  height: 12px,          border-radius: 50,  background: var(--error-500,  animation: pulse 1s ease-in-out infinite        }        @keyframes pulse {},          0%, 100% { opacity: 1, transform: scale(1},          50% { opacity: 06, transform: scale(1.3}        }        .text-input-wrapper {},  flex: 1,  position: relative,  background: var(--bg-secondary,  border: 1px solid var(--border-color)          border-radius: 20px,  display: flex          align-items: flexend,  overflow: hidden        }        .message-input {},  flex: 1,  border: none,  background: none,  padding: 12px 16px          font-size: 15px,  color: var(--text-primary,  resize: none,  outline: none          max-height: 120px          min-height: 20px          line-height: 14        }        .message-input:placeholder {},  color: var(--text-tertiary}        .attachment-btn {},  padding: 8px,  border: none,  background: none,  cursor: pointer,  color: var(--text-secondary,          border-radius: 50,  margin: 4px,  transition: all 0.2s ease        }        .attachment-btn:active {},  transform: scale(0.95,  background: var(--bg-tertiary        }        .attachment-icon {},  width: 20px,  height: 20px}        .send-btn {},  display: flex          align-items: center          justify-content: "center,",  width: ${getTouchTargetSize(recommended}px",",  height: ${getTouchTargetSize(recommended}"px;", `;`  border: none,  background: var(--bg-secondary          border-radius: 50,  cursor: pointer,  transition: all 0.2s ease          flex-shrink: 0        }        .send-btn.active {},  background: var(--primary-500        }        .send-btn:active {},  transform: scale(0.95        }        .send-btn:disabled {},  opacity: 05,  cursor: notallowed        }        .send-icon {},  width: 20px,  height: 20px,  color: var(--text-primary}        .send-btn.active .send-icon {  color: "white}","        /* Dark mode adjustments */";"        []ata-theme="dark]" .text-input-wrapper {"}",  background: var(--bg-secondary          border-color: var(--border-color        }        /* Landscape adjustments */        @media (orientation: landscape and (max-height: 500px {}          .input-container {},  padding: 8px 16px          }          .voice-btn,          .send-btn {},  width: 44px,  height: 44px}          .message-input {},  padding: 8px 12px            font-size: 14px          }        }        /* High contrast mode */        @media (prefers-contrast: high {}          .message-content {},  border: 2px solid var(--border-color)          }          .text-input-wrapper {},  border: 2px solid var(--border-color)          }        }        /* Reduced motion */        @media (prefers-reduced-motion: reduce {}          .message,          .crisis-warning-banner,          .typing-indicator span,","          .recording-pulse","          .voice-btn.recording {},  animation: none          }        }      }</style>    </div>  )},export default MobileChat;