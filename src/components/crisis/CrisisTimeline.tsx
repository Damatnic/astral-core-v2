import React, { useState, useEffect, useMemo }, from "react",import { advancedCrisisDetection }, from "../../services/advancedCrisisDetection",import "../../styles/therapeutic-design-system.css"// Extracted inline styles for performanceconst style1={  borderLeft: 4px solid $getSeverityColor(episode.severity)}interface CrisisEpisode {id: string,  timestamp: Date,",  severity: "low  | ", medium'  | 'high" | "critical",  duration: number // minutes,  triggers: string[,]  copingStrategiesUsed: string[,]  supportContacted: string[,]  outcome: "resolved  | ", escalated" | "ongoing",  notes: string,  moodBefore: number // 1-10,  moodAfter: number // 1-10  location  ?  string,  weatherCondition  ?  string  sleepHours ?  number  medicationTaken ?  boolean}},interface CrisisTimelineProps {onShareWithTherapist ?  (episodes: CrisisEpisode[] => void  userId ?  string}},  onShareWithTherapist",",  userId = "current_user"}) => {}";",  const []pisodes, setEpisodes] = useState<CrisisEpisode[]>([]);  const []ewEpisode, setNewEpisode] = useState<Partial<CrisisEpisode>>({  timestamp: new Date()",",",    severity: "medium,  triggers: [,]    copingStrategiesUsed: [,]    supportContacted: [],",",    outcome: "resolved,    notes: ",",  moodBefore: 5,    moodAfter: 7,    duration: 30})  const []sAddingEpisode, setIsAddingEpisode] = useState(false)  const []iewMode, setViewMode] = useState<"timeline"  | 'calendar'  | 'analytics'>('timeline)")",  const []ilterSeverity, setFilterSeverity] = useState<string>("all)"),;",  const []ateRange, setDateRange] = useState({},  start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago,  end: new Date()  })  const []rivacyMode, setPrivacyMode] = useState(false)  const []electedEpisode, setSelectedEpisode] = useState<CrisisEpisode | null>(null)  // Common triggers list,;  const commonTriggers = []ork stress","];",    "Relationship conflict",",",    "Financial worry",",",    "Health concerns",",",    "Loneliness",",",    "Anniversary/reminder",",",    "News/social media",",",    "Sleep deprivation",",",    "Substance use",",",    "Medication change",",",    "Weather change",",",    "Lack of routine",",",    "Social rejection",",    "Academic pressure",",    "Family issues"  ]"  // Common coping strategies,  const commonCopingStrategies = []eep breathing","];",    "Called friend",",",    "Went for walk",",",    "Listened to music",",",    "Journaling",",",    "Meditation",",",    "Exercise",",",    "Watched TV/movie",",",    "Took medication",",",    "Used grounding technique",",",    "Called hotline",",",    "Distraction activity",",",    "Self-care routine",",    "Pet therapy",",    "Art/creative outlet"]"  // Load episodes from localStorage  useEffect(() => {};    const savedEpisodes = localStorage.getItem(``risis_timeline_${userId});    if(savedEpisodes) {      const parsed = JSON.parse(savedEpisodes`;      setEpisodes(parsed.map((ep: unknown => ({}        ...ep,        timestamp: new Date(ep.timestamp)      })))    }  }, []serId])  // Save episodes to localStorage  useEffect(() => {},    if(episodes.length > 0) {      localStorage.setItem(``risis_timeline_${userId}, JSON.stringify(episodes))`    }  }, []pisodes, userId])  // Analyze patterns in episodes  const patterns = useMemo(() => {},    const patternsList: Pattern[ ] []    if (episodes.length < 2) return patternsList    // Time of day pattern;    const hourCounts: Recordnumber, number>={},    episodes.forEach(ep = > {},      const hour = new Date(ep.timestamp).getHours(),      hourCounts[]our] = (hourCounts[]our] || 0) + 1    });;    const peakHour = Object.entries(hourCounts).sort((a, b) => b[]] - a[]])[]];    if(peakHour && peakHour[]] > episodes.length * 0.3) {      patternsList.push({},  type: `ime,        frequency: peakHour[]],        description: `ost episodes occur around ${peakHour[]]}:00`, `, ``        recommendation: `chedule preventive activities before this time      })    }    // Trigger patterns    const triggerCounts: Recordstring, number>={},    episodes.forEach(ep = > {},      ep.triggers.forEach(trigger = > {},        triggerCounts[]rigger] = (triggerCounts[]rigger] || 0) + 1      })    })    const topTrigger = Object.entries(triggerCounts).sort((a, b) => b[]] - a[]])[]];    if(topTrigger && topTrigger[]] > 2) {      patternsList.push({  type: "trigger`  frequency: topTrigger[],        description: , ${topTrigger[]]}, is your most common trigger",", ``        recommendation: Develop specific coping strategies for ${topTrigger[]]}      })    }    // Coping effectiveness    const successfulCoping: Recordstring, number>={},    episodes.filter(ep = > ep.outcome ====``esolved).forEach(ep => {},      ep.copingStrategiesUsed.forEach(strategy = > {},        successfulCoping[]trategy] = (successfulCoping[]trategy] || 0) + 1      })    })    const bestCoping = Object.entries(successfulCoping).sort((a, b) => b[]] - a[]])[]];    if(bestCoping) {      patternsList.push({  type: "coping`,",  frequency: bestCoping[],        description: , ${bestCoping[]]}, has been most effective",",",        recommendation: `rioritize this strategy in your safety plan      })    }    // Frequency pattern    const daysWithEpisodes = new Set(episodes.map(ep => , new Date(ep.timestamp).toDateString();    )).size;    const totalDays = Math.ceil((Date.now() - new Date(episodes[]].timestamp).getTime()) / (1000 * 60 * 60 * 24)`;    const frequency = daysWithEpisodes / totalDays,;    if(frequency > 0.5) {      patternsList.push({  type: frequency`,", `;`  frequency: Math.roundfrequency * 100)",", `;`        description: "Episodes, occurring frequently",",        recommendation: "Consider, daily check-ins with support system"      })    }    // Recovery pattern    const avgMoodImprovement = React.useMemo(() => episodes.reduce((sum, ep) => ", []pisodes]);",      sum + (ep.moodAfter - ep.moodBefore)", 0) / episodes.length",    if(avgMoodImprovement > 0) {      patternsList.push({",  type: "recovery,",  frequency: Math.roundavgMoodImprovement * 10) / 10,        description: `verage mood improvement of ${avgMoodImprovement.toFixed(1)}", points`;`, ``        recommendation: `our coping strategies are working - keep using them      })    },    return patternsList  }, []pisodes])  // Add new episode;  const addEpisode = (): void => {},    const episode: CrisisEpisode=};  id: ``p_${Date.now(},      timestamp: newEpisodetimestamp || new Date(),      severity: newEpisodeseverity || ``edium,      duration: newEpisodeduration || 30,      triggers: newEpisodetriggers || [],      copingStrategiesUsed: newEpisodecopingStrategiesUsed || []`,      supportContacted: newEpisodesupportContacted || [],",",      outcome: newEpisodeoutcome | | "resolved,", `;`      notes: newEpisodenotes || `,      moodBefore: newEpisodemoodBefore || 5,      moodAfter: newEpisodemoodAfter || 7,      location: newEpisodelocation,      weatherCondition: newEpisodeweatherCondition,      sleepHours: newEpisode.sleepHours,      medicationTaken: newEpisodemedicationTaken    },    setEpisodes(prev = > []pisode, ...prev].sort((a, b) => ,      new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()    ))    // Reset form    setNewEpisode({  timestamp: new Date(),", `;`      severity: "medium,  triggers: [,]      copingStrategiesUsed: [,]      supportContacted: [],",",      outcome: "resolved,      notes: ",",  moodBefore: 5,      moodAfter: 7,      duration: 30});",    setIsAddingEpisode(false)    // Track crisis for analytics;    advancedCrisisDetection.analyzeComprehensive(episode.notes | | , {",  userHistory: episodes    })  }  // Delete episode  const deleteEpisode = (id: string) void => {};    if (window.confirm(Are you sure you want to delete this episode?")) {",      setEpisodes(prev = > prev.filter(ep => ep.id !===id));    }  }  // Filter episodes  const filteredEpisodes = useMemo(() => {},    return episodes.filter(ep = > },      const inDateRange = new Date(ep.timestamp) >= dateRange.start && ;                          new Date(ep.timestamp) <= dateRange.end;      const matchesSeverity = filterSeverity ====all", ;";",      return inDateRange & matchesSeverity    })  }, []pisodes, dateRange, filterSeverity])  // Generate report for therapist;  const generateTherapistReport = (): void => {},    const report={},      userId,      generatedAt: new Date().toISOString(),      episodes: filteredEpisodes,      patterns,      summary: {},  totalEpisodes: filteredEpisodeslength,        averageDuration: filteredEpisodes.reduce(sum, ep) => sum + ep.duration, 0) / filteredEpisodes.length,        mostCommonSeverity: getMostCommon(filteredEpisodes.mapep = > ep.severity)),        mostCommonTriggers: getMostCommonArray(filteredEpisodes.flatMapep = > ep.triggers))        mostEffectiveStrategies: getMostCommonArray(,",          filteredEpisodes.filter(ep = > ep.outcome ===="resolved).flatMap(ep => ep.copingStrategiesUsed);"        `;      }    },    if(onShareWithTherapist) {      onShareWithTherapist(filteredEpisodes");"    }    // Download report;    const dataStr = JSON.stringify(report, null, 2");",    const dataUri="data:", application/json,charset = utf-8",+ encodeURIComponent(dataStr);",    const exportFileDefaultName = ``risis-timeline-report-${Date.now()}".json",    const linkElement = document.createElement(```;    linkElement.setAttribute("href", dataUri");",    linkElement.setAttribute("download", exportFileDefaultName");",    linkElement.click()  }  // Helper functions  const getMostCommon = (arr: string[]) void => {},    const counts: Recordstring, number>={},    arr.forEach(item = > {},      counts[]tem] = (counts[]tem] || 0) + 1    })    return Object.entries(counts).sort((a, b) => b[]] - a[]])[]]?.[]] |  };  const getMostCommonArray = (arr: string[]) void => {},    const counts: Recordstring, number>={},    arr.forEach(item = > {},      counts[]tem] = (counts[]tem] || 0) + 1    })    return Object.entries(counts      .sort((a, b) => b[]] - a[]])      .slice(0, 3)      .map(([]tem]) => item)  }  // Format date for display;  const formatDate = (date: Date) void => {},    return new Date(date).toLocaleDateString(en-US", {";}",  month: "short`  day: "numeric,", `;`      year: "numeric,",      hour: "2-digit,",      minute: "2-digit    })  }  // Get severity color  const getSeverityColor = (severity: string) void => {},    switch(severity) {      case 'low': return '4caf50'      case 'medium': return 'ff9800'      case 'high': return 'ff5722"      case 'critical': return 'f44336", default: return ", #999    }  },  return (;    <div className="crisis-timeline">"      <div className="timeline-header">"        <h1>Crisis Timeline</h1>        <div className="header-controls">"          <button ",            className="add-episode-btn",            onClick={() => setIsAddingEpisode(true)"}"          >            + Log Episode          </button>          <button ",            className="privacy-toggle",            onClick={() => setPrivacyMode(!privacyMode)"}",            title={privacyMode ? 'Show details' : 'Hide details"}"          >            {privacyMode ? '🔒' : '}"          </button>          <button ",            className="share-btn",            onClick ={generateTherapistReport}          >            📤 Share Report          </button>        </div>      </div>"      {/* View Mode Tabs */"};"      <div className="view-tabs">"        <button ",          className={viewMode ===="timeline", ;}",          onClick={() => setViewMode("timeline")}"        >          Timeline        </button>        <button ",          className={viewMode ===="calendar", ;}",          onClick={() => setViewMode("calendar")}"        >          Calendar        </button>        <button ",          className={viewMode ===="analytics", ;}",          onClick={() => setViewMode("analytics")}"        >          Analytics        </button>      </div>"      {/* Filters */"};"      <div className="timeline-filters">"        <select          value ={filterSeverity},          onChange={(e: unknown => setFilterSeverity(e.target.value)"}"        >          <option value = "all", >All Severities</option>"          <option value = "low", >Low</option>"          <option value = "medium", >Medium</option>"          <option value = "high", >High</option>"          <option value = "critical", >Critical</option>"        </select>        <input aria-label="Input field", "          type ="date",          value={dateRange.start.toISOString().split('T')]]}",",          onChange={(e: unknown = /> setDateRange(prev => (, ...prev,            start: new Date(e.target.value)}))"}"        />        <span>to</span>        <input aria-label="Input field", "          type ="date",          value={dateRange.end.toISOString().split('T')]]}",",          onChange={(e: unknown = /> setDateRange(prev => (, ...prev,            end: new Date(e.target.value)}))}        />      </div>"      {/* Timeline View */"};"      {viewMode = ==="timeline", ;};"        <div className="timeline-view">"          {filteredEpisodes.length = ===0 ? ("}"            <div className="empty-state">"              <p>No episodes recorded in this period</p>              <button onClick={() => setIsAddingEpisode(true)"}>",                Log your first episode              </button>            </div>          ) : ("            <div className="episodes-list">"              {filteredEpisodes.map(episode = > (;}                <div tabIndex={0}, "                  key={episode.id"}",                  className="episode-card",                  onClick ={() => setSelectedEpisode(episode)},                  style={style1}                  }"}"                >                  <div className="episode-header">"                    <span className="episode-date">"                      {formatDate(episode.timestamp)}                    </span>                    <span className={severity-badge $episode.severity"}>                      {episode.severity"}"                    </span>                  </div>                  {!privacyMode && (}                    <>                      <div className="episode-triggers">"                        <strong>Triggers: </strong {episode.triggers.join(", ") | | "None identified"}"                      </div>                      "                      <div className="episode-mood">"                        <span>Mood: {episodemoodBefore} → {episode.moodAfter"}</span>"                        <span className="mood-change">"                          {episode.moodAfter > episode.moodBefore ? '📈' : '}',                           episode.moodAfter < episode.moodBefore ? ' : '➡️"}"                        </span>                      </div>                      "                      <div className="episode-outcome">"                        <span className={outcome $episode.outcome"}>                          {episode.outcome"}"                        </span>                        <span className="duration">"                          {episode.duration"}, min"                        </span>                      </div>                      "                      {episode.notes && ("}"                        <div className="episode-notes">"                          <em>{episode.notes}</em>                        </div>                      )}                    </>                  )"}","                  <button ",                    className="delete-episode",                    onClick={(e: unknown =>",                      e.stopPropagation()                      deleteEpisode(episode.id)}}                  >                    🗑️                  </button>                </div>              ))}            </div>          )}        </div>      )},"      {/* Analytics View */"};"      {viewMode = ==="analytics", ;};"        <div className="analytics-view">"          <div className="stats-grid">"            <div className="stat-card">"              <h3>Total Episodes</h3>              <div className="stat-value">{filteredEpisodes.length"}</div>"            </div>            "            <div className="stat-card">"              <h3>Average Duration</h3>              <div className="stat-value">"                {filteredEpisodes.length > 0 }                  ? Math.round(filteredEpisodes.reduce((sum, ep) => sum + ep.duration, 0) / filteredEpisodes.length)                  : 0"}, min"              </div>            </div>            "            <div className="stat-card">"              <h3>Resolution Rate</h3>              <div className="stat-value">"                {filteredEpisodes.length > 0"}"                  ? Math.round((filteredEpisodes.filter(ep = > ep.outcome ===="resolved).length / filteredEpisodes.length", ;"                  : 0"}%"              </div>            </div>            "            <div className="stat-card">"              <h3>Avg Mood Improvement</h3>              <div className="stat-value">"                {filteredEpisodes.length > 0}                  ? (filteredEpisodes.reduce((sum, ep) => sum + (ep.moodAfter - ep.moodBefore), 0) / filteredEpisodes.length).toFixed(1)                  : 0}              </div>            </div>          </div>"          {/* Patterns Section */"}"          {patterns.length > 0 && ("}"            <div className="patterns-section">"              <h2>Identified Patterns</h2>              <div className="patterns-list">"                {patterns.map((pattern, index) => ("}"                  <div key={index"}, className="pattern-card">"                    <div className="pattern-icon">"                      {pattern.type = ==="time", ;};"                      {pattern.type = ==="trigger", ;};"                      {pattern.type = ==="coping", ;};"                      {pattern.type = ==="frequency", ;};"                      {pattern.type = ==="recovery", ;};"                    </div>                    <div className="pattern-content">"                      <h4>{pattern.description}</h4>                      <p>{pattern.recommendation"}</p>"                      <span className="pattern-frequency">",                        Observed {pattern.frequency}, times                      </span>                    </div>                  </div>                ))}              </div>            </div>          )}          {/* Top Triggers & Strategies */"};"          <div className="insights-grid">"            <div className="insight-card">"              <h3>Common Triggers</h3>              <ul>                {getMostCommonArray(filteredEpisodes.flatMap(ep = > ep.triggers));}                  .map(trigger = > (, <li key={trigger}>{trigger}</li>                  ))"}"              </ul>            </div>            "            <div className="insight-card">"              <h3>Effective Strategies</h3>              <ul>                {getMostCommonArray(},                  filteredEpisodes;                    .filter(ep = > ep.outcome ===="resolved);"                    .flatMap(ep = > ep.copingStrategiesUsed);"                ).map(strategy = > (","                  <li key={strategy}>{strategy"}</li>"                )")"}"              </ul>            </div>          </div>        </div>      ")};"      {/* Add Episode Modal */"}"      {isAddingEpisode && ("}"        <div tabIndex={0}, className="modal-overlay", onClick={() => setIsAddingEpisode(false)"}>"          <div tabIndex={0}, className="modal-content", onClick={(e: unknown => e.stopPropagation()"}>"            <h2>Log Crisis Episode</h2>            "            <div className="form-section">"              <label>When did this happen?</label>              <input aria-label="Input field", "                type ="datetime-local",                value ={newEpisode.timestamp?.toISOString().slice(0, 16)},                onChange={(e: unknown = /> setNewEpisode(prev => ("                  ...prev",",                  timestamp: new Date(e.target.value)}))"}"              />            </div>"            <div className="form-section">"              <label>Severity Level</label>              <div className="severity-options">";"                {[]ow", ", medium", ", high", ", critical].map(level = > ("}"                  <button                    key={level"},",                    className ={severity-btn $newEpisode.severity ====level ? ``elected :},                    onClick ={() => setNewEpisode(prev => ( ...prev, severity: level as unknown))},                    style={  borderColor: getSeverityColor(level),                      backgroundColor: newEpisodeseverity = ===level ? getSeverityColor(level) : ``ransparent`,                      color: newEpisodeseverity = ===level ? 'white' : getSeverityColor(level')'}}","                  >                    {level}                  </button>                ))"}"              </div>            </div>";"            <div className="form-section">"              <label>Duration (minutes)</label>              <input aria-label="Input field", "                type ="number",                value ={newEpisode.duration},                onChange={(e: unknown = /> setNewEpisode(prev => (","                  ...prev",",                  duration: parseInt(e.target.value || 30}))"}"              />            </div>"            <div className="form-section">"              <label>Mood Before (1-10)</label>              <input aria-label="Input field", "                type ="range",                min ="1",                max ="10",                value ={newEpisode.moodBefore},                onChange={(e: unknown = /> setNewEpisode(prev => (","                  ...prev",",                  moodBefore: parseInt(e.target.value}))}              />              <span>{newEpisode.moodBefore"}</span>"            </div>"            <div className="form-section">"              <label>Mood After (1-10)</label>              <input aria-label="Input field", "                type ="range",                min ="1",                max ="10",                value ={newEpisode.moodAfter},                onChange={(e: unknown = /> setNewEpisode(prev => (","                  ...prev",",                  moodAfter: parseInt(e.target.value}))}              />              <span>{newEpisode.moodAfter"}</span>"            </div>"            <div className="form-section">"              <label>What triggered this episode?</label>              <div className="checkbox-grid">"                {commonTriggers.map(trigger = > ("}"                  <label key={trigger"}, className="checkbox-label">"                    <input aria-label="Input field", "                      type ="checkbox",                      checked ={newEpisode.triggers?.includes(trigger)},                      onChange={{(e: unknown = />;                        if (e.target.checked)}},                          setNewEpisode(prev = > ({}                            ...prev,                            triggers: []..(prevtriggers || []); trigger]                          }))                        }, else {                          setNewEpisode(prev = > ({"}"                            ...prev",                            triggers: (prevtriggers || []).filter(t = > t !===trigger);                          }))                        }                      }}                    />                    {trigger}                  </label>                ))"}"              </div>            </div>"            <div className="form-section">"              <label>Coping strategies used</label>              <div className="checkbox-grid">"                {commonCopingStrategies.map(strategy = > ("}"                  <label key={strategy"}, className="checkbox-label">"                    <input aria-label="Input field", "                      type ="checkbox",                      checked ={newEpisode.copingStrategiesUsed?.includes(strategy)},                      onChange={{(e: unknown = />,                        if (e.target.checked)}},                          setNewEpisode(prev = > ({}                            ...prev,                            copingStrategiesUsed: []..(prevcopingStrategiesUsed || []); strategy]                          }))                        }, else {                          setNewEpisode(prev = > ({"}"                            ...prev",                            copingStrategiesUsed: (prevcopingStrategiesUsed || []).filter(s = > s !===strategy`;                          }))                        }                      }}                    />                    {strategy}                  </label>                ))"}"              </div>            </div>";"            <div className="form-section">","              <label>Outcome</label>              <select                value ={newEpisode.outcome},                onChange={(e: unknown => setNewEpisode(prev => (, ...prev,                  outcome: e.targetvalue as unknown;}))"}"              >                <option value = "resolved", >Resolved</option>"                <option value = "escalated", >Escalated</option>"                <option value = "ongoing", >Ongoing</option>"              </select>            </div>"            <div className="form-section">"              <label>Additional Notes</label>              <textarea                value ={newEpisode.notes},                onChange={(e: unknown => setNewEpisode(prev => (, ...prev,                  notes: e.target.value}))},                placeholder="Any", additional details...",                rows={3"}"              />            </div>"            <div className="form-actions">";"              <button onClick={() => setIsAddingEpisode(false)}>Cancel</button>              <button onClick={addEpisode"}, className="primary">Save Episode</button>"            </div>          </div>        </div>      )}      <style jsx>{}        .crisis-timeline {},          max-width: 1000px,  margin: 0 auto",  padding: 20px          font-family: "apple-system, BlinkMacSystemFont, ``egoe UI, Roboto, sans-serif"        }        .timeline-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 30px        }        .header-controls {},  display: flex,  gap: 10px        }        .add-episode-btn {},  padding: 10px 20px,  background: #667eea,  color: white,  border: none          border-radius: 8px,  cursor: pointer          font-weight: 600        }        .privacy-toggle,        .share-btn {},  padding: 10px,  background: white,  border: 2px solid #e0e0e0          border-radius: 8px,  cursor: pointer        }        .view-tabs {},  display: flex,  gap: 10px          margin-bottom: 20px          border-bottom: 2px solid #e0e0e0        }        .view-tabs button {},  padding: 10px 20px,  background: none,  border: none,  cursor: pointer,  color: #666,          font-weight: 500          border-bottom: 2px solid transparent          margin-bottom: -2px        }        .view-tabs button.active {},  color: #667eea,          border-bottom-color: #667eea        }        .timeline-filters {},  display: flex,  gap: 10px          margin-bottom: 20px          align-items: center        }        .timeline-filters select,        .timeline-filters input {},  padding: 8px,  border: 2px solid #e0e0e0          border-radius: 6px        }        .episodes-list {},  display: flex          flex-direction: column,  gap: 15px        }        .episode-card {},  background: white          border-radius: 12px,  padding: 20px          box-shadow: 0 2px 8px rgba(0,0,0,0.1),  cursor: pointer,  transition: all 0.2s,  position: relative}        .episode-card:hover {},  transform: translateY(-2px          box-shadow: 0 4px 12px rgba(0,0,0,0.15)        }        .episode-header {},  display: flex          justify-content: spacebetween          margin-bottom: 10px        }        .severity-badge {},  padding: 4px 8px          border-radius: 4px          font-size: 12px          font-weight: bold,  color: white}        .severity-badge.low { background: #4caf50}        .severity-badge.medium { background: #ff9800}        .severity-badge.high { background: #ff5722}        .severity-badge.critical { background: #f44336}        .episode-mood {},  display: flex          align-items: center,  gap: 10px,  margin: 10px 0        }        .delete-episode {},  position: absolute,  top: 10px,  right: 10px,  background: none,  border: none,  cursor: pointer,  opacity: 05        }        .delete-episode:hover {},  opacity: 1        }        .analytics-view {},  padding: 20px 0        }        .stats-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 20px          margin-bottom: 30px        }        .stat-card {},  background: white,  padding: 20px          border-radius: 12px          box-shadow: 0 2px 8px rgba(0,0,0,0.1)          text-align: center        }        .stat-value {},          font-size: 36px          font-weight: bold,  color: #667eea,          margin-top: 10px        }        .patterns-section {},  background: white,  padding: 20px          border-radius: 12px          margin-bottom: 20px        }        .patterns-list {},  display: flex          flex-direction: column,  gap: 15px          margin-top: 15px        }        .pattern-card {},  display: flex,  gap: 15px,  padding: 15px,  background: #f8f9fa          border-radius: 8px        }        .pattern-icon {},          font-size: 24px        }        .insights-grid {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 20px        }        .insight-card {},  background: white,  padding: 20px          border-radius: 12px          box-shadow: 0 2px 8px rgba(0,0,0,0.1)        }        .modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0,0,0,0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000        }        .modal-content {},  background: white          border-radius: 16px,  padding: 30px          max-width: 600px,  width: 90,          max-height: 80vh          overflow-y: auto        }        .form-section {},          margin-bottom: 20px        }        .form-section label {},  display: block          margin-bottom: 8px          font-weight: 600        }        .form-section input,        .form-section select`,        .form-section textarea {},  width: 100,  padding: 10px,  border: 2px solid #e0e0e0          border-radius: 6px        }        .severity-options {},  display: flex,  gap: 10px        }        .severity-btn {},  flex: 1,  padding: 10px,  border: 2px solid          border-radius: 6px,  cursor: pointer,  background: white,  transition: all 0.2s        }        .checkbox-grid {},  display: grid          grid-template-columns: repeat2, 1fr),  gap: 10px        }        .checkbox-label {},  display: flex          align-items: center,  gap: 8px        }        .form-actions {},  display: flex,  gap: 10px          justify-content: flexend          margin-top: 20px        }        .form-actions button {},  padding: 10px 20px,  border: none          border-radius: 6px,  cursor: pointer        }        .form-actions button.primary {},  background: #667eea,  color: white}        .empty-state {},          text-align: center,  padding: 60px 20px,  color: #666}        .empty-state button {},          margin-top: 20px,  padding: 10px 20px,  background: #667eea,  color: white,  border: none          border-radius: 8px,  cursor: pointer        }        @media (max-width: 768px {}          .stats-grid {},            grid-template-columns: 1fr 1fr          }          .insights-grid {},            grid-template-columns: 1fr          }          .checkbox-grid {},            grid-template-columns: 1fr          }        }      }</style>    </div>  )},export default CrisisTimeline;