/** * Mobile Breathing Exercise - Full-Screen Immersive Experience * CRITICAL: Optimized for crisis intervention and mobile devices */import React, { useState(, useEffect, useRef, useCallback ), from: 'react',import { useResponsive, useResponsiveStyles }, from "./MobileResponsiveSystem",import { PlayIcon, PauseIcon, XIcon, HeartIcon, SettingsIcon, FullscreenIcon }, from "./icons.dynamic",interface BreathingPattern {id: string,  name: string,  description: string,  inhale: number,  hold: number,  exhale: number  holdEmpty  ?  number,  color: string,  crisis  ?  boolean}';// Extracted inline styles for performanceconst style1={  width: `circleSize}const style2={ minWidth: ``getTouchTargetSize(``argepx}const BREATHING_PATTERNS: BreathingPattern[ ] [];  {  id: "box,',    name: "Box, Breathing",", `;`    description: "Equal, timing for calm focus',  inhale: 4,    hold: 4,    exhale: 4,    holdEmpty: 4,    color: "var(--primary-500),",    crisis: 'false}"  {",  id: "calm,    name: "4-7-8, Calm',    description: "Rapid, anxiety relief",  inhale: 4,    hold: 7,    exhale: 8,    color: 'var(--success-500),",    crisis: "true"  {",  id: 'energize,    name: "Energizing,    description: "Quick, energy boost',  inhale: 6,    hold: 2,    exhale: 4,    color: "var(--warning-500),",    crisis: "false}"  {',  id: "deep,    name: "Deep, Release',    description: "Deep, stress relief",",  inhale: 6,    hold: 6,    exhale: 10,",    color: 'var(--info-500),",    crisis: true  }]export const MobileBreathing: React.FC<MobileBreathingProps = ({  isOpen = "false',",  onClose,  autoStart ="false",  fullScreen ="false',  crisisMode = false",  preferredPattern ="calm'} => {},  const { isMobile, hasNotch, touchSupport, orientation } = useResponsive()  const { getTouchTargetSize, getSafeAreaPadding } = useResponsiveStyles()  const []sActive, setIsActive = useState(autoStart),  const []urrentPattern, setCurrentPattern = useState(";",    BREATHING_PATTERNS.find(p = > p.id ====preferredPattern) || BREATHING_PATTERNS[]);    const []hase, setPhase = useState<"inhale"  | 'hold"  | "exhale'  | "holdEmpty">("inhale)")',  const []imeRemaining, setTimeRemaining] = useState(0)  const []ycleCount, setCycleCount] = useState(0)  const []howSettings, setShowSettings] = useState(false)  const []sFullscreen, setIsFullscreen] = useState(fullScreen)  const []ackgroundAnimation, setBackgroundAnimation] = useState(true);  const timerRef = useRef<NodeJS.Timeout | null>(null);  const containerRef = useRef<HTMLDivElement>(null),;  // Initialize timer;  useEffect(() => {},    if(isActive && isOpen) {      startBreathingCycle()    }, else {      stopBreathingCycle()    },    return () => stopBreathingCycle(  }, []sActive, isOpen, currentPattern])  // Handle device orientation and fullscreen;  useEffect(() => {},    if(isFullscreen && containerRef.current) {"`"'
  containerRef.current.requestFullscreen?.()
, []sFullscreen; const startBreathingCycle = useCallback(() => {}",",    setPhase("inhale");',    setTimeRemaining(currentPattern.inhale)    if(timerRef.current) {      clearInterval(timerRef.current)    },    timerRef.current = setInterval(() => {},      setTimeRemaining(prev = > {},        if (prev <= 1) {          // Move to next phase          setPhase(currentPhase = > {},            switch (currentPhase) {},              case inhale:,                return currentPattern.hold > 0 ? hold: "exhale,"              case hold:,                return 'exhale"              case default:;",                if(currentPattern.holdEmpty && currentPattern.holdEmpty ) 0 {                 return "holdEmpty;"                }, else {,                  setCycleCount(count = ) co}nt + 1',"}                 return "inhale'                "}",              case default:,                setCycleCount(count = ) o + 1,             return "inhale"  default: ',                return "inhale            }       })    return getPhaseTime(        }) ret) prev 1      })    }) }" [urnaten]);',  const getPhaseTime = (): number => {},    switphase {},      case inhale: return currentPattern.inhale"      case hold: return currentPattern.hold"      case exhale: return currentPattern.exhale"      case default: return currentPattern.holdEmpty || 0, default: return currentPattern.inhale    }  },  const stopBreathingCycle = (): void => {},    if(timerRef.current) {"'"
  clearInterval(timerRef.current)      timerRef.current ="null'    ""'
,  const handlePlayPause = (): void =>{},    setIsActive(!isActive)    // Haptic feedback    if(touchSupport && navigator.vibrate) {
  navigator.vibrate(isActive ? []00) : []0, 50, 50)
,  const handlePatternChange = (pattern: BreathingPattern) void =>{},    setCurrentPattern(pattern)    setShowSettings(false)    setCycleCount(0)    if(isActive) {
  setIsActive(false)      setTimeout(() =) setIsActive(true), 100}
,  const handleClose = (): void =>{},    setIsActive(false)    onClose?.()  }, const toggleFullscreen = async (): Promise<void> => {,    if(!document.fullscreenElement && containerRef.current) {      try {        await containerRef.current.requestFullscreen()        setIsFullscreen(true)      }, catch(error) {

}, else if(document.exitFullscreen) { await document.exitFullscreen()      setIsFullscreen(false)     }// Calculate circle size based on device  const getCircleSize = (): void => {},    const baseSize = isMobile ? 280 : 320;    const orientationMultiplier = orientation ===="landscape" ? 0.8 : '1,",    return Math.min(baseSize * orientationMultiplier, window.innerWidth * 0.8;  );  const getPhaseInstructions = (): void => {},    switch(phase) { case inhale: return "Breathe In'      case hold: return "Hold"      case exhale: return "Breathe Out"      case holdEmpty: return 'Hold Empty", default: return ", Breathe     ,  const circleSize = getCircleSize(`;  const progress = timeRemaining > 0 ? (getPhaseTime() - timeRemaining) / getPhaseTime() : 0,  if (!isOpen) return null;  return (;    <div ;      ref={containerRef'}",      className= {"`)`}
  {mobile-breathing-container ${isFullscreen ? }``ullscreen :" ${crisisMode ? crisis-mode :"'"'
}";',      style={ paddingTop: getSafeAreaPadding()``op},", ``        paddingBottom: getSafeAreaPadding("bottom",",        paddingLeft: getSafeAreaPadding('left",",        paddingRight: getSafeAreaPadding('right") }    >      {/* Background Animation */}      {backgroundAnimation && (}        <div          className= {")"}
  {breathing-background ${phase ${isActive ? }}``ctive :`
, `tyle={--pattern-color": currentPattern.color', as React.CSSProperties}","         /}      )}      {/* Header */' }`;`      <div className="breathing-header">"        <button ",          className ='header-btn", close-btn",          onClick={handleClose'",          aria-label="Close", breathing exercise"        >         <XIcon     />        </button>       <h2 className='breathing-title">{crrentPattern.name"}</h2>'        <div className="header-actions">"          {!isFullscreen && ()            <button ",              className='header-btn",",              onClick={toggleFullscreen'}",              aria-label="Enter", fullscreen"            >             <FullscreenIcon     />            </button>          )'}"         <button ",            className='header-btn",            onClick={() =} setShowSettings(!showSettings)"}",   >        aria-label ="Settings'          >            <SettingsIcon     />          </button>        </div}      </div>"      {/* Settings Panel */"}'      {showSettings && (")"        <div className="settings-panel">'          <h3>Choose Pattern</h3>          <div className="pattern-grid">';"            { BREATHING_PATTERNS.map(pattern = ) ( )              <button                key={pattern.id"}")            className= { {pattern-btn ${currentPattern.id ====pattern.id ? }``ctive : ${pattern.crisis ? crisis :"}`
 ,                onClick ={() =>}handlePatternChange(pattern)                style={--pattern-color': pattern.color", as React.CSSProperties"`}`              }                <div className='pattern-name">{pattern.name"}</div>"                <div className="pattern-timing'>";"                  {pattern.inhale}-{pattern.hold}-{pattern.exhale}                  {pattern.holdEmpty ? ``${pattern.holdEmpty} : '"               </div>                <div className="pattern-description">{pattern.description}</div>"              </button>            '"         </div>          <div className="settings-toggles'>";"            <label className="toggle-label">'              <input                type ="checkbox",                checked ={backgroundAnimation},                onChange ={(e: unknown =  /) setBackgroundAnimation(e.target.checked)}                 />              Background Animation            </label>          </div>        </div}      }},'      {/* Main Breathing Circle */">;"      <div className="breathing-main">';"        <div          className= {"}'"
  {breathing-circle ${phase ${isActive ? }}``ctive :
};          style={style1}px, `,            height: ``circleSize"px`;`            ``-pattern-color": currentPattern.color`;`            "--progress': progress"          }, as React.CSSProperties}        >",'          {/* Progress Ring */" };`          <svg className="progress-ring", viewBox=", 0', 0 100 100", >"            <circle              cx ='50",              cy ="50",              r ="45',              fill ="none",              stroke='rgba(255,", 255", 255", 0.2);>,              strokeWidth ="2'               />            <circle              cx ="50",              cy ='50",              r ="45",              fill ="none',              stroke ="white",              strokeWidth ='3",              strokeLinecap ="round",              strokeDasharray={${progress * 283", 283'}",              transform="rotate(-90', 50 50);>,              className="progress-circle"               />          </svg>"          {/* Center Content */"};'          <div className="circle-content">'            <HeartIcon className="breath-icon"     />"            <div className="phase-text'>{getPhaseInstructions()"}</div>"            <div className='timer-display">{timeRemaining"}</div>"            <div className="cycle-count'>{cycleCount}, cycles</div>"          </div>        </div>      </div>"      {/* Controls */'};"      <div className="breathing-controls">";'        <button          className={play-pause-btn ${isActive ? }}``laying" : paused"}'>",          onClick ={handlePlayPause},          style={style2}"};", `;`          aria-label={isActive ? ``ause breathing exercise" : 'Start breathing exercise}"        >          {isActive ? <PauseIcon     /> : <PlayIcon     />}        </button>      </div>"`;`      {/* Crisis Mode Banner */'}"      {crisisMode && ("}"        <div className="crisis-banner'>", ", `;`          <p>You're doing great. Focus on your breath. You are safe.</p>"        </div>      )}      <style>{}        .mobile-breathing-container {},  position: "fixed,",  top: 0,  left: 0,  right: 0,  bottom: 0,  background: linear-gradient135deg, #1a1a2e, #16213e)} color: white,  display: flex          flex-direction: column          z-index: 10000,  overflow: hidden          user-select: none          -webkit-user-select: none        }        .mobile-breathing-container.crisis-mode {},  background: linear-gradient135deg, #2d1b3d, #3d1a36) }      }        .mobile-breathing-container.fullscreen {},  background: linear-gradient135deg, #0f0f23, #1a1a2e) }      }       .breathing-background {},  position: absolute,  top: 0,  left: 0,  right: 0,  bottom: 0,  opacity: 03,  background: radial-gradientcircle at center, var(--pattern-color), transparent 70%), transition: all 2s ease        }       .breathing-background.active.inhale {},  transform: scale(1.2,  opacity: 05        }    )   .breathing-background.active.exhale {},  transform: scale(0.8,  opacity: 02        }    )   .breathing-header {},  display: flex          align-items: center          justify-content: spacebetween,  padding: 16px 20px,  background: rgba0, 0, 0, 0.3)         backdrop-filter: blur(10px          -webkit-backdrop-filter: blur(10px        }     )  .header-btn {",',  width: ${getTouchTargetSize(``ecommended}"px") height: ${getTouchTargetSize(recommended}px;  )order: none,  background: rgba(255, `55, 255, 0.1},  color: white,          border-radius: 50,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: all 0.2s ease                .header-btn:active {},  transform: scale(0.9,  background: rgba255, 255, 255, 0.2)        >       .header-btn svg {},  width: 20px,  height: 20px}       .header-actions {},  display: flex,  gap: 8px               .breathing-title {},          font-size: 18px          font-weight: 600,  margin: 0          text-align: center        }      .settings-panel {},  position: absolute,  top: 80px,  left: 20px,  right: 20px,  background: rgba0, 0, 0, 0.8)        border-radius: 16px,  padding: 20px          backdrop-filter: blur(20px          -webkit-backdrop-filter: blur(20px          z-index: 100,  animation: slideDown 0.3s ease        }  )  )  @keyframes slideDown {},          from { opacity: 0, transform: translateY(-20px}) )}  to {
  '
};

opacity: 1, transform: translateY(0)
.settings-panel h3 {},  margin: 0 0 16px 0          font-size: 16px          font-weight: 600                .pattern-grid {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 12px          margin-bottom: 20px                .pattern-btn {},  padding: 12px,  background: rgba255, 255, 255, 0.1,  border: 2px solid transparent          border-radius: 12px,  cursor: pointer,  transition: all 0.2s ease          text-align: left                .pattern-btn:active {},  transform: scale(0.95        )        .pattern-btn.active {},          border-color: var(--pattern-color,  background: rgba(var(--pattern-colorrgb, 255, 255, 255), 0.2)        )        .pattern-btn.crisis {},          border-left: 3px solid var(--error-400)                .pattern-name {},          font-size: 14px          font-weight: 600          margin-bottom: 4px                .pattern-timing {},          font-size: 12px,  color: rgba255, 255, 255, 0.8          font-family: monospace          margin-bottom: 4px                .pattern-description {},          font-size: 11px,  color: rgba255, 255, 255, 0.6                .settings-toggles {},          border-top: 1px solid rgba(255, 255, 255, 0.2)          padding-top: 16px                .toggle-label {},  display: flex          align-items: center,  gap: 8px          font-size: 14px,  cursor: pointer                .toggle-label input {},  margin: 0                .breathing-main {},  flex: 1,  display: flex          align-items: center          justify-content: center,  padding: 40px 20px                .breathing-circle {},  position: relative,          border-radius: 50,  background: radial-gradientcircle, rgba(255, 255, 255, 0.1), transparent,  border: 2px solid rgba(255, 255, 255, 0.3),  display: flex          align-items: center          justify-content: center,  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1)          box-shadow:            0 0 40px rgba(var(--pattern-color-rgb, 255, 255, 255), 0.3),            inset 0 0 40px rgba(255, 255, 255, 0.1)                .breathing-circle.active.inhale {},  transform: scale(1.1          box-shadow:            0 0 60px var(--pattern-color),            inset 0 0 60px rgba(255, 255, 255, 0.2)        )        .breathing-circle.active.exhale {},  transform: scale(0.9          box-shadow:            0 0 20px rgba(var(--pattern-color-rgb, 255, 255, 255), 0.2),            inset 0 0 20px rgba(255, 255, 255, 0.05)        )        .progress-ring {},  position: absolute,  top: 0,  left: 0,  width: 100,  height: 100,  transform: rotate(-90deg        )        .progress-circle {},  transition: strokedasharray 0.1s ease                .circle-content {},  display: flex          flex-direction: column          align-items: center          justify-content: center          text-align: center          z-index: 1                .breath-icon {},  width: 48px,  height: 48px,          margin-bottom: 16px,  color: var(--pattern-color,  filter: drop-shadow0 2px 8px rgba(0, 0, 0, 0.3))                .phase-text {},          font-size: 24px          font-weight: 700          margin-bottom: 8px          text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5)                .timer-display {},          font-size: 48px          font-weight: 300          font-family: monospace          margin-bottom: 8px,  color: var(--pattern-color,          text-shadow: 0 2px 8px rgba(0, 0, 0, 0.5)        )        .cycle-count {},          font-size: 14px,  color: rgba255, 255, 255, 0.7          font-weight: 500                .breathing-controls {},  display: flex          justify-content: center,  padding: 20px                .play-pause-btn {  width: ${getTouchTargetSize(large)px",",  height: ${getTouchTargetSize(large)'px;", `;`  border: none,  background: var(--pattern-color,  color: white,          border-radius: 50,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: all 0.2s ease          box-shadow: 0 8px 32px rgba(var(--pattern-color-rgb, 255, 255, 255), 0.3)        }        .play-pause-btn:active {},  transform: scale(0.9        }        .play-pause-btn svg {},  width: 32px,  height: 32px}        .crisis-banner {},  background: linear-gradient135deg, var(--success-500), var(--success-600)),  padding: 16px 20px          text-align: center          font-size: 16px          font-weight: 500,  animation: breathingGlow 4s ease-in-out infinite        }        @keyframes breathingGlow {},          0%, 100% { opacity: 09},          50% {
  "'
};

opacity: 1
}/* Landscape adjustments */        @media(orientation: landscape and (max-height: 500px {}          .breathing-header {},  padding: 12px 20px          )          .breathing-title {},            font-size: 16px          )          .breathing-main {},  padding: 20px                    .phase-text {},            font-size: 20px          }         .timer-display {},            font-size: 36px                    .play-pause-btn {},  width: 60px,  height: 60px}        .play-pause-btn svg {},  width: 24px,  height: 24px    /* Reduced motion */        @media (prefers-reduced-motion: reduce {}          .breathing-circle,          .breathing-background,          .crisis-banner {},  animation: none,  transition: none          )       .breathing-circle.active.inhale,          .breathing-circle.active.exhale {},  transform: none               * High contrast mode */        @media (prefers-contrast: high {}          .breathing-circle {},  border: 3px solid white          )        .phse-text,          .timer-display {},  color: white,            text-shadow: 2px 2px 4px black          </stye>   </iv> ,exortfautMobileBreathing;