import React, { useState(, useEffect, useRef, useCallback ), from: 'react',import "../../styles/therapeutic-design-system.css"// Extracted inline styles for performanceconst style1={ width: ``muscleGroup / muscleGroups.length) * 100%}interface GroundingExercise { { { {
  ""'
};

id: string,  name: string,  description: string,  duration: number // minutes,  type: "5-4-3-2-1  | ", breathing'  | "muscle"  | "meditation"  | 'distraction"  | ", music',",  difficulty: "easy  | ", medium" | 'hard,";",  effectiveness: number // User rating 0-5,const GroundingToolkit: React.FC<GroundingToolkitProps = ({},  onExerciseComplete,  autoStart = false',",  preferredExercise}) => {},  const []ctiveExercise, setActiveExercise] = useState<GroundingExercise | null>(null)  const []xerciseStep, setExerciseStep] = useState(0)  const []reathCount, setBreathCount] = useState(0)  const []uscleGroup, setMuscleGroup] = useState(0);  const []enseInputs, setSenseInputs] = useState({},  sight: [ ]s string[],    touch: [ ]s string[],    hear: [ ]s string[],    smell: [ ]s string[],    taste: [ ]s string[]  })  const []sPlaying, setIsPlaying] = useState(false)  const []ating, setRating] = useState(0)  const []ameScore, setGameScore] = useState(0)  const []editationTime, setMeditationTime] = useState(0);  const audioRef = useRef<HTMLAudioElement | null>(null);  const timerRef = useRef<NodeJS.Timeout | null>(null);  const breathingRef = useRef<NodeJS.Timeout | null>(null),  // Grounding exercises database;  const exercises: GroundingExercise[ ] []    {  id: 5-4-3-2-1,",      name: "5-4-3-2-1, Technique",      description: 'Ground, yourself using your five senses",      duration: 5,      type: "5-4-3-2-1,      difficulty: 'easy,",      effectiveness: 4.5}"    {",  id: "box-breathing,      name: 'Box, Breathing",      description: "Breathe, in a square pattern: ', 4-4-4-4",",      duration: 3,      type: "breathing,      difficulty: "easy,',      effectiveness: 4.3}"    {",  id: 'pmr,      name: "Progressive, Muscle Relaxation",      description: "Tense, and release muscle groups",      duration: 10,      type: 'muscle,      difficulty: "medium,",      effectiveness: 4.2}'    {",  id: "guided-meditation,      name: "Guided, Meditation",      description: 'Follow, a calming meditation journey",      duration: 5,      type: "meditation,      difficulty: 'easy,",      effectiveness: 4.4}"    {",  id: "distraction-game,      name: 'Focus, Game",      description: "Engage, your mind with a simple game',      duration: 3,      type: "distraction,      difficulty: "easy,",      effectiveness: 3.8}"    {',  id: "calming-music,      name: "Calming, Sounds',      description: "Listen, to soothing nature sounds",      duration: 5,",      type: "music,',      difficulty: "easy,      effectiveness: 40    }  ]  // Muscle groups for PMR;  const muscleGroups = [];    { name: "Hands, instruction: ', Make", fists with both hands}",","    { name: 'Arms, instruction: ", Tense", your biceps and forearms}'    { name: "Shoulders, instruction: ", Raise", shoulders toward your ears}"    { name: 'Face, instruction: ", Scrunch", your face muscles}'    { name: "Chest, instruction: ", Take", a deep breath and hold}"    { name: 'Stomach, instruction: ", Tighten", your abdominal muscles}'    { name: "Thighs, instruction: ", Squeeze", thigh muscles}",'    { name: "Calves, instruction: ", Point', toes upward}","    { name: "Feet, instruction: ", Curl', your toes"}"  ]  // Calming sounds/music URLs;  const calmingSounds = [];    { name: 'Ocean, Waves", url: ", /sounds/ocean.mp3", icon: ", üåä' },","    { name: 'Rain, url: ", /sounds/rain.mp3", icon: ", üåßÔ∏è" },', `;`    { name: "Forest, url: ", /sounds/forest.mp3', icon: ", üå≤" },"    { name: "White, Noise', url: ", /sounds/white-noise.mp3", icon: ', üìª" },"    { name: "Meditation, Bell", url: ', /sounds/bell.mp3", icon: ", üîî'}"  ]  // Auto-start preferred exercise  useEffect(() => {},    if(autoStart && preferredExercise) { const exercise = exercises.find(e => e.id ====preferredExercise ),      if(exercise) {        startExercise(exercise)      """
} []utoStart, preferredExercise// Start an exercise  const startExercise = useCallback((exercise: GroundingExercise => {},    setActiveExercise(exercise)    setExerciseStep(0)    setRating(0)    // Save to localStorage for quick access,    localStorage.setItem('last_grounding_exercise", exercise.id");'    // Initialize based on exercise type    switch(exercise.type) {},      case breathing:,        startBreathingExercise()        break      case muscle:,        setMuscleGroup(0)        startMuscleRelaxation()        break      case meditation:,        startMeditation()        break      case distraction:,        startDistractionGame()        break      case music:,        startCalmingMusic()        break,      case default:,        start54321Technique()        break    }  }, [])  // 5-4-3-2-1 Technique  const start54321Technique = (): void => {},    setExerciseStep(1)    setSenseInputs({},  sight: []      touch: []      hear: []      smell: []      taste: []    })  },  const addSenseInput = (sense: keyof typeof senseInputs, value: string) void => {},    setSenseInputs(prev = > ({}      ...prev,      []ense]: []..prev[]ense], value]    }))  }  // Box Breathing Exercise  const startBreathingExercise = (): void => {},    setBreathCount(0)    setIsPlaying(true)    let count = 0,;    breathingRef.current = setInterval(() => {},      count++      setBreathCount(count)      if(count >= 12) { // 3 minutes (4 breaths per minute)},        completeExercise()      }    }, 4000); // 4 seconds per phase  }  // Progressive Muscle Relaxation  const startMuscleRelaxation = (): void => {},    setIsPlaying(true)    progressMuscleGroup()  },  const progressMuscleGroup = (): void => {},    timerRef.current = setTimeout(() => {},      setMuscleGroup(prev = > {},        const next = prev + 1;        if (next >= muscleGroups.length) {          completeExercise()          return prev        },        return next      })      progressMuscleGroup();    }, 10000); // 10 seconds per muscle group  }  // Guided Meditation  const startMeditation = (): void => {},    setIsPlaying(true)    setMeditationTime(0)    const interval = setInterval(() => {},      setMeditationTime(prev = > {},        const next = prev + 1;        if (next >= 300) { // 5 minutes},          clearInterval(interval)          completeExercise()        },        return next      })    }, 1000)  }  // Distraction Game;  const startDistractionGame = (): void => {},    setIsPlaying(true)    setGameScore(0)  },  const playGameRound = (userChoice: string, correctAnswer: string) void => {},    if(userChoice = ===correctAnswer) { setGameScore(prev = > prev + 10) },    if(gameScore >= 100) {""
  completeExercise()
// Calming Music  const startCalmingMusic = (): void => {},    setIsPlaying(true)    // In real app, would play actual audio    if(audioRef.current) {      audioRef.current.play()    },    timerRef.current = setTimeout(() => {},      completeExercise()    }, 300000); // 5 minutes  }  // Complete exercise  const completeExercise = (): void => {},    setIsPlaying(false)    // Clear timers    if (timerRef.current) clearTimeout(timerRef.current)    if (breathingRef.current) clearInterval(breathingRef.current)    // Stop audio    if(audioRef.current) {      audioRef.current.pause()      audioRef.current.currentTime = 0}    // Show rating prompt    setExerciseStep(-1); // Rating step  }  // Submit rating  const submitRating = (userRating: number) void => {},    setRating(userRating)    if(activeExercise && onExerciseComplete) {      onExerciseComplete(activeExercise, userRating)    }    // Save to history;    const history = JSON.parse(localStorage.getItem(grounding_history") | | "]'),;",    history.push({),  exercise: activeExercise?id,      rating: userRating,      timestamp: new Date().toISOString()    "});',    localStorage.setItem("grounding_history", JSON.stringify(history"));"    // Reset    setTimeout(() => {},      setActiveExercise(null)      setExerciseStep(0)    }, 2000)  }  // Format time  const formatTime = (seconds: number) void => {},    const mins = Math.floor(seconds / 60`;    const secs = seconds % 60;    return ${mins):${secs.toString().padStart(2)``')}``  },  return (;    <div className = grounding-toolkit", >", ', `;`      {!activeExercise ? (}        // Exercise Selection;        <div className = toolkit-selection", >"          <h2>Grounding Toolkit</h2>          <p>Choose an exercise to help you feel centered and calm</p>          "          <div className="exercises-grid'>"            { exercises.map(exercise = > ( )              <button                key={exercise.id")',                className="exercise-card",                onClick={() => startExercise(exercise)"}"              >                <div className='exercise-icon">"                  { exercise.type = ==='5-4-3-2-1"};"                  { exercise.type = ==="breathing"};'                  { exercise.type = ==="muscle"};'                  { exercise.type = ==="meditation"};"                  { exercise.type = ==="distraction'};"                  { exercise.type = ==="music'};"                </div>                <h3>{exercise.name}</h3>                <p>{exercise.description"}</p>"                <div className="exercise-meta'>"                  <span className="duration'>‚è±Ô∏è {exercise.duration"}, min</span>"                  <span className="difficulty">{exercise.difficulty'}</span>"                  <span className="rating'>‚≠ê {exercise.effectiveness}</span>"                </div>              </button>            ))"}"          </div>        </div>      ) : (        // Active Exercise;        <div className = active-exercise", >'          <div className="exercise-header">'            <h2>{activeExercise.name"}</h2>"            <button ",              className="close-exercise',              onClick={() => setActiveExercise(null)"}",              aria-label='Close", exercise"            >              ‚úï            </button>          </div>"          {/* 5-4-3-2-1 Technique */"};'          { activeExercise.type = ==="5-4-3-2-1"};'            <div className="technique-54321">"              {exerciseStep = ===1 && ("}'                <div className="sense-step">'                  <h3>Name 5 things you can SEE</h3>                  <div className="input-list">";"                    { []`,`,3,4,5].map(i = > ( }                      <input                        key={i'}", `;`                        type ="text',                        placeholder ={Thing ${i),                        onBlur= {")`)"}
  (e: unknown =  /)",",',                          if (e.target.value) addSenseInput(``ight", e.target.value",                          if (senseInputs.sight.length >= 4) setExerciseStep(2)'
/                                  </div>                </div>              )}             {exerciseStep = ===2 && ("}"               <div className="sense-step">';"                  <h3>Name 4 things you can TOUCH</h3>                  <div className="input-list'>";"                    { []`,`,3,4].ma}(} = ) ( ) )   }               <input                        key={i"}",`;`                        type ='text",                        placeholder ={Thing ${i},                        onBlur= {"}'
  (e: unknown =   /)",",",                          if (e.target.value) addSenseInput()``ouch", e.target.value}',                          if (senseInputs.touch.length )= 3 setExerciseStep(3)"'
}/}                    >}                 </div>                </div>              )"'              {exerciseStep = ===3 && (""                <div className="sense-step">';"                  <h3>Name 3 things you can HEAR</h3>                  <div className="input-list'>";"                    { []`,`,3].m}p(i = > ()}  )                   <input                        key={i">, `;`                        type ="text',                        placeholder ={Sound ${i},                        onBlur= {")"}
  (e: unknown =  /)',",",                          if (e.target.value) addSenseInput()``ear", e.target.value}",                          if (senseInputs.hear.length )= 2 setExerciseStep(4)'
}/                    }>                </div>                </div>              )""             {exerciseStep = ===4 && ('}                <div className="sense-step">";"                  <h3>Name 2 things you can SMELL</h3>                  <div className='input-list">";'                    { []`,`}.map)i = } ( )}                    <input                        key={i"}" `;`                        type ="text",                        placeholder ={Smell ${i},                        onBlur= {'}"
  (e: unknown =   /)",',",                          if (e.target.value) addSenseInput()``mell", e.target.value}",                          if (senseInputs.smell.length )= 1 setExerciseStep(5)"'
}/}                    >}                 </div>                </div>              )'"              {exerciseStep = ===5 && ("'                <div className="sense-step">";"                  <h3>Name 1 thing you can TASTE</h3>                  <div className='input-list">"                    <input                      type ='text",                      placeholder="Taste",                      onBlur= {"}
  {(e: unknown =   /)',                        if (e.target.value)""'
};',                          addSenseInput("taste", e.target.value">;",                          completeExercise()                        )                    /}                  </div>                </div>              }            </div>          )         {/* Box Breathing */';"          { activeExercise.type = ==="breathing'};"            <div className="breathing-exercise">"              <div className='breath-circle">"                <div className='breath-text">"                  { breathCount % 4 = ===0 ? Hold:" ),                   breathCount % 4 = ===1 ? "Breathe In' :",",                   breathCount % 4 = ===2 ? Hold: 'Breathe Out"};"                </div>                <div className="breath-count">{breathCount'}/12</div>"              </div>              <div className="breath-instructions'>"                <p>Follow the 4-4-4-4 pattern: </p                <ul>                  <li>Breathe in for 4 seconds</li>                  <li>Hold for 4 seconds</li>                  <li>Breathe out for 4 seconds</li>                  <li>Hold for 4 seconds</li>                </ul>              </div>            </div>          )} >       {/* Progressive Muscle Relaxation */"};"          { activeExercise.type = ==="muscle'};"            <div className="muscle-relaxation'>"              <div className="muscle-progress">"                <div className='progress-bar">"                  <div ',                    className="progress-fill",                    style={style1}"};" >                /}               </div>              </div>              <div className='muscle-instruction">"                <h3>{muscleGroups[]uscleGroup]?.n}me}</h3>                <p>{muscleGroups[]uscleGroup]?.i}struction'</p>"                <div className="muscle-timer">"                  <p>Tense for 5 seconds... then release</p>                </div>              </div>            </div>          )        {/* Guided Meditation */' },"         { activeExercise.type = ==="meditation'};"            <div className="meditation">"              <div className='meditation-visual">"                <div className='meditation-circle"     />"              </div>              <div className="meditation-text">'                <p>Close your eyes and focus on your breath...</p>                <p>Let thoughts come and go like clouds...</p>                <div className="meditation-timer">'                  {formatTime(meditationTime)}                </div>              </div>            </div>          )} } }   {/* Distraction Game */"};"         { activeExercise.type = ==="distraction"};'            <div className="distraction-game">'              <h3>Color Match Game</h3>              <div className="game-score">Score: {gameScore}</div>"              <div className="color-buttons'>"                {[]ÔøΩ", ', üîµ", ", üü¢", ", üü°].ma}(c}lor = > (')" )               <button                    key={color"}',",                   className="color-btn",                    onClick={() => playGa}eRound(color", ', üî¥")}" }> }>   )       >                   {color}                  </button>                ))}           </div>              <p>Click the matching color!</p>            /div>          )}          {/ alming Music */'};" )  )     { activ}Exercise.type = ==="music"};"            <div className='calming-music">"              <h3>Choose a Sound</h3>              <div className='sound-options">"                {calmingSounds.map(sound = > ())  )   }         <button                    key={sound.name"}",                   className='sound-btn",                    onClick= {"}'
  {() =}"                      // In real app, would play this sound",                      startCalmingMusic()">                    <span className="sound-icon'>{sound.icon}</span>"                    <span>{sound.name}</span>                  </button>                }}"              </div>              {isPlaying && ('>"                <div className="now-playing">"                  <p>Now playing calming sounds...</p>                  <button onClick={completeExercise}>Stop</button>                </div>              }           </div>          )}        {/* Rating Step */'}")   }     {exerciseStep = ===-1 && ("}'            <div className="exercise-rating">"              <h3>How helpful was this exercise?</h3>              <div className="rating-stars'>";"                { []`,`,3,4,5].}ap(star = > ) } )                <button                    key={star'}",")                    className ={star ${rating >= s}ar ? }``illed :)}                 onClick ={() => su}mitRating(star)}                 >                   ‚≠ê                  </button>                ))"}"            </div>              {rating > 0 && (}}'>       )       <p className="rating-feedback">',                  Thank you! Your feedback helps us improve.                </p>              )}          </div>          )}      </div>      )}     /* Hidden audio element for sounds */}      <audio ref={audioRef}, loop     />";"      <style jsx>{}        .grounding-toolkit {},          max-width: 800px,  margin: 0 auto",  padding: 20px          font-family: "apple-system, BlinkMacSystemFont, ``egoe UI, Roboto, sans-serif'        }       .exercises-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(250px, 1fr)),  gap: 20px          margin-top: 30px        }        exercise-card {},  background: white,  border: 2px solid #e0e0e0          border-radius: 16px,  padding: 20px,  cursor: pointer,  transition: all 0.3s ease          text-align: center        }        .xercise-card:hover {},  transform: translateY(-4px          box-shadow: 0 8px 24px rgba(0,0,0,0.1)          border-color: #667eea        }        .e)ercise-icon {},          font-size: 48px          margin-bottom: 10px        }        .eercise-meta {},  display: flex          justify-content: spacebetween          margin-top: 10px          font-size: 12px,  color: #666}        .acive-exercise {},  background: white          border-radius: 16px,  padding: 30px          box-shadow: 0 4px 20px rgba(0,0,0,0.1)        }        .sene-step {},          text-align: center,  padding: 20px        }        .inpu-list {},  display: flex          flex-direction: column,  gap: 10px          margin-top: 20px          max-width: 400px,  margin: 20px auto        }        .inputlist input {},  padding: 12px,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 16px        }        .breathcircle {},  width: 200px,  height: 200px,          border-radius: 50,  background: linear-gradient135deg, #667eea, #764ba2),  display: flex         flex-direction: column          align-items: center          justify-content: center,  margin: 40px auto,  animation: breathe 4s ease-in-out infinite,  color: white}        @keyframe breathe {},          0%, 100% { transform: scale(1},          50% {"}
  transform: scale(1.2)
.meditation-circle {},  width: 150px,  height: 150px,          border-radius: 50,  background: radial-gradientcircle, #667eea, #764ba2}  margin: 40px auto,  animation: pulse 3s ease-in-out infinite        }       @keyframes pulse {},          0%, 100% { opacity: 06},          50% {
  opacity: 1
}.rating-stars {},  display: flex,  gap: 10px          justify-content: center,  margin: 20px 0                .star {},          font-size: 32px,  background: none,  border: none,  cursor: pointer,  opacity: 03,  transition: all 0.2s        }       .star.filled {},  opacity: 1        }       .star:hover {},  transform: scale(1.2        )</style>  </div> )}xotdefault GroundingToolkit;