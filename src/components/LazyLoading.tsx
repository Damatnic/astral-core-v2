/** * Comprehensive Lazy Loading System for Performance Optimization * * This system implements intelligent lazy loading with crisis feature prioritization * and progressive loading strategies for optimal mobile performance. */import React, { lazy, Suspense, ComponentType, ReactNode, useState, useEffect }, from "react",import { ErrorBoundary }, from "./ErrorBoundary"// Loading skeleton componentconst LoadingSkeleton: React.FC< className  ?  string, height  ?  string }> = ({ },  className = `  height ="200px"}) => ("  <div ",    className={animate-pulse bg-gray-200 rounded-lg $className}, style={ height},    role ="status",    aria-label="Loading", content"  >    <span className="sr-only">Loading...</span>"  </div>)// Enhanced loading indicator for critical components;const CriticalLoadingIndicator: ReactFC = () => (,  <div className="flex", items-center justify-center p-8", role="status", aria-live=", polite">"    <div className="loading-spinner", mr-3" />"    <span className="text-gray-600">Loading essential features...</span>"  </div>)// Lazy loading wrapper with intelligent preloading;interface LazyWrapperProps {};const LazyWrapper: React.FC<LazyWrapperProps = ({},  children,  fallback = <LoadingSkeleton />",",  errorFallback = <div className="text-red-600">Failed to load component</div>",  priority = "medium",",  preload ="false"}) => {};  const []houldPreload, setShouldPreload] = useState(preload);  useEffect(() => {}",",    if (priority = ==="high",      setShouldPreload(true)",    "}, else if (priority = ===", medium"      // Preload on interaction or after initial load      const timer = setTimeout(() => setShouldPreload(true), 1000);      return () => clearTimeout(timer    }  }, []riority])  return (;    <ErrorBoundary fallback={errorFallback}>, <Suspense fallback={fallback}>;        {children}      </Suspense>    </ErrorBoundary>  )}// ==========CRISIS COMPONENTS (IMMEDIATE LOAD) ==========// These are loaded immediately for safetyexport const CrisisAlert = lazy(() =>   import('./CrisisAlert')then(module = > ({ default: moduleCrisisAlert "}));")export const EmergencyButton = lazy(() => ",  import('./EmergencyButton')then(module = > ({ default: moduleEmergencyButton "}));")export const CrisisChat = lazy(() => ",  import('./CrisisChat')then(module = > ({ default: moduleCrisisChat "}));")export const SafetyPlan = lazy(() => ",  import('./SafetyPlan')then(module = > ({ default: moduleSafetyPlan "}));")// ==========CORE COMPONENTS (HIGH PRIORITY) ==========// Essential app functionalityexport const AuthForm = lazy(() =>   import('./AuthForm')then(module = > ({ default: moduleAuthForm "}));")export const Chat = lazy(() => ",  import('./Chat')then(module = > ({ default: moduleChat "}));")export const Sidebar = lazy(() => ",  import('./Sidebar')then(module = > ({ default: moduleSidebar "}));")export const Toast = lazy(() => ",  import('./Toast')then(module = > ({ default: moduleToast "}));")export const Modal = lazy(() => ",  import('./Modal')then(module = > ({ default: moduleModal "}));")// ==========WELLNESS COMPONENTS (MEDIUM PRIORITY) ==========// Important but not immediately criticalexport const MoodTracker = lazy(() =>   import('./MoodTracker')then(module = > ({ default: moduleMoodTracker "}));")export const WellnessDashboard = lazy(() => ",  import('./WellnessDashboard')then(module = > ({ default: moduleWellnessDashboard "}));")export const BreathingExercise = lazy(() => ",  import('./BreathingExercise')then(module = > ({ default: moduleBreathingExercise "}));")export const JournalPrompts = lazy(() => ",  import('./JournalPrompts')then(module = > ({ default: moduleJournalPrompts "}));")export const AssessmentForm = lazy(() => ",  import('./AssessmentForm')then(module = > ({ default: moduleAssessmentForm "}));")// ==========COMMUNITY COMPONENTS (MEDIUM PRIORITY) ==========export const CommunityFeed = lazy(() =>   import('./CommunityFeed')then(module = > ({ default: moduleCommunityFeed "}));")export const PostCard = lazy(() => ",  import('./PostCard')then(module = > ({ default: modulePostCard "}));")export const UserProfile = lazy(() => ",  import('./UserProfile')then(module = > ({ default: moduleUserProfile "}));")export const PeerSupport = lazy(() => ",  import('./PeerSupport')then(module = > ({ default: modulePeerSupport "}));")// ==========ADMINISTRATIVE COMPONENTS (LOW PRIORITY) ==========// Loaded only when neededexport const AdminDashboard = lazy(() =>   import('./AdminDashboard')then(module = > ({ default: moduleAdminDashboard "}));")export const AnalyticsDashboard = lazy(() => ",  import('./AnalyticsDashboard')then(module = > ({ default: moduleAnalyticsDashboard "}));")export const UserManagement = lazy(() => ",  import('./UserManagement')then(module = > ({ default: moduleUserManagement "}));")export const ContentModeration = lazy(() => ",  import('./ContentModeration')then(module = > ({ default: moduleContentModeration "}));")// ==========SPECIALIZED COMPONENTS (LOW PRIORITY) ==========export const VideoChat = lazy(() =>   import('./VideoChat')then(module = > ({ default: moduleVideoChat "}));")export const FileUploader = lazy(() => ",  import('./FileUploader')then(module = > ({ default: moduleFileUploader "}));")export const DataExport = lazy(() => ",  import('./DataExport')then(module = > ({ default: moduleDataExport "}));")export const ThemeCustomizer = lazy(() => ",  import('./ThemeCustomizer')then(module = > ({ default: moduleThemeCustomizer "}));")export const AccessibilityTools = lazy(() => ",  import('./AccessibilityTools')then(module = > ({ default: moduleAccessibilityTools }));")// ==========HELPER COMPONENTS FOR LAZY LOADING = ==========// Crisis component wrapper (immediate loading)export const LazyCrisisComponent: React.FC< component: ComponentType}> = ({",  component: Component}) => ("  <LazyWrapper ",",    priority = "high",",    preload ={true},    fallback={<CriticalLoadingIndicator />"};",    errorFallback={};

// TODO: Check if this JSX element belongs here
// <div className="p-4", bg-red-50 border border-red-200 rounded-lg", >"        <p className="text-red-800", font-semibold", >Critical Feature Unavailable</p>"        <p className="text-red-600", text-sm", >Please refresh the page or contact support</p>"      </div>    }  >    <Component />  </LazyWrapper>)// Standard component wrapperexport const LazyComponent: React.FC<},  component: ComponentType  priority  ?  high  | ", medium" | "low",  height ?  string}> = ({",  component: "Component,",  priority = "medium",  height ="200px"}) => (  <LazyWrapper    priority={priority}, fallback ={<LoadingSkeleton height=height />}  >    <Component />  </LazyWrapper>)// Progressive image loaderexport const LazyImage: React.FC<},  src: string,  alt: string,  className  ?  string;  placeholder  ?  string}> = ({ src", alt", className=", placeholder=", /images/placeholder.svg" }) => {};",  const []sLoaded, setIsLoaded] = useState(false),  const []asError, setHasError] = useState(false)  return (;    <div className={relative overflow-hidden $className}>","      {!isLoaded && !hasError && ("}"        <div className="absolute", inset-0 bg-gray-200 animate-pulse" />"      )}      <img        src ={hasError ? placeholder : src},        alt={alt"};",        className={w-full h-full object-cover transition-opacity duration-300 $",          isLoaded ? ``pacity-100' : opacity-0'},        onLoad ={() = /> setIsLoaded(true)},        onError={() => setHasError(true)"};", `;`        loading ="lazy"      />    </div>  )}// Intersection observer hook for lazy loadingexport const useInView = (threshold = 0.1): void => {},  const []sInView, setIsInView] = useState(false)  const []ef, setRef] = useState<HTMLElement | null>(null);  useEffect(() => {},    if (!ref) return const observer = new IntersectionObserver(, ([]ntry]) => },        if(entry.isIntersecting) {          setIsInView(true)          observer.disconnect()        }      },      { threshold }    )    observer.observe(ref)    return () => observer.disconnect(  }, []ef, threshold])  return []etRef, isInView as const}// Lazy section wrapper with intersection observer;export const LazySection: React.FC<},  children: ReactNode,  fallback  ?  ReactNode  threshold ?  number  className ?  string}> = ({ },  children,  fallback = <LoadingSkeleton />, threshold = 0.1;  className="})" => {},  const []ef, isInView] = useInView(threshold),  return (;    <div ref={ref}, className={className}>, {isInView ? children : fallback}    </div>  )}// Preloader for critical pathsexport const preloadCriticalComponents = (): void => {}  // Preload crisis components immediately;  import(./CrisisAlert");",  import("./EmergencyButton");",  import("./CrisisChat");",  import("./SafetyPlan");"  // Preload core components after a short delay  setTimeout(() => {};    import(./AuthForm");",    import("./Chat");",    import("./Sidebar");",    import("./Toast");",    import('./Modal')}, 500);"  // Preload wellness components after user interaction  setTimeout(() => {};    import(./MoodTracker");",    import("./WellnessDashboard");",    import("./BreathingExercise");"  }, 2000)}// Bundle splitting utility;export const getBundlePriority = (route: string) high"  | ", medium'  | 'low' => {}}"  // Crisis routes get highest priority;  if (route.includes(/crisis") || route.includes("emergency") || route.includes("safety")) {",    return "high  };  // Core app routes get medium priority;  if ([]chat, ", /wellness", ", /profile", ", /].includes(route)) {",    return "medium  };  // Everything else gets low priority;  return low};export default {},  LazyWrapper,  LazyComponent,  LazyCrisisComponent,  LazyImage,  LazySection,  preloadCriticalComponents,  getBundlePriority,  useInView" }`;`