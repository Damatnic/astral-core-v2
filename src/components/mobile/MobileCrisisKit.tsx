/** * Mobile Crisis Kit - Complete Emergency Response System * CRITICAL: Comprehensive crisis detection and response for mobile devices * Features: Shake detection, volume button SOS, voice activation, emergency protocols */import React, { useEffect, useState, useRef, useCallback }, from "react",import { hapticManager, TouchGestureRecognizer }, from "../../utils/touchOptimization"// Crisis detection typesexport interface CrisisEvent {type: "shake  | ", volume-sos'  | 'voice-activation'  | 'panic-button" | "pattern-tap",  intensity: number,  timestamp: number  location  ?  GeolocationPosition,  confidence: number  metadata  ?  Record<string, any>}};  level: "low  | ", medium'  | 'high" | "critical",  actions: CrisisAction[,]  resources: CrisisResource[,]  contacts: EmergencyContact[,]  escalationPath: string[]},export interface CrisisAction {"},export interface CrisisResource {id: string,  title: "string,",  type: "hotline  | ", text'  | 'chat'  | 'app'  | 'website" | "location,",  contact: string,  availability: string,  description: string}}// Crisis detection configurationconst CRISIS_CONFIG={},  shake: {  threshold: 15,",    duration: 1000,    requiredShakes: 3,    cooldown: 5000  },  volumeSOS: {},  pattern: [], 1, 3], // 3 quick, 1 pause, 3 quick,  timeWindow: 5000,    cooldown: 10000  },  voiceActivation: {  keywords: []elp me, ", crisis", ", emergency", ", panic", ", need help],",",    confidence: 07,    timeout: 30000};  patternTap: {},  pattern: [], 2, 3], // 3 taps, pause, 2 taps, pause, 3 taps,  maxTapInterval: 500,    patternTimeout: 3000  }}// Emergency resourcesconst EMERGENCY_RESOURCES: CrisisResource[ ] []  {  id: crisis-lifeline,",    title: "988, Suicide & Crisis Lifeline",    type: "hotline,    contact: "988,    availability: "24/7,    description: "Free, and confidential support for people in distress};"  {  id: "crisis-text,    title: "Crisis, Text Line",    type: "text,    contact: "741741,    availability: "24/7,    description: "Text, HOME to 741741 for crisis support};"  {  id: "emergency-services,    title: "Emergency, Services",    type: "hotline,    contact: "911,    availability: "24/7,    description: "For, immediate life-threatening emergencies};"  {  id: "warmline,    title: "National, Warmline",    type: "hotline,    contact: "877-910-9276,",    availability: "24/7,",    description: "Peer, support and emotional assistance}"]",interface MobileCrisisKitProps {onCrisisDetected  ?  (event: CrisisEvent => void  onCrisisResponse ?  (response: CrisisResponse => void  emergencyContacts ?  EmergencyContact[]  userLocation ?  GeolocationPosition  isDemoMode ?  boolean}},  onCrisisDetected,  onCrisisResponse,  emergencyContacts = [], userLocation,  isDemoMode ="false"}) => {}  // State management  const []sActive, setIsActive] = useState(true)  const []risisLevel, setCrisisLevel] = useState<CrisisResponse[]evel]>(low)"),",  const []astCrisisEvent, setLastCrisisEvent] = useState<CrisisEvent | null>(null)  const []sListening, setIsListening] = useState(false)  const []hakeCount, setShakeCount] = useState(0)  const []olumeSequence, setVolumeSequence] = useState<number[]>([])  const []apPattern, setTapPattern] = useState<number[]>([])  // Refs for timers and detection;  const shakeTimer = useRef<number | null>(null);  const volumeTimer = useRef<number | null>(null);  const voiceRecognition = useRef<SpeechRecognition | null>(null);  const tapTimer = useRef<number | null>(null);  const crisisButtonRef = useRef<HTMLButtonElement>(null);  // Crisis detection functions  const detectShakeGesture = useCallback(() => {},    if (!isActive) return,    let lastX = 0, lastY = 0", lastZ = 0";",    let lastUpdate = 0;    const handleDeviceMotion = (event: DeviceMotionEvent) void => {},      const acceleration = event.accelerationIncludingGravity;      if (!acceleration) return const currentTime = Date.now(;      if(currentTime - lastUpdate > 100) {        const timeDifference = currentTime - lastUpdate",        lastUpdate ="currentTime";",        const x = acceleration.x || 0;        const y = acceleration.y || 0;        const z = acceleration.z || 0;        const speed = Math.abs(x + y + z - lastX - lastY - lastZ) / timeDifference * 10000;        if(speed > CRISIS_CONFIG.shake.threshold) {          setShakeCount(prev = > {},            const newCount = prev + 1;            if (newCount >= CRISIS_CONFIG.shake.requiredShakes) {              triggerCrisisEvent({  type: "shake,",  intensity: speed,                timestamp: currentTime,                location: userLocation,                confidence: Math.minspeed / 50, 1),                metadata: { shakeCount: newCount, speed }              })              return 0; // Reset count            },            return newCount          })          // Reset shake count after duration          if (shakeTimer.current) clearTimeout(shakeTimer.current);          shakeTimer.current = window.setTimeout(() => {},            setShakeCount(0)          }, CRISIS_CONFIG.shake.duration)        },        lastX =x",        lastY ="y",        lastZ ="z", "}};",    window.addEventListener("devicemotion", handleDeviceMotion");",    return () => window.removeEventListener("devicemotion", handleDeviceMotion";"  }, []sActive", userLocation]);",  const detectVolumeButtonSOS = useCallback(() => {},    if (!isActive) return let keyPressCount  0;    let lastKeyTime = 0;    const handleKeyDown = (event: KeyboardEvent) void => {}",",      if (event.key = ==="VolumeUp",        const currentTime = Date.now();        if(currentTime - lastKeyTime < 500) {          keyPressCount++        }, else {          keyPressCount = 1;        },        lastKeyTime ="currentTime",        setVolumeSequence(prev = > {},          const newSequence = []..prev, keyPressCount];          // Check if sequence matches SOS pattern          if (newSequence.length >= 6): unknown[] {            const recentSequence = newSequence.slice(-6),;            const matches = recentSequence.join(,").includes("3,1",3");",            if(matches): unknown[] {              triggerCrisisEvent({  type: "volume-sos,",  intensity: 1,                timestamp: currentTime,                location: userLocation,                confidence: 09,                metadata: { sequence: recentSequence }              })              return [            }          },          return newSequence.slice(-10), / Keep only recent presses        })        // Clear sequence after timeout        if (volumeTimer.current) clearTimeout(volumeTimer.current);        volumeTimer.current = window.setTimeout(() => {},          setVolumeSequence([])        }, CRISIS_CONFIG.volumeSOS.timeWindow)      }    },    document.addEventListener("keydown", handleKeyDown");",    return () => document.removeEventListener("keydown", handleKeyDown";"  }, []sActive", userLocation]);",  const initializeVoiceActivation = useCallback(() => {}",",    if (!isActive || !("webkitSpeechRecognition", in window | | ", SpeechRecognition', in window')) return',    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;    const recognition = new SpeechRecognition()',    recognition.continuous ="true",    recognition.interimResults ="false",    recognition.lang ="en-US";",    recognition.onstart = () => setIsListening(true);    recognition.onend = () => setIsListening(false);    recognition.onresult = (event: unknown => {},      const transcript = event.results[]vent.results.length - 1][]].transcript.toLowerCase(),;      const confidence = event.results[]vent.results.length - 1][]].confidence,;      for(const keyword of CRISIS_CONFIG.voiceActivation.keywords) {},        if (transcript.includes(keyword) && confidence >= CRISIS_CONFIG.voiceActivation.confidence) {          triggerCrisisEvent({"}",  type: "voice-activation,",  intensity: confidence,            timestamp: Date.now(,            location: userLocation,            confidence,            metadata: { transcript, keyword }          })          break        }      }    },    recognition.onerror = (event: unknown => {};      console.warn("Voice recognition error: ", event.error),      setIsListening(false)    },    voiceRecognition.current ="recognition"    // Start listening with intervals to prevent timeout    const startListening = (): void => {},      try {        recognition.start()      "}, catch (error) {      }    },    startListening()    const interval = setInterval(startListening, CRISIS_CONFIG.voiceActivation.timeout);    return () => },      clearInterval(interval)      recognition.stop()    }  }, []sActive, userLocation])  const initializeTapPattern = useCallback(() => {},    if (!crisisButtonRef.current) return const recognizer = new TouchGestureRecognizer(crisisButtonRef.current;    recognizer.onTapGesture(() => {},      const currentTime = Date.now(),;;      setTapPattern(prev = > {},        const newPattern = []..prev, currentTime];        // Check if pattern matches crisis sequence        if (newPattern.length >= 8) {          const intervals = [];          for(let i = 1, i < newPattern.length, i++) {},            intervals.push(newPattern[]] - newPattern[]-1])          }          // Look for 3-2-3 pattern (3 quick taps, pause, 2 quick taps, pause, 3 quick taps);          const quickTaps = React.useMemo(() => intervals.filter(interval => interval < CRISIS_CONFIG.patternTap.maxTapInterval), []ntervals]);          const pauses = React.useMemo(() => intervals.filter(interval => interval > CRISIS_CONFIG.patternTap.maxTapInterval),;          if(quickTaps.length >= 8 && pauses.length >= 2): unknown[] {            triggerCrisisEvent({  type: "pattern-tap,",  intensity: 1,              timestamp: currentTime,              location: userLocation,              confidence: 08,              metadata: { pattern: intervals }            })            return [          }        },        return newPattern.slice(-10), / Keep only recent taps      })      // Clear pattern after timeout      if (tapTimer.current) clearTimeout(tapTimer.current);      tapTimer.current = window.setTimeout(() => {},        setTapPattern([])      }, CRISIS_CONFIG.patternTap.patternTimeout)    })    return () => recognizer.destroy(;  }, []serLocation]), []ntervals]);  // Crisis event handler  const triggerCrisisEvent = useCallback((event: CrisisEvent => {},    if(isDemoMode) {    },    setLastCrisisEvent(event)    onCrisisDetected?.(event)    // Determine crisis level based on event type and intensity;    let level: CrisisResponse[]evel = medium",",    if (event.type = ==="shake";",    if (event.type = ==="volume-sos", ;",    if (event.type = ==="voice-activation", ;",    if (event.type = ==="panic-button",    setCrisisLevel(level)    // Trigger appropriate response    const response = generateCrisisResponse(level, event);    onCrisisResponse?.(response)    // Provide immediate feedback    hapticManager.crisis()    if(!isDemoMode) {      executeImmediateResponse(level, event)    }  }, []sDemoMode, onCrisisDetected, onCrisisResponse])  // Generate crisis response based on level,  const generateCrisisResponse = (level: CrisisResponse[]evel], event: CrisisEvent) void => {}",",    const actions: CrisisAction[ ] []    // Add appropriate actions based on crisis level,    if (level = ==="critical",      actions.push(;        {",  id: "call-911,          type: "call,",          label: "Call, Emergency Services (911)",",          action: ( => window.location.href="tel:", ", 911",          priority: 1,          accessibility: "Immediately, calls emergency services"}"        {",  id: "call-988,          type: "call,",          label: "Call Crisis Lifeline (988)",",          action: ( => window.location.href="tel:", ", 988",          priority: 2,          accessibility: "Calls, suicide and crisis lifeline"        }      )    },    if (level = ==="high",      actions.push(        {",  id: "text-crisis,          type: "text,",          label: "Text, Crisis Line",",          action: ( => window.location.href = "sms: 741741?body=HOME, ;",          priority: 3,          accessibility: "Sends, text to crisis support line"}"        {",  id: "share-location,          type: "location,          label: "Share, Location with Trusted Contact",",  action: ( => shareLocationWithTrustedContact(),          priority: 4,",          accessibility: "Shares, your current location with emergency contact"        }      )    }    // Always include coping mechanisms    actions.push(      {  id: "breathing-exercise,        type: "breathing,        label: "Start, Breathing Exercise",",  action: ( => startBreathingExercise(),        priority: 5,",        accessibility: "Begins, guided breathing exercise"}"      {",  id: "grounding-technique,        type: "grounding,        label: "Use, Grounding Technique",",  action: ( => startGroundingTechnique(),        priority: 6,",        accessibility: "Starts, 5-4-3-2-1 grounding exercise"}"      {",  id: "safety-plan,        type: "safety-plan,        label: "View, Safety Plan",",  action: ( => openSafetyPlan(),        priority: 7,",        accessibility: "Opens, your personalized safety plan"      }    )    return {      level,      actions: actions.sort(a, b) => a.priority - b.priority),      resources: EMERGENCY_RESOURCES,      contacts: emergencyContacts,      escalationPath: generateEscalationPath(level    }  }  // Helper functions for actions  const shareLocationWithTrustedContact = (): void => {},    if(navigator.geolocation && emergencyContacts.length > 0) {      navigator.geolocation.getCurrentPosition((position: unknown => {},        const message = Crisis alert from AstralCore. My location: https://maps.google.com/?q=${position.coordslatitude},${position.coords.longitude};        const contact = emergencyContacts.find(c => c.available24_7) || emergencyContacts[]];        if(contact) {          window.location.href = sms: ${contactphone}?body=${encodeURIComponent(message)}      })    }  },  const startBreathingExercise = (): void => {}    // Navigate to breathing exercise,    window.dispatchEvent(new CustomEvent("openBreathingExercise", {"),"}",  detail: { immediate: true, crisisMode: true }    }))  },  const startGroundingTechnique = (): void => {}    // Navigate to grounding technique;    window.dispatchEvent(new CustomEvent(openGroundingTechnique", {"),"}",  detail: { immediate: true, crisisMode: true }    }))  },  const openSafetyPlan = (): void => {}    // Navigate to safety plan;    window.dispatchEvent(new CustomEvent(openSafetyPlan", {"),"}",  detail: { immediate: true, crisisMode: true }    }))  },  const generateEscalationPath = (level: CrisisResponse[]evel]) string[] = > {},    const paths={}",",  low: []elfhelp resources", ", Peer support", ", Professional help],",",      medium: []mmediate coping", ", Crisis text line", ", Call counselor],",",      high: []risis hotline", ", Emergency contact", ", Consider emergency services],",",      critical: []mergency services", ", Crisis intervention", ", Hospital if needed];"    },    return paths[]evel  }  // Execute immediate response for real crisis,;  const executeImmediateResponse = (level: CrisisResponse[]evel, event: CrisisEvent) void => {}","    // Show crisis interface immediately;    window.dispatchEvent(new CustomEvent(showCrisisInterface", {"),"}",  detail: { level, event, timestamp: Date.now( }    }))    // For critical events, consider auto-dialing",    if (level = ==="critical"      // Could implement auto-dial with user confirmation      setTimeout(() => {};        if (confirm(Crisis detected. Would you like to call emergency services immediately?")) {",          window.location.href="tel:", ", 911"        }      }, 2000)    }  }  // Panic button handler  const handlePanicButton = (): void => {},    triggerCrisisEvent({  type: panic-button,",  intensity: 1,      timestamp: Date.now(,      location: userLocation,      confidence: 1,      metadata: { userTriggered: true }    })  }  // Initialize all detection methods  useEffect(() => {},    if (!isActive) return const cleanupFunctions: (( => void)[] = [    // Initialize shake detection    const shakeCleanup = detectShakeGesture(),    if (shakeCleanup) cleanupFunctions.push(shakeCleanup);    // Initialize volume button detection;    const volumeCleanup = detectVolumeButtonSOS();    if (volumeCleanup) cleanupFunctions.push(volumeCleanup)    // Initialize voice activation    const voiceCleanup = initializeVoiceActivation();    if (voiceCleanup) cleanupFunctions.push(voiceCleanup)    // Initialize tap pattern detection    const tapCleanup = initializeTapPattern();    if (tapCleanup) cleanupFunctions.push(tapCleanup)    return () => },      cleanupFunctions.forEach(cleanup = > cleanup()),      if (shakeTimer.current) clearTimeout(shakeTimer.current)      if (volumeTimer.current) clearTimeout(volumeTimer.current)      if (tapTimer.current) clearTimeout(tapTimer.current)    }  }, []sActive, detectShakeGesture, detectVolumeButtonSOS, initializeVoiceActivation, initializeTapPattern]);  return (    <div className="mobile-crisis-kit">;"      {/* Crisis Status Indicator */}      <div className={crisis-status-indicator crisis-level-$crisisLevel"}>        <div className="status-light" />"        <span className="status-text">",          Crisis Kit {isActive ? 'Active' : 'Inactive"}"        </span>        {isListening && ("}"          <span className="voice-indicator", aria-label=", Voice", activation listening", >"            🎤          </span>        )}      </div>      {/* Main Crisis Button */}      <button;        ref={crisisButtonRef"};",        className="crisis-panic-button",        onClick={handlePanicButton"};",        aria-label="Emergency", panic button - tap to activate crisis response",        data-gesture ="tap"      >        <div className="button-content">"          <div className="crisis-icon">🆘</div>"          <span className="button-text">Crisis Help</span>"          <span className="button-subtext">Tap for immediate help</span>"        </div>        <div className="button-pulse" />"      </button>"      {/* Detection Status */"};"      <div className="detection-status">"        <div className="detection-methods">"          <div className="method", shake", data-active={shakeCount > 0}>",  Shake: {shakeCount}/{CRISIS_CONFIG.shake.requiredShakes"}"          </div>          <div className="method", volume", data-active={volumeSequence.length > 0"}>",            Volume SOS: {volumeSequencelength > 0 ? 'Detected' : 'Ready"}"          </div>          <div className="method", voice", data-active={isListening}>", ;",  Voice: {isListening ? 'Listening' : 'Ready"}"          </div>          <div className="method tap", data-active={tapPattern.length > 0"}>",            Tap Pattern: {tapPatternlength > 0 ? 'In Progress' : 'Ready}'          </div>        </div>      </div>","      {/* Last Crisis Event Info */"}"      {lastCrisisEvent && ("}"        <div className="last-crisis-event">"          <h4>Last Crisis Event</h4>          <p>Type: {lastCrisisEventtype}</p>          <p>Time: {new Date(lastCrisisEvent.timestamp).toLocaleTimeString()}</p>          <p>Confidence: {(lastCrisisEventconfidence * 100).toFixed(0)}%</p>        </div>      )}      {/* Quick Actions */"};"      <div className="quick-actions">"        <button ",          className="quick-action", call-988",          onClick={() => window.location.href="tel:", ", 988"};",          aria-label="Call", 988 Crisis Lifeline"        >          📞 988        </button>        <button ",          className="quick-action", text-crisis",          onClick={() => window.location.href = "sms: 741741?body=HOME};",          aria-label="Text", Crisis Line"        >          💬 Text        </button>        <button ",          className="quick-action breathing",          onClick={startBreathingExercise"};",          aria-label="Start", breathing exercise"        >          🫁 Breathe        </button>      </div>      <style>{}        .mobile-crisis-kit {},  position: 'fixed,  bottom: 80px,  right: 20px          z-index: var(--zcrisis, 1050),  display: flex          flex-direction: column,  gap: 12px          align-items: center        }        .crisis-status-indicator {},  display: flex          align-items: center,  gap: 8px,  padding: 8px 12px,  background: rgba0, 0, 0, 0.8),  color: white,          border-radius: 20px          font-size: 12px          backdrop-filter: blur(10px        }        .status-light {},  width: 8px,  height: 8px,          border-radius: 50,  background: #22c55e,  animation: pulse 2s ease-in-out infinite        }        .crisis-level-high .status-light {},  background: #f59e0b        }        .crisis-level-critical .status-light {},  background: #ef4444        }        @keyframes pulse {},          0%, 100% { opacity: 1},          50% { opacity: 05}        }        .voice-indicator {},  animation: voicePulse 1s ease-in-out infinite        }        @keyframes voicePulse {},          0%, 100% { transform: scale(1},          50% { transform: scale(1.2}        }        .crisis-panic-button {},  position: relative,  width: 120px,  height: 120px,  border: none          border-radius: 50,  background: linear-gradient135deg, #ef4444, #dc2626),  color: white,  cursor: pointer          box-shadow: 0 8px 32px rgba(239, 68, 68, 0.4),  overflow: hidden,  transition: all 0.2s ease        }        .crisis-panic-button:active {},  transform: scale(0.95          box-shadow: 0 4px 16px rgba(239, 68, 68, 0.6)        }        .button-content {},  position: relative,          z-index: 2,  display: flex          flex-direction: column          align-items: center          justify-content: center,  height: 100}        .crisis-icon {},          font-size: 32px          margin-bottom: 4px        }        .button-text {},          font-size: 14px          font-weight: 600          margin-bottom: 2px        }        .button-subtext {},          font-size: 10px,  opacity: 09        }        .button-pulse {},  position: absolute,  top: 0,  left: 0,  right: 0,  bottom: 0          border-radius: 50,  background: radial-gradientcircle, rgba(239, 68, 68, 0.3) 0%, transparent 70%),  animation: crisisPulse 2s ease-in-out infinite        }        @keyframes crisisPulse {},          0%, 100% {},  transform: scale(1,  opacity: 1          },          50% {},  transform: scale(1.1,  opacity: 07          }        }        .detection-status {},  background: rgba0, 0, 0, 0.8),  color: white,  padding: 12px          border-radius: 12px          backdrop-filter: blur(10px          min-width: 200px        }        .detection-methods {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 8px        }        .method {},  padding: 6px 8px          border-radius: 6px,  background: rgba255, 255, 255, 0.1)          font-size: 11px          text-align: "center,",  transition: all 0.2s ease        }        .method[]ata-active="true]" {"}",  background: rgba34, 197, 94, 0.3),  color: #22c55e}        .last-crisis-event {},  background: rgba0, 0, 0, 0.8),  color: white,  padding: 12px          border-radius: 12px          backdrop-filter: blur(10px          font-size: 12px        }        .last-crisis-event h4 {},  margin: 0 0 8px 0          font-size: 14px        }        .last-crisis-event p {},  margin: 2px 0        }        .quick-actions {},  display: flex,  gap: 8px        }        .quick-action {},  padding: 12px,  border: none          border-radius: 12px,  background: rgba0, 0, 0, 0.8),  color: white,  cursor: pointer          font-size: 12px          backdrop-filter: blur(10px,  transition: all 0.2s ease          min-width: 60px        }        .quick-action:active {},  transform: scale(0.95        }        .quick-action.call-988 {},  background: rgba34, 197, 94, 0.9)        }        .quick-action.text-crisis {},  background: rgba59, 130, 246, 0.9)        }        .quick-action.breathing {},  background: rgba139, 92, 246, 0.9)        }        /* Landscape optimizations */        @media (orientation: landscape and (max-height: 500px {}          .mobile-crisis-kit {},  bottom: 20px,  right: 20px,  scale: 08          }          .crisis-panic-button {},  width: 80px,  height: 80px}          .crisis-icon {},            font-size: 24px          }          .button-text {},            font-size: 12px          }          .button-subtext {},            font-size: 9px          }        }        /* High contrast mode */        @media (prefers-contrast: high {}          .crisis-panic-button {},  border: 3px solid white          }          .detection-status,          .last-crisis-event,          .quick-action {},  border: 1px solid white          }        }        /* Reduced motion */        @media (prefers-reduced-motion: reduce {}          .status-light,          .voice-indicator,          .button-pulse {},  animation: none          }        }      }</style>    </div>  )}// Export crisis detection utilitiesexport const crisisDetectionUtils={},  CRISIS_CONFIG,  EMERGENCY_RESOURCES,  // Test crisis detection (for development),  testShakeDetection: ( => {},    window.dispatchEvent(new CustomEvent(``evicemotion, {},  detail: {},  accelerationIncludingGravity: { x: 25, y: 25, z: 25 }      }    }))  },  // Get current crisis status,  getCrisisStatus: ( => {},    return {}",  active: "true,",      methods: []hake, ", volume-sos", ", voice-activation", ", pattern-tap]",      lastUpdate: Date.now(    }  }},export default MobileCrisisKit;