/** * Mobile Responsive Components - Complete Mobile UI System * CRITICAL: Perfect mobile experience with container queries, fluid typography, and device-specific optimizations * Features: Responsive layouts, adaptive components, mobile-first design patterns */import React, { useState(, useEffect, useRef, useCallback ), from: 'react',import { useResponsive, useResponsiveStyles }, from "../MobileResponsiveSystem"// Container query hookexport const useContainerQuery = (ref: React.RefObject<HTMLElement>) void => {},  const []ontainerSize, setContainerSize] = useState({ width: 0, height: 0 })  const []ontainerQueries, setContainerQueries] = useState({},  xs: false,  // < 320px,  sm: false,  // 320px - 576px,  md: false,  // 576px - 768px,  lg: false,  // 768px - 992px,  xl: false   // > 992px  })  useEffect(() => {},    if (!ref.current) return const resizeObserver = new ResizeObserver((entries: unknown => },      for(const entry of entries) {},        const { width, height } = entry.contentRect        setContainerSize({ width, height })        setContainerQueries({},  xs: width < 320,          sm: width >= 320 && width < 576,          md: width >= 576 && width < 768,          lg: width >= 768 && width < 992,          xl: width >= 992        })      }    })    resizeObserver.observe(ref.current)    return () => resizeObserver.disconnect(  ), []ef];  return {""'
  containerSize containerQueries
// Fluid typography componentinterface FluidTextProps { { { { children: ReactReactNode,  minSize  ?  number  maxSize ?  number  minViewport ?  number  maxViewport ?  number  className ?  string  as ?  keyof JSX.IntrinsicElements ),  children,  minSize = 14, maxSize = 24  minViewport = 320",",',  maxViewport = 1200",", `;`  className=",",  as: Component ='span")) => {},  const fluidSize = ``lamp(${minSize}px, ${minSize}px + (${maxSize} - ${minSize}) * ((100vw - ${minViewport}px) / (${maxViewport} - ${minViewport}), ${maxSize}px`;  return (    <Component      className={fluid-text ${className}, style= {"}'
  fontSize: fluidSize,        lineHeight: 15
}     {children}    </Component>  Responsive grid systeminterface ResponsiveGridProps { { { { children: ReactReactNode,  columns  ?  { },  gap ?  string  className ?  string},export const ResponsiveGrid: React.FC<ResponsiveGridProps = ({},  children,  columns={ xs: 1, sm: 2, md: 3, lg: 4, xl: 5 }})) `ap = ``rem`;  className = }) => {},  const containerRef = useRef<HTMLDivElement>(null`;  const.containerQueries = useContainerQuery(containerRef)  const getColumnCount = (): void => {},    if (containerQueries.xl && columns.xl) return columnsxl    if (containerQueries.lg && columns.lg) return columnslg    if (containerQueries.md && columns.md) return columnsmd    if (containerQueries.sm && columns.sm) return columnssm    return columns.xs | 1  },  return (    <di      ref={containerRef}, className ={responsive-grid ${className},      style={style1}, 1fr)}}>     gap})>,`        width: ``00}}   >     {children}    </div>  )}/ daptive card componentinterface AdaptiveCardProps { { { {"},export const AdaptiveCard: React.FC<AdaptiveCardProps = ({",  children",  priority = "normal', ", `;`  layout = "auto',",  touch = true",", `;`  className = }) => {},  const { isMobile, orientation } = useResponsive()  const.getTouchTargetSize = useResponsiveStyles()  const cardRef = useRef<HTMLDivElement>(null;  const { containerSize "} = useContainerQuery(cardRef;',  const getLayout = (): void => {}";",    if(layout = === 'auto", ", `;`      return containerSize.width > 600 ? horizontal: "vertical}",    return layout  );  const getPriorityClass = (): void => {},    switch(priority) {},      case crisis:,        return 'card-crisis"      case high:,        return "card-high-priority', default: "        return "card-normal    }  },  return (    <div      ref={cardRef}, className= {"`}"
  {adaptive-card ${getPriorityClass() card-${getLayout()
}${touch ? }}``ard-touch : }' ${ className };",      style={{  minHeight: touch ? ``** * Mobile Responsive Components - Complete Mobile UI System * CRITICAL: Perfect mobile experience with container queries, fluid typography, and device-specific optimizations * Features: Responsive layouts, adaptive components, mobile-first design patterns */import React, { useState(, useEffect, useRef, useCallback ), from: 'react',import { useResponsive, useResponsiveStyles }, from "../MobileResponsiveSystem"// Container query hookexport const useContainerQuery = (ref: React.RefObject<HTMLElement>) void => {},  const []ontainerSize, setContainerSize] = useState({ width: 0, height: 0 })  const []ontainerQueries, setContainerQueries] = useState({},  xs: false,  // < 320px,  sm: false,  // 320px - 576px,  md: false,  // 576px - 768px,  lg: false,  // 768px - 992px,  xl: false   // > 992px  })  useEffect(() => {},    if (!ref.current) return const resizeObserver = new ResizeObserver((entries: unknown => },      for(const entry of entries) {},        const { width, height } = entry.contentRect        setContainerSize({ width, height })        setContainerQueries({},  xs: width < 320,          sm: width >= 320 && width < 576,          md: width >= 576 && width < 768,          lg: width >= 768 && width < 992,          xl: width >= 992        })      }    })    resizeObserver.observe(ref.current)    return () => resizeObserver.disconnect(  }, []ef];  return {""
  containerSize containerQueries)
}// Fluid typography componentinterface FluidTextProps { { { { children: ReactReactNode,  minSize  ?  number  maxSize ?  number  minViewport ?  number  maxViewport ?  number  className ?  string  as ?  keyof JSX.IntrinsicElements },  children,  minSize = 14, maxSize = 24// Extracted inline styles for performanceconst style1={  display: `rid,        gridTemplateColumns: ``epeat(${getColumnCount()const style2={  display: )`rid,        gridTemplateColumns: ``epeat(${getColumnCount()const style3={  minHeight: touch ? getTouchTargetSize()}  minViewport = 320,',",  maxViewport = 1200",'}`;`  className=",",  as: Component ="span"}) => {},  const fluidSize = ``lamp(${minSize}px, ${minSize}px + (${maxSize} - ${minSize}) * ((100vw - ${minViewport}px) / (${maxViewport} - ${minViewport}), ${maxSize}px`;  return (    <Component      className={fluid-text ${className}, style= {'}`}
  fontSize: fluidSize,        lineHeight: 15
}      {children}    </Component>  }/ Responsive grid systeminterface ResponsiveGridProps { { { { children: ReactReactNode,  columns  ?  { },  gap ?  string  className ?  string},export const ResponsiveGrid: React.FC<ResponsiveGridProps = ({},  children,  columns={ xs: 1, sm: 2, md: 3, lg: 4, xl: 5 }`, `ap = ``rem`;  className = }) => {},  const containerRef = useRef<HTMLDivElement>(null`;  const.containerQueries = useContainerQuery(containerRef)  const getColumnCount = (): void =) {},    if (containerQueries.xl && columns.xl) return columnsxl    if (containerQueries.lg && columns.lg) return columnslg    if (containerQueries.md && columns.md) return columnsmd    if (containerQueries.sm && columns.sm) return columnssm    return columns.xs | 1  >,  return (    <di      ref={containerRef}, className ={responsive-grid ${className},      style={style2}, 1fr}        gap>``,`        width: ``00}}    >      {children}    </div>  )}// Adaptive card componentinterface AdaptiveCardProps { { { {"},export const AdaptiveCard: React.FC<AdaptiveCardProps = ({",  children',  priority = "normal", ", `;`  layout = "auto',",  touch = true",', `;`  className = }) => {},  const { isMobile, orientation } = useResponsive()  const.getTouchTargetSize = useResponsiveStyles()  const cardRef = useRef<HTMLDivElement>(null;  const { containerSize "} = useContainerQuery(cardRef;",  const getLayout = (): void => {}";",    if(layout = === 'auto", ", `;`      return containerSize.width > 600 ? horizontal: 'vertical}",    return layout  );  const getPriorityClass = (): void => {},    switch(priority) {},      case crisis:,        return "card-crisis"      case high:,        return "card-high-priority', default: "        return "card-normal    }  },  return (    <div      ref={cardRef}, className= {'`)}
  {adaptive-card ${getPriorityClass() card-${getLayout()
}${touch ? }}``ard-touch : }" ${ className };",      style={style3}px` ` ``uto``, padding: isMobile ? ", 12px" : '16px",        borderRadius: "12px,', `;`        background: "var(--card-bg),", `;`        border: "1px, solid var(--card-border)",',        transition: "all, 0.2s ease",',        cursor: touch ? pointer: "default"      }        {children}      <style>{}        .adaptive-card {},  position: "relative,  overflow: "hidden              .card-vertical {},  display: flex          flex-direction: column,  gap: 12px        }     .card-horizontal {},  display: flex          flex-direction: row,  gap: 16px          align-items: center        }     .card-touch:active {},  transform: scale(0.98          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1)        }  )) ) .rd-crisis {},          border-color: var(--error-500,  background: linear-gradient135deg, var(--error-50), var(--error-100))        }     .card-high-priority {},          border-color: var(--warning-500,  background: linear-gradient135deg, var(--warning-50), var(--warning-100))        }     .card-normal {},  background: var(--bg-secondary        }      ))@medi(refers-reduced-motion: reduce {}          .adaptive-card {},  transition: none          }       )) .cardtuch:active {},  transform: none          }</style  </di>  )}// Moiletied modalinterface MobileModalProps { { { {
  '"
};

isOpen: boolean,  onClose: ( =) void,  children: ReactReactNode,  fullScreen  ?  boolean  title ?  string,  priority  ?  ``ormal  | crisis``, `,`
,  isOpen,  onClose,  children,  fullScreen = "false',",  title",  priority ="normal" {';",  const { isMobile", orientation '} = useResponsive(;",  const modalRef = useRef<HTMLDivElement>(null`;  useEffect(() => {},    if(isOpen) {      document.body.style.overflow ="hidden"      // Trap focus in modal      modalRef.current?.focus()    }, else(document.body.style.overflow = );    return () => },      document.body.style.overflow = ; }`}, `isOpen]);  const handleKeyDown = (e: React.KeyboardEvent) void => {}",',    if (e.key = ==="Escape",      onClose()    }  },  if (!isOpen) return null;  const modalClass = []obile-modal',"];",    fullScreen ? "modal-fullscreen" : 'modal-card",",',    isMobile ? "modal-mobile" : "modal-desktop",    orientation = ==='landscape", ;",    priority = ==='crisis", ;"]))})}"");'  return (;    <div tabIndex={0}, className="modal-overlay", onKeyDown={(e) => e.key === 'Enter" && priority !== ", crisis" ? onClose : undefined(e)}, onClick={priority !== ", crisis' ? onClose : undefined}>"      <div tabIndex={0},        ref ={modalRef},        className ={modalClass},        onClick ={(e: unknown => ).)t}p>rpagation()},>     onKeyDown ={handleKeyDown},        tabIndex={-1"}',        role ="dialog",        aria-modal ="true",        aria-labelledby={title ? 'modal-title" : "undefined' }"      >        {title && ("}"          <div className="modal-header'>"            <h2 id = "modal-title', className="modal-title">"              {title"}' >        </h2>            {priority !== "crisis" && ('}"           <button                className="modal-close",                onClick={onClose"}',             aria-label="Close", modal'              >             ✕              </button>            )}      </dv        )}      <v clsName="modal-content">";"          {children}        </div>      </div>      <ste>{}       odal-verlay {},  position: 'fixed,",  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.6)          bkdropfilter: blur(4px          z-index: 1000,  display: flex          align-items: center          justify-content: center,  padding: 16px        }        .mob))e-m)dal {}, backrund: var(--bg-primary          border-radius: 16px          box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3)          max-height: 90vh,  overflow: hidden,  outline: none        }        .moda)-full)creen {,  widh: 100vw,  height: 100vh,          border-radius: 0          max-height: none        }        .moda-ard {},          max-width: 90vw,  width: 100,          max-width: 500px        }        .modalmbile modal-card {},  margin: 0,  width: 100,          max-width: none          border-radius: 16px 16px 0: 0,  position: "fixed,  bottom: 0,  left: 0,  right: 0,  transform: none        }        .modal-landscape.modal-mobile {},          border-radius: 12px,  position: relative,  bottom: auto          max-height: 80vh        }        .modal-crisis {},  border: 3px solid var(--error-500)          box-shadow: 0 0 30px rgba(239, 68, 68, 0.5)        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 16px 20px          border-bottom: 1px solid var(--border-color)        }        .modal-title {},  margin: 0          font-size: 18px          font-weight: 600,  color: var(--text-primary}        .modal-close {},  background: none,  border: none          font-size: 20px,  cursor: pointer,  color: var(--text-secondary,  padding: 4px          border-radius: 4px          min-width: 44px          min-height: 44px,  display: flex          align-items: center          justify-content: center        }        .modal-close:hover {},  background: var(--bg-secondary        }        .modal-content {},  padding: 20px          overflow-y: auto          max-height: calc90vh - 80px)        }        .modal-fullscreen .modal-content {},          max-height: calc100vh - 80px)        }        /* Safe area support */        @supports (padding: max(0px) {}          .modal-mobile .modal-content {},            padding-bottom: max20px, env(safe-area-inset-bottom))          }        }        /* Animation */        .modal-overlay {},  animation: modalOverlayIn 0.2s ease-out        }        .mobile-modal {},  animation: modalSlideIn 0.3s ease-out        }        .modal-mobile .modal-card {},  animation: modalSlideUp 0.3s ease-out        }        @keyframes modalOverlayIn {},          from { opacity: 0},          to {
  '`"
};

opacity: 1
@keyframes modalSlideIn {},          from {},  opacity: 0,  transform: scale(0.9 translateY(-20px)          })          to {},  opacity: 1,  transform: scale(1 translateY(0)          })       }       @keyframes modalSlideUp {},          from {},  transform: translateY(100%          })         to {},  transform: translateY(0          )}       @media (prefers-reduced-motion: reduce {}          .modal-overlay,          .mobile-modal {},  animation: none          }</)tyle>   </div>  )// oile-optimized form componentsinterface MobileFormFieldProps { { { {
  label: string,  type  ?  string,  value: string,  onChange: (value string) = void,  placeholder  ?  string,  required  ?  boolean,  error  ?  string,  helpText  ?  string  autoComplete ?  string,  inputMode  ?  ``ext  | "tel"  | "email'  | "numeric"  | 'decimal"  | "search  | ", url``"'"
;  label",',  type = "text,",",  value,  onChange,  placeholder,  required ="false',  error,  helpText,  autoComplete,  inputMode}) => {}";",  const.isMobile = useResponsive(;  const fieldId = field-${Math.random().toString(36).substr(2', 9)" `;`  return(;    <div className="mobile-form-field">"      <label htmlFor={fieldId'}, className="form-label">'        { label");"        {required && <span className="required-indicator", aria-label=', required">*</span> };"      </label>      <input aria-label='Input field",        id ={fieldId},        type ={type},        value ={value},        onChange ={(e: unknown =     /> onChange(e.target.value)},        placeholder ={placeholder},        required ={required},        autoComplete ={autoComplete},        inputMode={inputMode"}", `;`        className ={form-input ${error ? }``nput-error :},        aria-describedby= {"}'
  {error ? ``fieldId-error` ` helpText ? ``fieldId
}"help` ` ", undefined'};",        aria-invalid={error ? ``rue" : "false}"      />      '`;`      {error && ("}"        <div id={ ${fieldId-error }, className='form-error", role="alert">"          {error}        </div>      )}      {helpText && !error && (')"        <div id={ ${fieldId-help }, className="form-help'>"          {helpText}        </div>      }}      <style>{}        .mobile-form-field {},          margin-bottom: 20px>        .form-label {},  display: "block,          font-weight: 500          margin-bottom: 6px,  color: var(--text-primary),"}}`;`          font-size: ${isMobile ? }``6px" : 14px}``        }        .required-indicator {},  color: var(--error-500,          margin-left: 4px        }        .form-input {},  width: 100,          min-height: 48px,  padding: 12px 16px,  border: 2px solid var(--border-color)          border-radius: 8px          font-size: 16px, /* Prevent zoom on iOS */          font-family: inherit,  background: var(--input-bg,  color: var(--text-primary,  transition: bordercolor 0.2s ease, box-shadow 0.2s ease        }        .form-input:focus {},  outline: none          border-color: var(--primary-500          box-shadow: 0 0 0 3px rgba(var(--primary-rgb), 0.1)        }        .form-input:invalid {},          border-color: var(--error-500        }        .input-error {},          border-color: var(--error-500          box-shadow: 0 0 0 3px rgba(var(--error-rgb), 0.1)        }        .form-error {},          margin-top: 6px,  color: var(--error-500,          font-size: 14px        }        .form-help {},          margin-top: 6px,  color: var(--text-secondary,          font-size: 14px        }        /* Dark mode adjustments */        @media (prefers-color-scheme: dark {}          .form-input {},  background: var(--bg-secondary            border-color: var(--border-dark          }</style>    </div>  )}// Mobile-optimized button componentinterface MobileButtonProps { { { {}export const MobileButton: React.FC<MobileButtonProps = ({',  children",", `;`  variant = 'primary",  size ="md",  fullWidth ="false',  disabled = false,",  loading = false",  onClick',  type = "button",",  className=",',  ariaLabel)=> }";",  const { getTouchTargetSize '} = useResponsiveStyles(;",  const getSizeStyles = (): void => {},    switch(size): Record<string, unknown>      case: "sm", :,        return {",'  minHeight: "40px,",          padding: '8px, 16px",",          fontSize: "14px}",      case lg:,        return {',"  minHeight: ``{getTouchTargetSize(``arge}"px,', ``          padding: `6px 24px"``", ``          fontSize: "18px        }, default:        return {  minHeight: ``{getTouchTargetSize(}"px,', `;`          padding: `2px 20px``,", ``          fontSize: "16px        },  const getVariantClass = (): void => {},    switch(variant) {},      case secondary:,',        return "btn-secondary"      case outline:,        return "btn-outline"      case ghost:,        return 'btn-ghost"      case crisis:,        return "btn-crisis', default: "        return "btn-primary     } return (    <button      type={type}, onClick ={onClick},      disabled ={disabled || loading},      aria-label ={ariaLabel},      className={"}"`}>)
  {mobile-button ${getVariantClass() ${fullWidth ? }}``tn-full-width :
}' ${ className };",      style={getSizeStyles()"}', `;`    }      {loading && <span className="button-spinner", aria-hidden=", true"     />'};"      <span className={loading ? "button-content-loading' : "button-content}>"``        {children}      </span>      <style}{}        .mobile-button {},  display: "inline-flex,          align-items: center          justify-content: center,  gap: 8px,  border: none          border-radius: 8px          font-weight: 500          font-family: inherit,  cursor: pointer,  transition: all 0.2s ease          text-decoration: none,  position: relative,  overflow: hidden          -webkit-tap-highlight-color: transparent        }        .mobile-button:disabled {},  opacity: 06,  cursor: notallowed        }        .mobile-button: active:not(:disabled {},  transform: scale(0.98        }        .btn-full-width {},  width: 100}        .btn-primary {},  background: var(--primary-500,  color: white}        .btn-primary: hover:not(:disabled {},  background: var(--primary-600        }        .btn-secondary {},  background: var(--secondary-500,  color: white}        .btn-secondary: hover:not(:disabled {},  background: var(--secondary-600        }        .btn-outline {},  background: transparent,  color: var(--primary-500,  border: 2px solid var(--primary-500)        }        .btn-outline: hover:not(:disabled {},  background: var(--primary-500,  color: white}        .btn-ghost {},  background: transparent,  color: var(--text-primary}        .btn-ghost: hover:not(:disabled {},  background: var(--bg-secondary        }        .btn-crisis {},  background: var(--error-500,  color: white,          box-shadow: 0 4px 12px rgba(var(--error-rgb)`, `.3)        }        .btn-crisis: hover:not(:disabled {},  background: var(--error-600          box-shadow: 0 6px 16px rgba(var(--error-rgb), 0.4)        }        .button-spinner {},  width: 16px,  height: 16px,  border: 2px solid transparent          border-top: 2px solid currentColor          border-radius: 50,  animation: spin 1s linear infinite        }        .button-content-loading {},  opacity: 07        }        @keyframes spin {},          from { transform: rotate(0deg},          to {
  ")
};

transform: rotate(360deg)
>@media (prefers-reduced-motion: reduce {}          .mobile-button {},  transition: none          )          .mobile-button: active:not(:disabled {},  transform: none          )          .button-spinner {},  animation: none          }</style}    </button>  )// Mobile navigation componentinterface MobileNavigationProps { { { {
  items: Array<
>  onItemClick ?  (href: string =>)void}export const MobileNavigation: React.FC<MobileNavigationProps = ({},  items,  onItemClick}))>> },  const { hasNotch, getSafeAreaPadding '} = useResponsiveStyles(;",  return (;    <nav className="mobile-navigation', role="navigation", aria-label=", Main", navigation', >", ", `;`      <div className='nav-container">";"        {items.map((item, index) => (}          <a            key={index}, href={item.href"}',>           className ={nav-item ${item.isActive ? }``av-item-active :},            onClick= {"}"
  (e: unknown =>';",              e.preventDefault()              onItemClick?.(item.href)""'
},            aria-current={item.isActive ? page" : 'undefined"}"          >            <div className='nav-icon">"              {item.icon"}"              {item.badge && ('}"                <span className="nav-badge', aria-label={"${item.badge notifications"}>", ")`;`                  {item.badge}                </span>              }'}"            </div>            <span className="nav-label'>{item.label}</span>'          </a>        ))}      </div>      <style>{}        .mobile-navigation {},  position: fixed,  bottom: 0,  left: 0,  right: 0,  background: var(--bg-primary          border-top: 1px solid var(--border-color)          z-index: 1000          padding-bottom: ${getSafeAreaPadding(``ottom},          backdrop-filter: blur(20px          -webkit-backdrop-filter: blur(20px        }        .nav-container {},  display: flex          justify-content: spacearound,  padding: 8px 16px          max-width: 100        }        .nav-item {},  display: flex          flex-direction: column          align-items: center,  gap: 4px          min-width: 60px          min-height: 60px,  padding: 8px 4px          border-radius: 12px          text-decoration: none,  color: var(--text-secondary,  transition: all 0.2s ease,  position: relative,          justify-content: center}        .nav-item:active {},  transform: scale(0.95,  background: rgba(var(--primary-rgb, 0.1)        }        .nav-item-active {},  color: var(--primary-500}        .nav-icon {},  position: relative,          font-size: 24px        }        .nav-badge {},  position: absolute,  top: -6px,  right: -6px,  background: var(--error-500,  color: white,          font-size: 10px          font-weight: 600,  padding: 2px 6px          border-radius: 10px          min-width: 16px,  height: 16px,  display: flex          align-items: center          justify-content: center        }        .nav-label {},          font-size: 10px          font-weight: 500          text-align: center          white-space: nowrap,  overflow: hidden          text-overflow: ellipsis          max-width: 60px        }        /* Safe area support */        @supports (padding-bottom: env(safe-area-inset-bottom) {}          .mobile-navigation {},            padding-bottom: max8px, env(safe-area-inset-bottom))          }        }        /* Landscape adjustments */        @media(orientation: landscape and (max-height: 500px {}          .nav-label {},  display: none          }          .nav-item {},            min-height: 50px          }          .nav-container {},  padding: 4px 16px          )}        @media (prefers-reduced-motion: reduce {}          .nav-item {},  transition: none          }          .nav-item:active {},  transform: none          }</style>    </nav>  )},export default {},  FluidText,  ResponsiveGrid,  AdaptiveCard,  MobileModal,  MobileFormField,  MobileButton,  MobileNavigation,  useContainerQuery" }`;`""