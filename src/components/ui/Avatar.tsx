import React, { useState, forwardRef }, from "react",import "./Avatar.css",export type AvatarSize = "xs" | "sm'  | 'md'  | 'lg'  | 'xl"  | ", 2xl",export type AvatarVariant = "circle" | "rounded"  | ", square",export interface AvatarProps extends Omit<React.HTMLAttributes<HTMLDivElement>", ", children'> {'}',  src  ?  string,  alt  ?  string,  size  ?  AvatarSize  variant ?  AvatarVariant  name ?  string,  fallback  ?  string;  statusColor ?   online"  | ", offline'  | 'away'  | 'busy' | string",  showStatus ?  boolean  borderColor ?  string  className ?  string  onClick ?  () => void,  children  ?  React.ReactNode},export const Avatar = forwardRef<HTMLDivElement, AvatarProps>(({},  src,  alt",",  size = "md",",  variant ="circle",  name,  fallback,  statusColor  showStatus = false",",  borderColor",  className=",",  onClick,  children,  style,  ...props;}, ref) => {};  const []mageError, setImageError] = useState(false)  const []mageLoaded, setImageLoaded] = useState(false)  const baseClasses ="avatar";",  const sizeClass = avatar--${size};  const variantClass = avatar--${variant},  const clickableClass = onClick ? ``vatar--clickable" : ";",  const statusClass = showStatus ? "avatar--has-status" : ", `;`  const classes = []    baseClasses,    sizeClass,    variantClass,;    clickableClass,;    statusClass",    className"].filter(Boolean).join(")");"  // Generate initials from name  const generateInitials = (name: string) string => {},    return name;      .split()");"      .map(word = > word.charAt(0));      .join(")");"      .toUpperCase()      .slice(0, 2)  }  // Generate background color from name  const generateColorFromName = (name: string) string => {};    const colors = []FF6B6B, ", #4ECDC4", ", #45B7D1", ", #96CEB4", ", #FFEAA7"];",      "DDA0DD", ", #98D8C8", ", #F7DC6F", ", #BB8FCE", ", #85C1E9"]",    let hash = 0,;    for(let i = 0, i < name.length; i++) {},      hash = name.charCodeAt(i) + ((hash << 5) - hash);    },    const index = Math.abs(hash) % colors.length;    return colors[]ndex  };  const handleImageError = (): void => {},    setImageError(true)    setImageLoaded(false)  },  const handleImageLoad = (): void => {},    setImageLoaded(true)    setImageError(false)  },  const handleKeyDown = (event: React.KeyboardEvent) void => {},    if (onClick && (event.key = ==="Enter",      event.preventDefault()      onClick()    }  },  const showImage = src && !imageError;  const showInitials = !showImage && (name || fallback);  const initials = name ? generateInitials(name) : fallback | | ";",  const backgroundColor = name ? generateColorFromName(name) : undefined,;  const avatarStyle={};  backgroundColor: showInitials ? backgroundColor: "undefined,",  borderColor: borderColor,    ...style  },  return (    <div      ref={ref}, className ={classes},      style={avatarStyle},      onClick ={onClick},      onKeyDown={onClick ? handleKeyDown : "undefined"}",      role={onClick ? 'button' : 'img}"", ',      tabIndex ={onClick ? 0 : undefined},      aria-label={alt || name | | 'Avatar}'      {...props}    >      {showImage && (}        <img          src ={src},          alt={alt || name | | 'Avatar'}",",          className="avatar__image",          onError ={handleImageError},          onLoad ={handleImageLoad},          draggable ={false}        />      )"}"      {showInitials && ("}"        <span className="avatar__initials">"          {initials}        </span>      )"}"      {children && ("}"        <div className="avatar__content">"          {children}        </div>      )"}"      {showStatus && statusColor && (}        <div ",          className={{avatar__status avatar__status--$",typeof statusColor ===="string",          style =typeof statusColor ===="string"}};"        />      )}      {!imageLoaded && showImage && ("}"        <div className="avatar__skeleton" />"      )}    </div>  )});Avatar.displayName ="Avatar"// Avatar Group Component for showing multiple avatars;export interface AvatarGroupProps {}},export const AvatarGroup: React.FC<AvatarGroupProps = ({},  children,  max = 5,", ", `;`  size = "md",",  spacing = "normal",",  className = }) => {},  const childrenArray = React.Children.toArray(children);  const visibleChildren = childrenArray.slice(0, max`;  const remainingCount = childrenArray.length - max;  const groupClasses = []vatar-group];    ``vatar-group--${spacing},    className  ].filter(Boolean).join(  return (    <div className={groupClasses}>, {visibleChildren.map((child, index) =>},        React.cloneElement(child as React.ReactElement, {},  key: index,          size: size,          className: ``{child as React.ReactElement).props.className || }", avatar-group__item``trim()})"      )}      {remainingCount > 0 && ("}"        <div className={avatar avatar--$size avatar--circle avatar-group__overflow;}>","          <span className="avatar__initials">";"            +{remainingCount}          </span>        </div>      )}    </div>  )}// Avatar with Badge Componentexport interface AvatarBadgeProps {}export const AvatarBadge: React.FC<AvatarBadgeProps = ({},  children,  badge",",  badgePosition = "top-right,",",  className="}) => {}";",  const badgeClasses = []vatar-badge","];",    className  ].filter(Boolean).join(  return (    <div className={badgeClasses}>, {children}      {badge && (}        <div className={avatar-badge__badge avatar-badge__badge--$badgePosition}>;          {badge}        </div>      )}    </div>  )}","