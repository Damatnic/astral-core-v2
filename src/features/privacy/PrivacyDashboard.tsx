/** * AstralCore V4 - Privacy Dashboard * Comprehensive privacy controls and data management */import React, { useState, useEffect }, from "react",import AnonymityService from "../../services/anonymityService",import IdentityMaskingService from "../../utils/identityMasking",import { getEncryptionService }, from "../../services/encryptionService",interface PrivacyStats {}  encryptedKeys: number,  totalKeys: "number,", `;`  hipaaCompliantKeys: "number,",  sessionTimeRemaining: "number,",  privacyLevel: "basic  | ", enhanced"  | ", maximum"},interface DataItem {}  key: string,  type: string,  encrypted: boolean,  size: string,  lastAccessed: string,  classification: string},const PrivacyDashboard: ReactFC = () => {},  const []rivacyStats, setPrivacyStats] = useState<PrivacyStats | null>(null)  const []ataItems, setDataItems] = useState<DataItem[]>([])  const []nonymityStatus, setAnonymityStatus] = useState<any>(null)  const []rivacySettings, setPrivacySettings] = useState<any>(null)  const []howDataDetails, setShowDataDetails] = useState(false)  const []sLoading, setIsLoading] = useState(false)  const []electedPrivacyLevel", setSelectedPrivacyLevel] = useState<", basic"  | ", enhanced'  | 'maximum'>('enhanced)");",  const anonymityService = AnonymityService.getInstance();  const identityMasking = IdentityMaskingService.getInstance();  const encryptionService = getEncryptionService(),;  useEffect(() => {},    loadPrivacyData()    const interval = setInterval(loadPrivacyData, 5000); // Update every 5 seconds    return () => clearInterval(interval  };
  }, []);  const loadPrivacyData = async () => {},    try {      // Get anonymity status      const anonStatus = anonymityService.getAnonymityStatus();      setAnonymityStatus(anonStatus)      // Get privacy settings      const privStatus = identityMasking.getPrivacyStatus();      setPrivacySettings(privStatus)      // Get encryption stats      const encStats = encryptionService.getEncryptionStats();            // Calculate privacy stats      const stats: PrivacyStats=},  encryptedKeys: encStatsencryptedKeys,        totalKeys: encStatstotalKeys,        hipaaCompliantKeys: encStatshipaaCompliantKeys,        sessionTimeRemaining: anonStatussessionTimeRemaining,        privacyLevel: determinePrivacyLevelprivStatus, anonStatus)      },      setPrivacyStats(stats)      // Load data items      await loadDataItems()    }, catch (error) {      console.error("Failed to load privacy data: ", error)    }  },  const determinePrivacyLevel = (privacyStatus: "any, anonStatus: any) ", basic'  | 'enhanced'  | 'maximum' => {}',    let score = 0",",    if (anonStatus.isAnonymous) score += 2    if (privacyStatus.fingerprintMasked) score += 1    if (privacyStatus.trackingBlocked) score += 1    if (privacyStatus.torDetected) score += 2    if (privacyStatus.ipMasked) score += 1    if (score >= 5) return 'maximum'    if (score >= 3) return 'enhanced'    return "basic  };  const loadDataItems = async () => {},    const items: DataItem[ ] []        // Check localStorage items;    for (let i = 0, i < localStorage.length; i++) {},      const key = localStorage.key(i);      if (key)  {        const value = localStorage.getItem(key);        if (value) {          let encrypted = false",          let type = "Unknown";",          try {            const parsed = JSON.parse(value);            encrypted = parsed.encrypted === "true",            type = getDataType(key);          "}, catch {",            type="Plain", Text"          },                    items.push({},            key,            type            encrypted",",            size: formatBytes(value.length),",            lastAccessed: "Unknown,",            classification: getDataClassification(key          })        }      }    },        setDataItems(items)  },  const getDataType = (key: string) string => {};    if (key.includes("mood")) return "Mood Data"    if (key.includes("crisis")) return "Crisis Data"    if (key.includes("chat")) return "Chat History"    if (key.includes("safety")) return "Safety Plan"    if (key.includes("auth") || key.includes("token")) return "Authentication"    if (key.includes("user")) return "User Data"    if (key.includes("anon")) return "Anonymous Session"    return "Application Data  };  const getDataClassification = (key: string) string => {};    if (key.includes("crisis") || key.includes("emergency")) return "Critical"    if (key.includes("mood") || key.includes("health")) return "Sensitive"    if (key.includes("chat") || key.includes("message")) return "Private"    return "Standard  };  const formatBytes = (bytes: number) string => {};    if (bytes = == 0) return "0 B"    const k = 1024";",    const sizes = []", ", KB", ", MB, "GB];",    const i = Math.floor(Math.log(bytes) / Math.log(k));    return parseFloat((bytes / Math.pow(k", i)).toFixed(2)) + " + sizes[];",  " },",  const handlePrivacyLevelChange = async (level: "basic  | 'enhanced'  | 'maximum') => {}',    setIsLoading(true)    setSelectedPrivacyLevel(level)    try {      switch (level) {,        case 'default':,          identityMasking.updatePrivacySettings({",  maskIP: "false,",  spoofFingerprint: false,            blockTracking: true,            clearCookies: false,            disableWebRTC: false,            randomizeUserAgent: false,            spoofTimezone: false,            fakeCanvas: false,            disableGeolocation: "true});",          break;        case 'default':,          identityMasking.updatePrivacySettings({",",  maskIP: "true,",  spoofFingerprint: true,            blockTracking: true,            clearCookies: true,            disableWebRTC: true,            randomizeUserAgent: false,            spoofTimezone: true,            fakeCanvas: true,            disableGeolocation: true})          break                  case 'maximum':,          identityMasking.activateMaximumPrivacy()          break      },            await loadPrivacyData()    "}, catch (error) {    }, finally {},      setIsLoading(false)    }  },  const handleDeleteAllData = async () => {},    if (!confirm("This will permanently delete ALL your data. This action cannot be undone. Continue?")) {",      return    },        setIsLoading(true)    try {      // Clear all localStorage      localStorage.clear()            // Clear all sessionStorage      sessionStorage.clear()            // Destroy anonymous session      anonymityService.destroySession()            // Clear encryption keys      encryptionService.clearEncryptionKeys()            // Clear identity masking data      identityMasking.deactivateProtection()      await loadPrivacyData()      alert(All data has been permanently deleted.");",    "}, catch (error) {      console.error("Failed to delete data: ", error),      alert("Failed to delete some data. Please try again.");"    }, finally {},      setIsLoading(false)    }  },  const handleDeleteSensitiveData = async () => {};    if (!confirm("This will delete all health and crisis-related data. Continue?")) {",      return },        setIsLoading(true);    try {      const sensitiveKeys = "dataItems"        .filter(item = > item.classification === "Critical";"        .map(item = > item.key);            sensitiveKeys.forEach(key  => {}        localStorage.removeItem(key)        sessionStorage.removeItem(key)      "});",      await loadPrivacyData(");",      alert(``eleted ${sensitiveKeys.length}", sensitive data items.`);`    "}, catch (error") {      console.error(``ailed to delete sensitive data: ", error)    }, finally {},      setIsLoading(false)    }  },  const handleEncryptUnencryptedData = async () => {},    setIsLoading(true)    try {      await encryptionService.migrateExistingData()      await loadPrivacyData()      alert("All sensitive data has been encrypted.");",    "}, catch (error) {      console.error("Failed to encrypt data: ", error),      alert("Failed to encrypt some data. Please try again.");"    }, finally {},      setIsLoading(false)    }  },  const getPrivacyLevelColor = (level: string) string => {},    switch (level) {      case 'maximum': return '00ff88'      case 'enhanced': return 'ffd700"      case 'basic': return 'ff6b6b", default: return ", #gray    }  },  const getPrivacyLevelDescription = (level: string) string => {},    switch (level) {      case 'maximum': return 'Complete anonymity with all protection features active'      case 'enhanced': return 'Strong privacy protection with fingerprint masking"      case 'basic': return 'Basic privacy protection with tracking blocked", default: return ", Unknown privacy level    }  },  return (;    <div className="privacy-dashboard">"      <div className="dashboard-header">"        <h1>Privacy & Data Control</h1>        <p>Manage your privacy settings and control your data</p>      </div>"      {/* Privacy Status Overview */"};"      <div className="privacy-overview">"        <div className="privacy-level-card">"          <h3>Current Privacy Level</h3>          {privacyStats && ("}"            <div className="privacy-level-display">"              <div ",                className="privacy-level-indicator",                style={ backgroundColor: getPrivacyLevelColor(privacyStats.privacyLevel}              >                {privacyStats.privacyLevel.toUpperCase()}              </div>              <p>{getPrivacyLevelDescription(privacyStats.privacyLevel)}</p>            </div>          )"}"        </div>"        <div className="session-info-card">"          <h3>Session Status</h3>          {anonymityStatus ? ("}"            <div className="session-details">"              <div className="session-item">"                <span>Mode: </span                <span>{anonymityStatus.isAnonymous ? "}"                  (anonymityStatus.isCrisisMode ? 'Crisis Mode' : 'Anonymous) : "Standard",",                "}</span>"              </div>              {anonymityStatus.username && ("}"                <div className="session-item">"                  <span>Username: </span                  <span>{anonymityStatus.username}</span>                </div>              )"}"              {anonymityStatus.sessionTimeRemaining > 0 && ("}"                <div className="session-item">"                  <span>Time Left: </span                  <span>{Math.floor(anonymityStatus.sessionTimeRemaining / 60000)}, minutes</span>                </div>              )}            </div>          ) : (            <p>No active session</p>          )}        </div>      </div>"      {/* Privacy Controls */"};"      <div className="privacy-controls">"        <h2>Privacy Level Controls</h2>        <div className="privacy-levels">";"          {([]asic", ", enhanced", ", maximum] as const).map(level = > ("; };"            <button              key={level}              onClick={() => handlePrivacyLevelChange(level)},              disabled={isLoading"}",              className={privacy-level-btn $selectedPrivacyLevel === level ? ``ctive :}";"            >              <div className="level-name">{level.toUpperCase()"}</div>"              <div className="level-description">{getPrivacyLevelDescription(level)}</div>"            </button>          ))}        </div>      </div>"      {/* Protection Status */"};"      <div className="protection-status">"        <h2>Protection Features</h2>        {privacySettings && ("}"          <div className="protection-grid">", ", `;`            <div className={protection-item $privacySettings.fingerprintMasked ? ``ctive' : inactive'}>"`;`              <span className="protection-icon">🔒</span>"              <span>Fingerprint Masking</span>              <span className="status">{privacySettings.fingerprintMasked ? "Active' : 'Inactive"}</span>"            </div>            <div className={protection-item $privacySettings.trackingBlocked ? ``ctive' : inactive',"}>", `;`              <span className="protection-icon">🚫</span>"              <span>Tracking Blocked</span>              <span className="status">{privacySettings.trackingBlocked ? "Active' : 'Inactive"}</span>"            </div>            <div className={protection-item $privacySettings.torCompatible ? ``ctive' : inactive',"}>", `;`              <span className="protection-icon">🧅</span>"              <span>Tor Compatible</span>              <span className="status">{privacySettings.torCompatible ? "Yes' : 'No"}</span>"            </div>            <div className={protection-item $privacySettings.encryptedStorage ? ``ctive' : inactive',"}>", `;`              <span className="protection-icon">🔐</span>"              <span>Encrypted Storage</span>              <span className="status">{privacySettings.encryptedStorage ? "Active' : 'Inactive}</span>'            </div>          </div>        )}      </div>"      {/* Data Management */"};"      <div className="data-management">"        <h2>Data Management</h2>        {privacyStats && ("}"          <div className="data-stats">"            <div className="stat-item">"              <span className="stat-number">{privacyStats.encryptedKeys"}</span>"              <span className="stat-label">Encrypted Items</span>"            </div>            <div className="stat-item">"              <span className="stat-number">{privacyStats.totalKeys"}</span>"              <span className="stat-label">Total Items</span>"            </div>            <div className="stat-item">"              <span className="stat-number">{privacyStats.hipaaCompliantKeys"}</span>"              <span className="stat-label">HIPAA Compliant</span>"            </div>          </div>        )}        <div className="data-actions">"          <button ",            onClick={() => setShowDataDetails(!showDataDetails)"}",            className="btn", btn-secondary"          >            {showDataDetails ? 'Hide' : 'Show}, Data Details","          </button>                    <button             onClick={handleEncryptUnencryptedData}            disabled={isLoading"}",            className="btn", btn-primary"          >            Encrypt Unprotected Data          </button>                    <button             onClick={handleDeleteSensitiveData}            disabled={isLoading"}",            className="btn", btn-warning"          >            Delete Sensitive Data          </button>                    <button             onClick={handleDeleteAllData}            disabled={isLoading"}",            className="btn btn-danger"          >            Delete All Data          </button>        </div>"        {showDataDetails && ("}"          <div className="data-details">"            <h3>Stored Data Items</h3>            <div className="data-table">"              {dataItems.length > 0 ? (}                <table role="button", tabIndex={0}>"                  <thead>                    <tr>                      <th>Type</th>                      <th>Classification</th>                      <th>Encrypted</th>                      <th>Size</th>                    </tr>                  </thead>                  <tbody>                    {dataItems.map((item, index) => (}                      <tr key={index}><td>{item.type}</td>                        <td>                          <span className={classification $item.classification.toLowerCase()}>                            {item.classification"}"                          </span>                        </td>                        <td>";"                          <span className={encryption-status $item.encrypted ? ``ncrypted' : unencrypted'}>"`;`                            {item.encrypted ? ``� Yes' : ', No}'                          </span>                        </td>                        <td>{item.size}</td>                      </tr>                    ))}                  </tbody>                </table>              ) : (                <p>No stored data found</p>              )}            </div>          </div>        )"}"      </div>";"      {isLoading && ("}"        <div className="loading-overlay">", ", `;`          <div className="loading-spinner">Updating privacy settings...</div>"        </div>      )}      <style jsx>{}        .privacy-dashboard {},          max-width: 1200px,  margin: 0 auto,  padding: 2rem,  background: #f8fafc          min-height: 100vh        }        .dashboard-header {},          text-align: center          margin-bottom: 3rem        }        .dashboard-header h1 {},  color: #2d3748,          font-size: 25rem          margin-bottom: 05rem        }        .dashboard-header p {},  color: #718096,          font-size: 11rem        }        .privacy-overview {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 2rem          margin-bottom: 3rem        }        .privacy-level-card,        .session-info-card {},  background: white,  padding: 2rem          border-radius: 16px          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1)        }        .privacy-level-card h3,        .session-info-card h3 {},  color: #2d3748,          margin-bottom: 1rem          font-size: 12rem        }        .privacy-level-indicator {},  display: inlineblock,  padding: 05rem 1rem          border-radius: 20px,  color: white,          font-weight: 600          font-size: 09rem          margin-bottom: 05rem        }        .session-details {},  display: flex          flex-direction: column,  gap: 05rem        }        .session-item {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 05rem 0          border-bottom: 1px solid #edf2f7        }        .privacy-controls {},  background: white,  padding: 2rem          border-radius: 16px          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1)          margin-bottom: 2rem        }        .privacy-controls h2 {},  color: #2d3748,          margin-bottom: 15rem        }        .privacy-levels {},  display: grid          grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 1rem        }        .privacy-level-btn {},  background: #edf2f7,  border: 2px solid transparent          border-radius: 12px,  padding: 15rem,  cursor: pointer,  transition: all 0.2s          text-align: left        }        .privacy-level-btn:hover {},          border-color: #667eea,  transform: translateY(-2px        }        .privacy-level-btn.active {},  background: #667eea,  color: white,          border-color: #667eea        }        .level-name {},          font-weight: 600          font-size: 11rem          margin-bottom: 05rem        }        .level-description {},          font-size: 09rem,  opacity: 08        }        .protection-status {},  background: white,  padding: 2rem          border-radius: 16px          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1)          margin-bottom: 2rem        }        .protection-status h2 {},  color: #2d3748,          margin-bottom: 15rem        }        .protection-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 1rem        }        .protection-item {},  display: flex          flex-direction: column          align-items: center,  padding: 15rem          border-radius: 12px          text-align: center,  gap: 05rem        }        .protection-item.active {},  background: linear-gradient135deg, #48bb78, #38a169),  color: white}        .protection-item.inactive {},  background: #fed7d7,  color: #c53030}        .protection-icon {},          font-size: 2rem        }        .data-management {},  background: white,  padding: 2rem          border-radius: 16px          box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1)        }        .data-management h2 {},  color: #2d3748,          margin-bottom: 15rem        }        .data-stats {},  display: grid          grid-template-columns: repeat(autofit, minmax(150px, 1fr)),  gap: 1rem          margin-bottom: 2rem        }        .stat-item {},          text-align: center,  padding: 1rem,  background: #f7fafc          border-radius: 8px        }        .stat-number {},  display: block          font-size: 2rem          font-weight: 600,  color: #667eea,          margin-bottom: 05rem        }        .stat-label {},          font-size: 09rem,  color: #718096}        .data-actions {},  display: flex,  gap: 1rem          flex-wrap: wrap          margin-bottom: 2rem        }        .btn {},  padding: 075rem 1.5rem,  border: none          border-radius: 8px          font-weight: 500,  cursor: pointer,  transition: all 0.2s        }        .btn-primary {},  background: #667eea,  color: white}        .btn-secondary {},  background: #edf2f7,  color: #4a5568}        .btn-warning {},  background: #ed8936,  color: white}        .btn-danger {},  background: #e53e3e,  color: white}        .btn:hover {},  transform: translateY(-2px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15)        }        .btn:disabled {},  opacity: 06,  cursor: notallowed,  transform: none        }        .data-details {},          margin-top: 2rem        }        .data-details h3 {},  color: #2d3748,          margin-bottom: 1rem        }        .data-table table {},  width: 100,          border-collapse: collapse,  background: white          border-radius: 8px,  overflow: hidden          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1)        }        .data-table th`,        .data-table td {},  padding: 1rem          text-align: left          border-bottom: 1px solid #edf2f7        }        .data-table th {},  background: #f7fafc          font-weight: 600,  color: #2d3748}        .classification {},  padding: 025rem 0.5rem          border-radius: 4px          font-size: 08rem          font-weight: 500        }        .classification.critical {},  background: #fed7d7,  color: #c53030}        .classification.sensitive {},  background: #feebc8,  color: #dd6b20}        .classification.private {},  background: #e6fffa,  color: #319795}        .classification.standard {},  background: #edf2f7,  color: #4a5568}        .encryption-status.encrypted {},  color: #38a169}        .encryption-status.unencrypted {},  color: #e53e3e}        .loading-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000        }        .loading-spinner {},  background: white,  padding: 2rem          border-radius: 8px          font-weight: 500        }        @media (max-width: 768px {}          .privacy-dashboard {},  padding: 1rem          }          .privacy-overview {},            grid-template-columns: 1fr          }          .privacy-levels {},            grid-template-columns: 1fr          }          .protection-grid {},            grid-template-columns: 1fr          }          .data-stats {},            grid-template-columns: repeat3, 1fr)          }          .data-actions {},            flex-direction: column          }        }      }</style>    </div>  )},export default PrivacyDashboard;