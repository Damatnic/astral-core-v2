import React, { useState, useEffect }, from "react",import { Moon, Sun, Cloud, TrendingUp, AlertCircle, Calendar, Clock, Edit2, Plus, X, BarChart3, Zap }, from "lucide-react",import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar }, from "recharts",import { format, subDays, differenceInMinutes, parseISO }, from "date-fns",import { motion, AnimatePresence }, from "framer-motion"// Extracted inline styles for performanceconst style1={  width: ``(itemavgQuality / 10) * 100}interface SleepEntry {  id: string,  date: string,  bedTime: string,  wakeTime: string,  duration: number // in minutes,  quality: number // 1-10  deepSleep ? : number; // percentage  remSleep ? : number; // percentage  lightSleep ? : number; // percentage  awakenings ? : number  dreams?: string  notes?: string  factors?: string[]  moodOnWaking?: number, // 1-10}interface SleepGoal {}  targetHours: number,  bedtime: string,  wakeTime: string},interface SleepPattern {}  averageDuration: number,  averageQuality: number,  consistency: number,  bestNight: SleepEntry | null,  worstNight: SleepEntry | null,  recommendation: "string }`;`const SLEEP_FACTORS = []affeine", ", Alcohol", ", Exercise", ", Stress", ", Screen time"];",  "Heavy meal", ", Medication", ", Naps", ", Temperature", ", Noise",",  "Light", ", Comfortable bed", ", Reading", ", Meditation", ", Music"]",const SLEEP_TIPS = [];  {  title: "Consistent, Schedule",    description: "Go, to bed and wake up at the same time every day",    icon: "};"  {  title: "Dark & Cool",    description: "Keep, your bedroom dark and at 60-67°F (15-19°C)",    icon: " }, {",  title: "No, Screens",    description: "Avoid, screens 1 hour before bedtime",    icon: "};"  {  title: "Limit, Caffeine",    description: "No, caffeine after 2 PM",    icon: "};"  {  title: "Exercise, Early",    description: "Exercise, regularly but not close to bedtime",    icon: "};"  {  title: "Relaxation, Routine",",    description: "Create, a calming bedtime routine",",    icon: "}"]export const SleepTracker: ReactFC = () => {},  const []leepEntries, setSleepEntries] = useState<SleepEntry[]>([])  const []howAddEntry, setShowAddEntry] = useState(false)  const []ditingEntry, setEditingEntry] = useState<SleepEntry | null>(null);  const []leepGoal, setSleepGoal] = useState<SleepGoal>({  targetHours: 8,    bedtime: "22:, 00",",    wakeTime: "06:, 00"  })",  const []iewMode", setViewMode] = useState<", week'  | 'month'>('week)"),",  const []howDreamJournal, setShowDreamJournal] = useState(false)  const []howAnalysis, setShowAnalysis] = useState(false)  // Form states,  const []edTime", setBedTime] = useState(", 22: "00",",  const []akeTime", setWakeTime] = useState(", 06: "00",",  const []uality, setQuality] = useState(5)  const []eepSleep, setDeepSleep] = useState(20)  const []emSleep, setRemSleep] = useState(25)  const []ightSleep, setLightSleep] = useState(55)  const []wakenings, setAwakenings] = useState(0)  const []reams", setDreams] = useState(")"),",  const []otes", setNotes] = useState(")"),",  const []electedFactors, setSelectedFactors] = useState<string[]>([])  const []oodOnWaking, setMoodOnWaking] = useState(5);  const []electedDate", setSelectedDate] = useState(new Date().toISOString().split(', T')]]);"  // Load data from localStorage  useEffect(() => {},    const savedEntries = localStorage.getItem("sleepEntries");",    const savedGoal = localStorage.getItem("sleepGoal");",    if (savedEntries) setSleepEntries(JSON.parse(savedEntries))    if (savedGoal) setSleepGoal(JSON.parse(savedGoal))  }", []);"  // Save data to localStorage  useEffect(() => {},    if (sleepEntries.length > 0) {      localStorage.setItem(sleepEntries", JSON.stringify(sleepEntries"));"    }  }", []leepEntries]);",  useEffect(() => {}",",    localStorage.setItem("sleepGoal", JSON.stringify(sleepGoal"));"  }, []leepGoal])  const calculateDuration = (bedTime: string, wakeTime: string) number => {}";",    const bed = new Date(``024-01-01T${bedTime});",    const wake = new Date(``024-01-01T${wakeTime});","    // If wake time is before bed time, it`` the next day    if (wake < bed)  {      wake.setDate(wake.getDate() + 1)    },        return differenceInMinutes(wake, bed  };  const saveSleepEntry = () => {},    const duration = calculateDuration(bedTime, wakeTime`;        const newEntry: SleepEntry=},  id: editingEntry?id || Date.now().toString(),      date: selectedDate,      bedTime,      wakeTime,      duration,      quality,      deepSleep,      remSleep,      lightSleep,      awakenings,      dreams,      notes,      factors: selectedFactors,      moodOnWaking    },    if (editingEntry)  {      setSleepEntries(prev = > prev.map(e => e.id === editingEntry.id ? newEntry : e));    }, else {      setSleepEntries(prev = > []ewEntry, ...prev].sort((a, b) => b.date.localeCompare(a.date)));    }    // Reset form    resetForm()  },  const resetForm = () => {},    setShowAddEntry(false)    setEditingEntry(null)    setBedTime(22: ", 00");",    setWakeTime("06: ", 00");",    setQuality(5)    setDeepSleep(20)    setRemSleep(25)    setLightSleep(55)    setAwakenings(0)    setDreams(")");",    setNotes(")"),",    setSelectedFactors([])    setMoodOnWaking(5)    setSelectedDate(new Date().toISOString().split('T')]]);"  },  const editEntry = (entry: SleepEntry => {},    setEditingEntry(entry)    setBedTime(entry.bedTime)    setWakeTime(entry.wakeTime)    setQuality(entry.quality)    setDeepSleep(entry.deepSleep || 20)    setRemSleep(entry.remSleep || 25)    setLightSleep(entry.lightSleep || 55)    setAwakenings(entry.awakenings || 0)    setDreams(entry.dreams | | ");",    setNotes(entry.notes | | "),",    setSelectedFactors(entry.factors || [])    setMoodOnWaking(entry.moodOnWaking || 5)    setSelectedDate(entry.date)    setShowAddEntry(true)  },  const deleteEntry = (id: string => {},    setSleepEntries(prev = > prev.filter(e => e.id !== id));  },  const toggleFactor = (factor: string => {},    setSelectedFactors(prev = >, prev.includes(factor)        ? prev.filter(f = > f !== factor);        : []..prev, factor]    )  }  // Calculate sleep patterns  const analyzeSleepPatterns = (): void => {},    if (sleepEntries.length = == 0) {},      return {  averageDuration: 0,        averageQuality: 0,        consistency: 0,        bestNight: null,        worstNight: null,",        recommendation: "Start, tracking your sleep to get personalized insights"      }    },    const recentEntries = sleepEntries.slice(0, 30);        const avgDuration = React.useMemo(() => recentEntries.reduce((sum, e) => sum + e.duration, 0) / recentEntries.length, []ecentEntries]);    const avgQuality = React.useMemo(() => recentEntries.reduce((sum, e) => sum + e.quality, 0) / recentEntries.length, []ecentEntries]);    // Calculate consistency (standard deviation of bedtimes)    const bedtimeMinutes = React.useMemo(() => recentEntries.map(e  => {}      const []ours, minutes] = e.bedTime.split(', : ')map(Number),",      return hours * 60  minutes    };
  };    const avgBedtime = useMemo(() => bedtimeMinutes.reduce((sum, t) => sum + t, 0) / bedtimeMinutes.length, []ecentEntries]), []edtimeMinutes]);    const variance = React.useMemo(() => bedtimeMinutes.reduce((sum, t) => sum + Math.pow(t - avgBedtime, 2), 0) / bedtimeMinutes.length, []edtimeMinutes]);    const stdDev = Math.sqrt(variance);    const consistency = Math.max(0, 100 - (stdDev * 2)); // Convert to percentage    const bestNight = React.useMemo(() => recentEntries.reduce((best, current) =>, []ecentEntries]);      current.quality > (best?.quality || 0) ? current : best    , recentEntries[]])    const worstNight = React.useMemo(() => recentEntries.reduce((worst, current) =>, []ecentEntries]);      current.quality < (worst?.quality || 10) ? current : worst,    ", recentEntries[]]);"    // Generate recommendation    let recommendation = if (avgDuration < 420) { // Less than 7 hours;}", `;`      recommendation = "You\", re not getting enough sleep. Aim for 7-9 hours per night.",",    "}, else if (consistency < 60) {,      recommendation="Your", sleep schedule is inconsistent. Try to go to bed at the same time each night.",",    "}, else if (avgQuality < 6) {,      recommendation="Your", sleep quality could improve. Consider your sleep environment and pre-sleep routine.",",    "}, else {,      recommendation="Great", job! You\", re maintaining healthy sleep habits."    },    return {"  averageDuration: "avgDuration,",  averageQuality: avgQuality,      consistency,      bestNight,      worstNight,      recommendation    }  }  // Prepare chart data  const getChartData = () => {};    const days = viewMode === week", ;",    const data = [];    for (let i = days - 1, i >= 0, i--) {},      const date = subDays(new Date(), i);      const dateStr = format(date, 'yyyy-MM-dd)';',      const entry = sleepEntries.find(e => e.date === dateStr);      data.push({",",  date: format(date, viewMode = == ", week",        hours: entry ? entry.duration / 60 : 0,        quality: entry ? entry.quality : 0,        target: sleepGoaltargetHours      })    },    return data  }  // Sleep stage data for radar chart;  const getSleepStageData = () => {},    const recentEntry = sleepEntries[]];    if (!recentEntry) return [    return [];      { stage: "Deep, Sleep, value: recentEntrydeepSleep || 20, ideal: 20 }","      { stage: "REM, Sleep, value: recentEntryremSleep || 25, ideal: 25 }","      { stage: "Light, Sleep, value: recentEntrylightSleep || 55, ideal: 55 }"    ]  }  // Correlation data  const getCorrelationData = () => {},    const factorImpact: { []ey: string] { count: number, totalQuality: number } }={},    sleepEntries.forEach(entry  => {}      entry.factors?.forEach(factor = > {},        if (!factorImpact[]actor])  {          factorImpact[]actor]={ count: 0, totalQuality: 0 }        },        factorImpact[]actor].count++        factorImpact[]actor].totalQuality += entry.quality      })    })    return Object.entries(factorImpact;      .map(([]actor, data]) => ({},        factor,        avgQuality: datatotalQuality / data.count,        occurrences: datacount      };
  })      .sort((a, b) => b.avgQuality - a.avgQuality)  },  const pattern = analyzeSleepPatterns(`;  return (;    <div className = sleep-tracker", >", ", `;`      {/* Header */"};"      <div className="sleep-header">"        <div className="header-content">"          <h1 className="sleep-title">"            <Moon className="title-icon" />",            Sleep Tracker          </h1>          <p className="sleep-subtitle">Monitor your sleep patterns and improve your rest</p>"        </div>        "        <div className="header-actions">"          <button            onClick={() => setShowAddEntry(true)"}",            className="add-entry-btn"          >            <Plus size={20} />;            Log Sleep          </button>          <button            onClick={() => setShowDreamJournal(!showDreamJournal)"}",            className="dream-btn"          >            <Cloud size={20} />;            Dreams          </button>          <button            onClick={() => setShowAnalysis(!showAnalysis)"}",            className="analysis-btn"          >            <BarChart3 size={20} />;            Analysis          </button>        </div>      </div>"      {/* Sleep Score */"};"      <div className="sleep-score-section">"        <div className="score-card", main-score", >"          <div className="score-header">"            <h2>Sleep Score</h2>            <span className="score-period">Last 7 days</span>"          </div>          <div className="score-value">"            {sleepEntries.length > 0 }              ? Math.round((pattern.averageDuration / 480) * pattern.averageQuality * 10)"              : 0"}"          </div>          <div className="score-label">Overall Health</div>"        </div>"        <div className="score-metrics">"          <div className="metric-card">"            <div className="metric-icon", duration-icon", >"              <Clock size={20"} />"            </div>            <div className="metric-info">"              <span className="metric-value">"                {Math.floor(pattern.averageDuration / 60)}h {Math.round(pattern.averageDuration % 60)"}m"              </span>              <span className="metric-label">Avg Duration</span>"            </div>          </div>"          <div className="metric-card">"            <div className="metric-icon", quality-icon", >"              <TrendingUp size={20"} />"            </div>            <div className="metric-info">"              <span className="metric-value">{pattern.averageQuality.toFixed(1)"}/10</span>"              <span className="metric-label">Avg Quality</span>"            </div>          </div>"          <div className="metric-card">"            <div className="metric-icon consistency-icon">"              <Zap size={20"} />"            </div>            <div className="metric-info">"              <span className="metric-value">{Math.round(pattern.consistency)"}%</span>"              <span className="metric-label">Consistency</span>"            </div>          </div>        </div>      </div>"      {/* Recommendation */"}"      {pattern.recommendation && ("}"        <div className="recommendation-card">"          <AlertCircle className="recommendation-icon" />"          <p>{pattern.recommendation}</p>        </div>      )}      {/* View Mode Selector */"};"      <div className="view-selector">"        <button          onClick={() => setViewMode("week")}";",          className={view-btn $viewMode === ``eek ? 'active :'}","        >          Week View        </button>        <button          onClick={() => setViewMode(``onth)"}",          className={view-btn $viewMode === ``onth ? 'active :'}","        >          Month View        </button>      </div>";"      {/* Sleep Chart */"};"      <div className="chart-container">"        <h2 className="chart-title">Sleep Patterns</h2>"        <ResponsiveContainer width = "100%", height={300}>"          <BarChart data={getChartData()"}>"            <CartesianGrid strokeDasharray="3", 3", stroke=", #e0e0e0" />"            <XAxis dataKey = "date", stroke=", #666" />"            <YAxis stroke = "666" />"            <Tooltip",              contentStyle={";",  backgroundColor: "rgba(255`, 255, 255, 0.95)",",                border: "1px, solid #e0e0e0",",                borderRadius: "8px}}"            />            <Legend />";"            <Bar dataKey = "hours", fill=", #8b5cf6", name=", Sleep", Hours", radius={[], 8, 0, 0]"} />","            <Line type = "monotone", dataKey=", target", stroke=", #10b981", strokeWidth={2"}, strokeDasharray=", 5", 5", name=", Target" />"            <Bar dataKey = "quality", fill=", #60a5fa", name=", Quality", radius={[], 8, 0, 0]} />","          </BarChart>        </ResponsiveContainer>      </div>      {/* Sleep Analysis */}      <AnimatePresence>        {showAnalysis && (}          <motion.div            initial={ opacity: 0, height: 0}, animate={ opacity: 1, height: ", auto"}",            exit={ opacity: "0, height: 0}",            className="analysis-section"          >            <h2>Sleep Analysis</h2>            "            {/* Sleep Stages */"}"            {sleepEntries.length > 0 && ("}"              <div className="sleep-stages">"                <h3>Sleep Stages (Last Night)</h3>                <ResponsiveContainer width = "100%", height={250}>"                  <RadarChart data={getSleepStageData()"}>"                    <PolarGrid stroke = "e0e0e0" />"                    <PolarAngleAxis dataKey = "stage" />"                    <PolarRadiusAxis angle={90}, domain={[], 60]"} />","                    <Radar name = "Actual", dataKey=", value", stroke=", #8b5cf6", fill=", #8b5cf6", fillOpacity={0.6"} />"                    <Radar name = "Ideal", dataKey=", ideal", stroke=", #10b981", fill=", #10b981", fillOpacity={0.3} />"                    <Legend />                  </RadarChart>                </ResponsiveContainer>              </div>            )}            {/* Factor Correlation */"};"            <div className="factor-correlation">"              <h3>Factor Impact on Sleep Quality</h3>              <div className="correlation-list">"                {getCorrelationData().slice(0, 5).map(item = > ("; };"                  <div key={item.factor"}, className="correlation-item">"                    <span className="factor-name">{item.factor"}</span>"                    <div className="factor-bar">"                      <div ";",                        className="factor-fill",                        style={style1}%`;`                          backgroundColor: itemavgQuality > 6 ? ``10b981' : 'ef4444`}}`                      />                    </div>                    <span className="factor-score">{item.avgQuality.toFixed(1)}</span>"                  </div>                ))}              </div>            </div>          </motion.div>        )}      </AnimatePresence>";"      {/* Recent Entries */"};"      <div className="entries-section">"        <h2>Recent Sleep Logs</h2>        <div className="entries-list">"          {sleepEntries.slice(0, 5).map(entry = > ("; };"            <div key={entry.id"}, className="sleep-entry">"              <div className="entry-date">"                <Calendar size={16} />                {format(parseISO(entry.date)", ", MMM dd, yyyy)"}"              </div>              "              <div className="entry-details">"                <div className="entry-times">"                  <span className="bed-time">"                    <Moon size={14} />                    {entry.bedTime"}"                  </span>                  <span className="wake-time">"                    <Sun size={14} />                    {entry.wakeTime"}"                  </span>                </div>                "                <div className="entry-stats">"                  <span className="duration">"                    {Math.floor(entry.duration / 60)}h {entry.duration % 60"}m"                  </span>                  <span className="quality">",  Quality: {entry.quality}/10"                  </span>                </div>                "                {entry.factors && entry.factors.length > 0 && ("}"                  <div className="entry-factors">"                    {entry.factors.map(factor = > (";};"                      <span key={factor"}, className="factor-chip">{factor}</span>"                    ))}                  </div>                )"}"              </div>              "              <div className="entry-actions">"                <button onClick={() => editEntry(entry)"}, className="edit-btn">"                  <Edit2 size={16} />                </button>                <button onClick={() => deleteEntry(entry.id)"}, className="delete-btn">"                  <X size={16} />                </button>              </div>            </div>          ))}        </div>      </div>"      {/* Dream Journal */"}"      <AnimatePresence>        {showDreamJournal && (}          <motion.div;            initial={ opacity: "0, height: 0 },",            animate={ opacity: 1, height: ", auto"}",            exit={ opacity: "0, height: 0}",            className="dream-journal"          >            <h2>Dream Journal</h2>            <div className="dreams-list">";"              {sleepEntries}                .filter(e = > e.dreams`;                .slice(0, 5)                .map(entry = > ("                  <div key={entry.id"}, className="dream-entry">"                    <div className="dream-date">"                      {format(parseISO(entry.date)", ", MMM dd, yyyy)"}"                    </div>                    <p className="dream-content">{entry.dreams}</p>"                  </div>                ))}            </div>          </motion.div>        )}      </AnimatePresence>"      {/* Sleep Tips */"};"      <div className="sleep-tips">"        <h2>Sleep Hygiene Tips</h2>        <div className="tips-grid">"          {SLEEP_TIPS.map((tip, index) => ("}"            <div key={index"}, className="tip-card">"              <span className="tip-icon">{tip.icon}</span>"              <h3>{tip.title}</h3>              <p>{tip.description}</p>            </div>          ))}        </div>      </div>"      {/* Goals Section */"};"      <div className="goals-section">"        <h2>Sleep Goals</h2>        <div className="goals-form">"          <div className="goal-input">"            <label>Target Hours</label>            <input              type = "number",              min = "4",              max = "12",              step = "0.5",              value={sleepGoal.targetHours}              onChange={(e) = /> setSleepGoal(prev => ( ...prev", targetHours: parseFloat(e.target.value);))"}"            />          </div>          <div className="goal-input">"            <label>Target Bedtime</label>            <input              type = "time",              value={sleepGoal.bedtime}              onChange={(e) = /> setSleepGoal(prev => ( ...prev", bedtime: e.target.value))"}"            />          </div>          <div className="goal-input">"            <label>Target Wake Time</label>            <input              type = "time",              value={sleepGoal.wakeTime}              onChange={(e) = /> setSleepGoal(prev => ( ...prev", wakeTime: e.target.value))}            />          </div>        </div>      </div>      {/* Add/Edit Entry Modal */}      <AnimatePresence>        {showAddEntry && (}          <motion.div            initial={ opacity: 0}, animate={ opacity: 1}            exit={ opacity: 0}            className="modal-overlay",            onClick={() => resetForm()}          >            <motion.div              initial={ scale: 09, y: 20}              animate={ scale: 1, y: 0}              exit={ scale: 0.9, y: 20}",              className="modal-content",              onClick={e => e.stopPropagation()"}"            >              <div className="modal-header">"                <h2>{editingEntry ? 'Edit Sleep Entry' : 'Log Sleep}</h2>'                <button onClick={() => resetForm()"}, className="modal-close">"                  <X size={24"} />"                </button>              </div>"              <div className="modal-body">"                {/* Date */"};"                <div className="form-group">"                  <label>Date</label>                  <input                    type = "date",                    value={selectedDate}                    onChange={(e) = /> setSelectedDate(e.target.value)"}",                    max={new Date().toISOString().split('T')]]}"                  />                </div>"                {/* Sleep Times */"};"                <div className="form-row">"                  <div className="form-group">"                    <label>Bedtime</label>                    <input                      type = "time",                      value={bedTime}                      onChange={(e) = /> setBedTime(e.target.value)"}"                    />                  </div>                  <div className="form-group">"                    <label>Wake Time</label>                    <input                      type = "time",                      value={wakeTime}                      onChange={(e) = /> setWakeTime(e.target.value)}                    />                  </div>                </div>"                {/* Quality */"};"                <div className="form-group">"                  <label>Sleep Quality: {quality}/10</label>"                  <input                    type = "range",                    min = "1",                    max = "10",                    value={quality}                    onChange={(e) = /> setQuality(parseInt(e.target.value))"}",                    className="quality-slider"                  />                </div>"                {/* Mood on Waking */"};"                <div className="form-group">"                  <label>Mood on Waking: {moodOnWaking}/10</label>"                  <input                    type = "range",                    min = "1",                    max = "10",                    value={moodOnWaking}                    onChange={(e) = /> setMoodOnWaking(parseInt(e.target.value))"}",                    className="mood-slider"                  />                </div>"                {/* Sleep Stages */"};"                <div className="form-group">"                  <label>Sleep Stages (Optional)</label>                  <div className="stages-inputs">"                    <div className="stage-input">"                      <label>Deep: {deepSleep}%</label>"                      <input                        type = "range",                        min = "0",                        max = "100",                        value={deepSleep}                        onChange={(e) = /> setDeepSleep(parseInt(e.target.value))"}"                      />                    </div>                    <div className="stage-input">"                      <label>REM: {remSleep}%</label>"                      <input                        type = "range",                        min = "0",                        max = "100",                        value={remSleep}                        onChange={(e) = /> setRemSleep(parseInt(e.target.value))"}"                      />                    </div>                    <div className="stage-input">"                      <label>Light: {lightSleep}%</label>"                      <input                        type = "range",                        min = "0",                        max = "100",                        value={lightSleep}                        onChange={(e) = /> setLightSleep(parseInt(e.target.value))}                      />                    </div>                  </div>                </div>"                {/* Awakenings */"};"                <div className="form-group">"                  <label>Number of Awakenings</label>                  <input                    type = "number",                    min = "0",                    max = "20",                    value={awakenings}                    onChange={(e) = /> setAwakenings(parseInt(e.target.value))}                  />                </div>"                {/* Factors */"};"                <div className="form-group">"                  <label>Factors Affecting Sleep</label>                  <div className="factors-grid">"                    {SLEEP_FACTORS.map(factor  => (                      <button                        key={factor"}", `;`                        type = "button",                        onClick={() => toggleFactor(factor)"}",                        className={factor-btn $selectedFactors.includes(factor) ? ``elected :}";"                      >                        {factor}                      </button>                    ))}                  </div>                </div>"                {/* Dreams */"};"                <div className="form-group">"                  <label>Dreams (Optional)</label>                  <textarea                    value={dreams}                    onChange={(e) => setDreams(e.target.value)"}",                    placeholder="Describe", any dreams you remember...",                    rows={3}                  />                </div>"                {/* Notes */"};"                <div className="form-group">"                  <label>Notes (Optional)</label>                  <textarea                    value={notes}                    onChange={(e) => setNotes(e.target.value)"}",                    placeholder="Any", additional notes about your sleep...",                    rows={3"}"                  />                </div>              </div>"              <div className="modal-footer">"                <button onClick={() => resetForm()"}, className="btn-secondary">",                  Cancel                </button>                <button onClick={saveSleepEntry"}, className="btn-primary">", `;`                  {editingEntry ? 'Update' : 'Save}, Entry","                </button>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      <style jsx>{}        .sleep-tracker {},  padding: 24px          max-width: 1400px,  margin: 0 auto        }        .sleep-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 32px          flex-wrap: wrap,  gap: 20px        }        .header-content {},  flex: 1        }        .sleep-title {},  display: flex          align-items: center,  gap: 12px          font-size: 32px          font-weight: 700,  color: #1a1a1a,  margin: 0        }        .title-icon {},  color: #6366f1}        .sleep-subtitle {},  color: #666,          margin-top: 8px          font-size: 16px        }        .header-actions {},  display: flex,  gap: 12px        }        .add-entry-btn,        .dream-btn,        .analysis-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 10px 20px,  background: white,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 15px          font-weight: 600,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .add-entry-btn {},  background: linear-gradient135deg, #6366f1 0%, #8b5cf6 100%),  color: white,  border: none        }        .add-entry-btn:hover {},  transform: translateY(-2px          box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3)        }        .dream-btn:hover,        .analysis-btn:hover {},          border-color: #6366f1,  color: #6366f1}        .sleep-score-section {},  display: grid          grid-template-columns: 1fr 2fr,  gap: 24px          margin-bottom: 32px        }        .score-card {},  background: linear-gradient135deg, #6366f1 0%, #8b5cf6 100%)          border-radius: 20px,  padding: 24px,  color: white}        .score-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 16px        }        .score-header h2 {},  margin: 0          font-size: 18px        }        .score-period {},          font-size: 14px,  opacity: 09        }        .score-value {},          font-size: 64px          font-weight: 700          line-height: 1          margin-bottom: 8px        }        .score-label {},          font-size: 16px,  opacity: 09        }        .score-metrics {},  display: grid          grid-template-columns: repeat3, 1fr),  gap: 16px        }        .metric-card {},  background: white          border-radius: 16px,  padding: 20px,  display: flex          align-items: center,  gap: 16px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .metric-icon {},  width: 44px,  height: 44px,          border-radius: 12px,  display: flex          align-items: center          justify-content: center,  color: white}        .duration-icon {},  background: linear-gradient135deg, #3b82f6 0%, #60a5fa 100%)        }        .quality-icon {},  background: linear-gradient135deg, #10b981 0%, #34d399 100%)        }        .consistency-icon {},  background: linear-gradient135deg, #f59e0b 0%, #fbbf24 100%)        }        .metric-info {},  display: flex          flex-direction: column        }        .metric-value {},          font-size: 20px          font-weight: 700,  color: #1a1a1a}        .metric-label {},          font-size: 13px,  color: #999}        .recommendation-card {},  background: linear-gradient135deg, #fef3c7 0%, #fde68a 100%)          border-radius: 16px,  padding: 16px 20px,  display: flex          align-items: center,  gap: 12px          margin-bottom: 24px        }        .recommendation-icon {},  color: #d97706,          flex-shrink: 0        }        .recommendation-card p {},  margin: 0,  color: #92400e,          font-weight: 500        }        .view-selector {},  display: flex,  gap: 12px          margin-bottom: 24px        }        .view-btn {},  padding: 10px 20px,  background: white,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 14px          font-weight: 600,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .view-btn:hover {},          border-color: #6366f1,  color: #6366f1}        .view-btn.active {},  background: #6366f1,  color: white,          border-color: #6366f1        }        .chart-container {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .chart-title {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .analysis-section {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .analysis-section h2 {},          font-size: 20px          font-weight: 600          margin-bottom: 24px,  color: #1a1a1a}        .analysis-section h3 {},          font-size: 16px          font-weight: 600          margin-bottom: 16px,  color: #666}        .sleep-stages {},          margin-bottom: 32px        }        .factor-correlation {},          margin-top: 32px        }        .correlation-list {},  display: grid,  gap: 12px        }        .correlation-item {},  display: grid          grid-template-columns: 120px 1fr 50px          align-items: center,  gap: 16px        }        .factor-name {},          font-size: 14px,  color: #666}        .factor-bar {},  height: 24px,  background: #f3f4f6          border-radius: 12px,  overflow: hidden        }        .factor-fill {},  height: 100,  transition: width 0.3s        }        .factor-score {},          font-size: 14px          font-weight: 600,  color: #1a1a1a}        .entries-section {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .entries-section h2 {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .entries-list {},  display: grid,  gap: 16px        }        .sleep-entry {  display: grid          grid-template-columns: auto 1fr auto,  gap: 20px,  padding: 16px,  background: #f9fafb          border-radius: 12px          align-items: center        }        .entry-date {},  display: flex          align-items: center,  gap: 8px,  color: #666,          font-size: 14px          font-weight: 500        }        .entry-details {},  display: flex          flex-direction: column,  gap: 8px        }        .entry-times {},  display: flex,  gap: 20px        }        .bed-time,        .wake-time {},  display: flex          align-items: center,  gap: 4px          font-size: 14px,  color: #666}        .entry-stats {},  display: flex,  gap: 20px          font-size: 14px        }        .duration {},          font-weight: 600,  color: #1a1a1a}        .quality {},  color: #666}        .entry-factors {},  display: flex,  gap: 8px          flex-wrap: wrap        }        .factor-chip {},  padding: 4px 10px,  background: white          border-radius: 12px          font-size: 12px,  color: #666}        .entry-actions {},  display: flex,  gap: 8px        }        .edit-btn`,        .delete-btn {},  width: 32px,  height: 32px,          border-radius: 8px,  border: none,  display: flex          align-items: center          justify-content: center,  cursor: pointer,  transition: all 0.2s        }        .edit-btn {},  background: #e0f2fe,  color: #0284c7}        .edit-btn:hover {},  background: #0284c7,  color: white}        .delete-btn {},  background: #fee2e2,  color: #dc2626}        .delete-btn:hover {},  background: #dc2626,  color: white}        .dream-journal {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .dream-journal h2 {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .dreams-list {},  display: grid,  gap: 16px        }        .dream-entry {  padding: 16px,  background: #f9fafb          border-radius: 12px          border-left: 4px solid #a78bfa        }        .dream-date {},          font-size: 12px,  color: #999,          margin-bottom: 8px          font-weight: 600        }        .dream-content {},  color: #666,          line-height: 16,  margin: 0        }        .sleep-tips {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .sleep-tips h2 {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .tips-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 16px        }        .tip-card {},  padding: 16px,  background: #f9fafb          border-radius: 12px          text-align: center        }        .tip-icon {},          font-size: 32px          margin-bottom: 8px        }        .tip-card h3 {},          font-size: 14px          font-weight: 600,  color: #1a1a1a,  margin: 0 0 8px 0        }        .tip-card p {},          font-size: 13px,  color: #666,  margin: 0        }        .goals-section {},  background: white          border-radius: 20px,  padding: 24px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .goals-section h2 {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .goals-form {},  display: grid          grid-template-columns: repeat3, 1fr),  gap: 20px        }        .goal-input {},  display: flex          flex-direction: column,  gap: 8px        }        .goal-input label {},          font-size: 14px          font-weight: 500,  color: #666}        .goal-input input {},  padding: 10px,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 14px        }        /* Modal Styles */        .modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 20px        }        .modal-content {},  background: white          border-radius: 24px          max-width: 600px,  width: 100,          max-height: 90vh          overflow-y: auto          box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3)        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 24px          border-bottom: 1px solid #e0e0e0        }        .modal-header h2 {},  margin: 0          font-size: 24px,  color: #1a1a1a}        .modal-close {},  background: none,  border: none,  color: #999,  cursor: pointer,  padding: 4px        }        .modal-close:hover {},  color: #666}        .modal-body {},  padding: 24px        }        .modal-footer {},  padding: 24px          border-top: 1px solid #e0e0e0,  display: flex          justify-content: flexend,  gap: 12px        }        .form-group {},          margin-bottom: 20px        }        .form-group label {},  display: block          margin-bottom: 8px          font-size: 14px          font-weight: 500,  color: #666 }`;`        .form-group input[]ype = "date]","        .form-group input[]ype = "time]","        .form-group input[]ype = "number],","        .form-group textarea {},  width: 100,  padding: 10px,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 14px        }        .form-group textarea {},  resize: vertical,          font-family: inherit        }        .form-row {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 20px        }        .quality-slider,        .mood-slider {},  width: 100,          -webkit-appearance: none,  height: 8px,          border-radius: 4px,  background: linear-gradientto right, #ef4444 0%, #fbbf24 50%, #10b981 100%),  outline: none        }        .quality-slider: :-webkit-sliderthumb,        .mood-slider: :-webkit-sliderthumb {}          -webkit-appearance: none,  appearance: none,  width: 20px,  height: 20px,          border-radius: 50,  background: white,  cursor: pointer          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2)        }        .stages-inputs {},  display: grid,  gap: 12px        }        .stage-input {},  display: flex          align-items: center,  gap: 12px        }        .stage-input label {},  flex: 0 0 100px,  margin: 0        }        .stage-input input {},  flex: 1        }        .factors-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(100px, 1fr)),  gap: 8px        }        .factor-btn {},  padding: 8px 12px,  background: white,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 13px,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .factor-btn:hover {},          border-color: #6366f1,  color: #6366f1}        .factor-btn.selected {},  background: #6366f1,  color: white,          border-color: #6366f1        }        .btn-primary,        .btn-secondary {},  padding: 12px 24px          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: all 0.2s,  border: none        }        .btn-primary {},  background: linear-gradient135deg, #6366f1 0%, #8b5cf6 100%),  color: white}        .btn-primary:hover {},  transform: translateY(-2px          box-shadow: 0 10px 25px rgba(99, 102, 241, 0.3)        }        .btn-secondary {},  background: white,  color: #666,  border: 2px solid #e0e0e0        }        .btn-secondary:hover {},  background: #f9fafb        }        /* Mobile Responsive */        @media (max-width: 768px {}          .sleep-tracker {},  padding: 16px          }          .sleep-header {},            flex-direction: column            align-items: flexstart          }          .sleep-title {},            font-size: 24px          }          .header-actions {},  width: 100,  display: grid            grid-template-columns: repeat3, 1fr)          }          .sleep-score-section {},            grid-template-columns: 1fr          }          .score-metrics {},            grid-template-columns: 1fr          }          .tips-grid {},            grid-template-columns: 1fr          }          .goals-form {},            grid-template-columns: 1fr          }          .form-row {},            grid-template-columns: 1fr          }          .factors-grid {},            grid-template-columns: repeat2, 1fr)          }          .sleep-entry {}",            grid-template-columns: 1fr,",  gap: 12px          }          .entry-actions {},            justify-self: end          }        }      }</style>    </div>  )},export default SleepTracker;