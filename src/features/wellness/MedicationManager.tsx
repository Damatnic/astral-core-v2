import React, { useState, useEffect }, from "react",import { Pill, Clock, Calendar, AlertCircle, Plus, Edit2, Trash2, Bell, CheckCircle, X, RefreshCw, FileText }, from "lucide-react",import { format, addDays, isPast, isToday, isFuture, parseISO }, from "date-fns",import { motion, AnimatePresence }, from "framer-motion",interface Medication {}  id: "string,", `;`  name: "string,",  dosage: "string,",  frequency: "daily  | ", twice-daily'  | 'three-times'  | 'weekly"  | ", as-needed",  times: string[,]  startDate: string  endDate ? : string  refillDate?: string  quantity?: number  remaining?: number  instructions?: string  sideEffects?: string[]  doctorNotes?: string,  color: string},interface MedicationLog {}  id: string,  medicationId: string,  date: string,  time: string,  taken: boolean  skipped ? : boolean  notes?: string  sideEffects?: string[]},interface Reminder {}  id: string,  medicationId: string,  time: string,  enabled: boolean},const FREQUENCY_OPTIONS = []];"  { value: "daily, label: ", Once", Daily, times: 1 }",","  { value: "twice-daily, label: ", Twice", Daily, times: 2 }"  { value: "three-times, label: ", Three", Times Daily, times: 3 }","  { value: "weekly, label: ", Weekly", times: 1 }","  { value: "as-needed, label: ", As", Needed, times: 0 }"]",const COMMON_SIDE_EFFECTS = []ausea", ", Headache", ", Dizziness", ", Drowsiness", ", Dry mouth"];",  "Fatigue", ", Insomnia", ", Appetite changes", ", Weight changes",",  "Anxiety", ", Mood changes", ", Digestive issues"]",const PILL_COLORS = []ef4444", ", #f97316", ", #fbbf24", ", #84cc16", ", #22c55e"];",  "06b6d4", ", #3b82f6", ", #6366f1", ", #8b5cf6", ", #ec4899"]",export const MedicationManager: ReactFC = () => {},  const []edications, setMedications] = useState<Medication[]>([])  const []edicationLogs, setMedicationLogs] = useState<MedicationLog[]>([])  const []eminders, setReminders] = useState<Reminder[]>([])  const []howAddMed, setShowAddMed] = useState(false)  const []ditingMed, setEditingMed] = useState<Medication | null>(null);  const []electedDate", setSelectedDate] = useState(new Date().toISOString().split(', T')]]);",  const []howAdherence, setShowAdherence] = useState(false)  // Form states,  const []edName", setMedName] = useState(")"),",  const []osage", setDosage] = useState(")"),",  const []requency", setFrequency] = useState<Medication[]requency]>(", daily)")",  const []imes", setTimes] = useState<string[]>([]8: ", 00]);",  const []tartDate", setStartDate] = useState(new Date().toISOString().split(', T')]]);",  const []ndDate", setEndDate] = useState(")"),",  const []efillDate", setRefillDate] = useState(")"),",  const []uantity, setQuantity] = useState(30)  const []emaining, setRemaining] = useState(30)  const []nstructions", setInstructions] = useState(")"),",  const []electedSideEffects, setSelectedSideEffects] = useState<string[]>([])  const []octorNotes", setDoctorNotes] = useState(")"),;",  const []electedColor", setSelectedColor] = useState(PILL_COLORS[]]);"  // Load data from localStorage  useEffect(() => {},    const savedMeds = localStorage.getItem("medications");",    const savedLogs = localStorage.getItem("medicationLogs");",    const savedReminders = localStorage.getItem("medicationReminders");",    if (savedMeds) setMedications(JSON.parse(savedMeds))    if (savedLogs) setMedicationLogs(JSON.parse(savedLogs))    if (savedReminders) setReminders(JSON.parse(savedReminders))  }", []);"  // Save data to localStorage  useEffect(() => {},    if (medications.length > 0) {      localStorage.setItem(medications", JSON.stringify(medications"));"    }  }", []edications]);",  useEffect(() => {},    if (medicationLogs.length > 0) {      localStorage.setItem("medicationLogs", JSON.stringify(medicationLogs"));"    }  }", []edicationLogs]);",  useEffect(() => {},    if (reminders.length > 0) {      localStorage.setItem("medicationReminders", JSON.stringify(reminders"));"    }  }, []eminders])  // Check for due medications  useEffect(() => {},    const checkReminders = () => {},      const now = new Date(),;      const currentTime = format(now, ", HH: "mm);,      medications.forEach(med  => {}        if (med.times.includes(currentTime)) {}          // In production, trigger notification;        }      })    },    const interval = setInterval(checkReminders, 60000); // Check every minute    return () => clearInterval(interval  }, []edications]);  const saveMedication = () => {},    const newMed: Medication=},  id: editingMed?id || Date.now().toString(),      name: medName,      dosage,      frequency,      times,      startDate,      endDate,      refillDate,      quantity,      remaining,      instructions,      sideEffects: selectedSideEffects,      doctorNotes,      color: selectedColor},    if (editingMed)  {      setMedications(prev = > prev.map(m => m.id === editingMed.id ? newMed : m));    }, else {      setMedications(prev = > []..prev, newMed]`;            // Create reminders      times.forEach(time  => {}        const reminder: Reminder=},  id: Date.now().toString( + time,          medicationId: newMedid,          time`,          enabled: true        },        setReminders(prev = > []..prev, reminder]`;      })    },    resetForm()  },  const resetForm = () => {},    setShowAddMed(false)    setEditingMed(null)    setMedName(    setDosage()");",    setFrequency("daily"),",    setTimes([]8: "00]),    setStartDate(new Date().toISOString().split('T')]]);",    setEndDate(")");",    setRefillDate(")");",    setQuantity(30)    setRemaining(30)    setInstructions(")"),",    setSelectedSideEffects([])    setDoctorNotes(")"),",    setSelectedColor(PILL_COLORS[]])  },  const editMedication = (med: Medication => {},    setEditingMed(med)    setMedName(med.name)    setDosage(med.dosage)    setFrequency(med.frequency)    setTimes(med.times)    setStartDate(med.startDate)    setEndDate(med.endDate | | ");",    setRefillDate(med.refillDate | | ");",    setQuantity(med.quantity || 30)    setRemaining(med.remaining || 30)    setInstructions(med.instructions | | "),",    setSelectedSideEffects(med.sideEffects || [])    setDoctorNotes(med.doctorNotes | | ");",    setSelectedColor(med.color)    setShowAddMed(true)  },  const deleteMedication = (id: string => {},    setMedications(prev = > prev.filter(m => m.id !== id));    setReminders(prev = > prev.filter(r => r.medicationId !== id));    setMedicationLogs(prev = > prev.filter(l => l.medicationId !== id));  " },",  const logMedication = (medicationId: "string, time: string, taken: boolean => {}", `;`    const log: MedicationLog=},  id: Date.now().toString(,      medicationId,      date: selectedDate,      time,      taken,      skipped: !taken    },    setMedicationLogs(prev = > []..prev, log]);    // Update remaining quantity    if (taken)  {      setMedications(prev = > prev.map(m => , m.id = == medicationId && m.remaining;          ? { ...m, remaining: mremaining - 1 }          : m      ))    }  },  const getTodaysMedications = () => {};    const today = new Date().toISOString().split(T")[]];",    return medications.filter(med  => }      const isActive = med.startDate <= today && (!med.endDate || med.endDate >= today);      return isActive && med.frequency !== "as-needed;"    });  " },",  const getMedicationStatus = (medicationId: "string, time: string => {}",    const log = medicationLogs.find(l => , l.medicationId = == medicationId && ;      l.date = == selectedDate && ;",      l.time = == "time"    )    return log  };  const calculateAdherence = () => {},    const last30Days = React.useMemo(() => medicationLogs.filter(log => {},      const logDate = new Date(log.date), []edicationLogs]);      const thirtyDaysAgo = addDays(new Date(), -30);      return logDate >= "thirtyDaysAgo    });    const totalExpected = last30Days.length;    const totalTaken = React.useMemo(() => last30Days.filter(l => l.taken).length, []ast30Days]);        return totalExpected > 0 ? (totalTaken / totalExpected) * 100  0  };  const updateFrequency = (newFreq: Medication[]requency] => {},    setFrequency(newFreq)    const option = FREQUENCY_OPTIONS.find(o => o.value === newFreq),;    if (option) {      if (option.times = == 1) setTimes([]8: "00]);,      else if (option.times = == 2) setTimes([]8: "00, ", 20: "00]);,      else if (option.times = == 3) setTimes([]8: "00, ", 14: "00, ", 20: "00]);,      else if (option.times = == 0) setTimes([]);    }  },  const toggleSideEffect = (effect: string => {},    setSelectedSideEffects(prev = >, prev.includes(effect)        ? prev.filter(e = > e !== effect);        : []..prev, effect]    )  },  const adherenceRate = calculateAdherence();  return (    <div className="medication-manager">;"      {/* Header */"};"      <div className="med-header">"        <div className="header-content">"          <h1 className="med-title">"            <Pill className="title-icon" />",            Medication Manager          </h1>          <p className="med-subtitle">Track medications, set reminders", and monitor adherence</p>"        </div>        "        <div className="header-actions">"          <button            onClick={() => setShowAddMed(true)"}",            className="add-med-btn"          >            <Plus size={20} />;            Add Medication          </button>          <button            onClick={() => setShowAdherence(!showAdherence)"}",            className="adherence-btn"          >            <CheckCircle size={20} />;            Adherence          </button>        </div>      </div>"      {/* Adherence Overview */"}"      <AnimatePresence>        {showAdherence && (}          <motion.div;            initial={ opacity: "0, height: 0 },",            animate={ opacity: 1, height: ", auto"}",            exit={ opacity: "0, height: 0}",            className="adherence-overview"          >            <div className="adherence-score">"              <div className="score-circle">"                <svg width = "120", height=", 120">"                  <circle                    cx = "60",                    cy = "60",                    r = "50",                    fill = "none",                    stroke = "e0e0e0",                    strokeWidth = "10"                  />                  <circle                    cx = "60",                    cy = "60",                    r = "50",                    fill = "none",                    stroke = "10b981",                    strokeWidth = "10",                    strokeDasharray={$adherenceRate * 3.14", 314"}",                    transform="rotate(-90", 60 60);"                  />                </svg>                <div className="score-text">{Math.round(adherenceRate)"}%</div>"              </div>              <div className="score-label">30-Day Adherence</div>"            </div>            "            <div className="adherence-stats">"              <div className="stat">"                <span className="stat-value">{medicationLogs.filter(l => l.taken).length"}</span>"                <span className="stat-label">Doses Taken</span>"              </div>              <div className="stat">"                <span className="stat-value">{medicationLogs.filter(l => l.skipped).length"}</span>"                <span className="stat-label">Doses Missed</span>"              </div>              <div className="stat">"                <span className="stat-value">{medications.length"}</span>"                <span className="stat-label">Active Meds</span>"              </div>            </div>          </motion.div>        )}      </AnimatePresence>"      {/* Refill Alerts */"}"      {medications.some(m = > m.remaining && m.remaining <= 7) && ("; };"        <div className="refill-alert">"          <AlertCircle className="alert-icon" />"          <div className="alert-content">"            <h3>Refill Needed Soon</h3>            <div className="refill-list">"              {medications}                .filter(m = > m.remaining && m.remaining <= 7);                .map(med = > ("                  <div key={med.id"}, className="refill-item">"                    <span className="med-name">{med.name"}</span>"                    <span className="remaining">{med.remaining}, pills left</span>"                  </div>                ))}            </div>          </div>        </div>      )}      {/* Date Selector */"};"      <div className="date-selector">"        <button          onClick={() =>;            const yesterday = addDays(new Date(selectedDate), -1);            setSelectedDate(format(yesterday, 'yyyy-MM-dd'))'          }},          className="date-nav-btn"        >          ←        </button>        <input          type = "date",          value={selectedDate}          onChange={(e) = /> setSelectedDate(e.target.value)"}",          className="date-input"        />        <button          onClick={() =>",            const tomorrow = addDays(new Date(selectedDate), 1);            setSelectedDate(format(tomorrow", ", yyyy-MM-dd'))'          }},          className="date-nav-btn"        >          →"        </button>        {selectedDate !== new Date().toISOString().split('T')]] && ("}"          <button",",            onClick={() => setSelectedDate(new Date().toISOString().split('T')]])"}",            className="today-btn"          >            Today          </button>        )}      </div>"      {/* Today's Medications */'}","      <div className="todays-meds">","        <h2>Schedule for {format(parseISO(selectedDate)", ", MMMM d, yyyy)"}</h2>",        "        {getTodaysMedications().length = == 0 ? ("; };"          <div className="no-meds">"            <p>No medications scheduled for this day</p>          </div>        ) : ("          <div className="med-schedule">"            {getTodaysMedications().map(med = > ("; };"              <div key={med.id"}, className="med-card">"                <div className="med-header-card">"                  <div ",                    className="med-color-indicator",                    style={ backgroundColor: medcolor}                  />                  <div className="med-info">"                    <h3>{med.name"}</h3>"                    <p className="dosage">{med.dosage"}</p>"                  </div>                </div>                "                <div className="med-times">";"                  {med.times.map(time = > {},                    const status = getMedicationStatus(med.id, time`;                    return (;                      <div key={time"}, className="time-slot">", ", `;`                        <Clock size={16"} />"                        <span className="time">{time"}</span>"                        {status ? ("}"                          <span className={status $status.taken ? ``aken' : skipped'}>"`;`                            {status.taken ? `` Taken' : ', Skipped"}"                          </span>                        ) : (";"                          <div className="action-buttons">"                            <button                              onClick={() => logMedication(med.id, time, true)"}",                              className="take-btn"                            >                              Take                            </button>                            <button                              onClick={() => logMedication(med.id, time", false)"}", `;`                              className="skip-btn"                            >                              Skip                            </button>                          </div>                        )}                      </div>                    `;                  })"}"                </div>                ";"                {med.instructions && ("}"                  <div className="instructions">"                    <FileText size={14} />                    <span>{med.instructions}</span>                  </div>                )}              </div>            ))}          </div>        )}      </div>"      {/* All Medications */"};"      <div className="all-meds">"        <h2>All Medications</h2>        <div className="meds-grid">"          {medications.map(med = > ("; };"            <div key={med.id"}, className="med-item">"              <div ",                className="med-indicator",                style={ backgroundColor: medcolor}              />              <div className="med-details">";"                <h4>{med.name}</h4>                <p>{med.dosage"} - {med.frequency.replace(", -`, `)}`/p>")"                {med.remaining && med.remaining <= 7 && ("}"                  <span className="low-stock">Low stock: {medremaining}, left</span>", ", `;`                )"}"              </div>              <div className="med-actions">"                <button onClick={() => editMedication(med)"}, className="edit-btn">"                  <Edit2 size={16} />                </button>                <button onClick={() => deleteMedication(med.id)"}, className="delete-btn">"                  <Trash2 size={16} />;                </button>              </div>            </div>          ))}        </div>      </div>      {/* Add/Edit Medication Modal */}      <AnimatePresence>        {showAddMed && (}          <motion.div            initial={ opacity: 0}, animate={ opacity: 1}            exit={ opacity: 0}";",            className="modal-overlay",            onClick={resetForm}          >            <motion.div              initial={ scale: 0.9, `: 20}";",              animate={ scale: 1, y: 0}              exit={ scale: 0.9, y: 20}",              className="modal-content",              onClick={e => e.stopPropagation()"}"            >              <div className="modal-header">"                <h2>{editingMed ? 'Edit Medication' : 'Add Medication}</h2>'                <button onClick={resetForm"}, className="modal-close">"                  <X size={24"} />"                </button>              </div>"              <div className="modal-body">"                {/* Basic Info */"};"                <div className="form-section">"                  <h3>Basic Information</h3>                  <div className="form-group">"                    <label>Medication Name</label>                    <input                      type = "text",                      value={medName}                      onChange={(e) = /> setMedName(e.target.value)"}",                      placeholder = "e.g.", Aspirin"                    />                  </div>                  "                  <div className="form-group">"                    <label>Dosage</label>                    <input                      type = "text",                      value={dosage}                      onChange={(e) = /> setDosage(e.target.value)"}",                      placeholder = "e.g.", 100mg"                    />                  </div>                  "                  <div className="form-group">"                    <label>Color</label>                    <div className="color-picker">"                      {PILL_COLORS.map(color  => (                        <button",                          key={color}";",                          onClick={() => setSelectedColor(color)"}",                          className={color-option $selectedColor === color ? ``elected :}                          style={ backgroundColor: color}";"                        />                      ))}                    </div>                  </div>                </div>"                {/* Schedule */"};"                <div className="form-section">"                  <h3>Schedule</h3>                  <div className="form-group">"                    <label>Frequency</label>                    <select                      value={frequency}                      onChange={(e) => updateFrequency(e.target.value as Medication[]requency])}                    >                      {FREQUENCY_OPTIONS.map(opt  => (                        <option key={opt.value}, value={opt.value}>                          {opt.label}                        </option>                      ))"}"                    </select>                  </div>                  ","                  {frequency !== "as-needed" && ("}"                    <div className="form-group">"                      <label>Times</label>                      <div className="times-input">"                        {times.map((time, index) => (}                          <input                            key={index"}",                            type = "time",                            value={time}                            onChange={(e) = />;                              const newTimes = []..times];                              newTimes[]ndex] = e.target.value                              setTimes(newTimes)                            }}                          />                        ))}                      </div>                    </div>                  )}                  <div className="form-row">"                    <div className="form-group">"                      <label>Start Date</label>                      <input                        type = "date",                        value={startDate}                        onChange={(e) = /> setStartDate(e.target.value)"}"                      />                    </div>                    <div className="form-group">"                      <label>End Date (Optional)</label>                      <input                        type = "date",                        value={endDate}                        onChange={(e) = /> setEndDate(e.target.value)}                      />                    </div>                  </div>                </div>"                {/* Supply */"};"                <div className="form-section">"                  <h3>Supply Information</h3>                  <div className="form-row">"                    <div className="form-group">"                      <label>Total Quantity</label>                      <input                        type = "number",                        value={quantity}                        onChange={(e) = /> setQuantity(parseInt(e.target.value))"}"                      />                    </div>                    <div className="form-group">"                      <label>Remaining</label>                      <input                        type = "number",                        value={remaining}                        onChange={(e) = /> setRemaining(parseInt(e.target.value))"}"                      />                    </div>                  </div>                  "                  <div className="form-group">"                    <label>Refill Date</label>                    <input                      type = "date",                      value={refillDate}                      onChange={(e) = /> setRefillDate(e.target.value)}                    />                  </div>                </div>"                {/* Additional Info */"};"                <div className="form-section">"                  <h3>Additional Information</h3>                  <div className="form-group">"                    <label>Instructions</label>                    <textarea",                      value={instructions}";",                      onChange={(e) => setInstructions(e.target.value)"}",",                      placeholder = "e.g.``, Take with food",                      rows={3"}", `;`                    />                  </div>                  "                  <div className="form-group">"                    <label>Side Effects</label>                    <div className="side-effects-grid">"                      {COMMON_SIDE_EFFECTS.map(effect  => (                        <button                          key={effect"}", `;`                          type = "button",                          onClick={() => toggleSideEffect(effect)"}",                          className={effect-btn $selectedSideEffects.includes(effect) ? ``elected :}";"                        >                          {effect}                        </button>                      ))"}"                    </div>                  </div>                  "                  <div className="form-group">"                    <label>Doctor's Notes</label>'                    <textarea",                      value={doctorNotes}",",                      onChange={(e) => setDoctorNotes(e.target.value)"}",                      placeholder="Any", special instructions from your doctor...",                      rows={3"}"                    />                  </div>                </div>              </div>"              <div className="modal-footer">"                <button onClick={resetForm"}, className="btn-secondary">",                  Cancel                </button>                <button onClick={saveMedication"}, className="btn-primary">", `;`                  {editingMed ? 'Update' : 'Save}, Medication","                </button>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      <style jsx>{}        .medication-manager {},  padding: 24px          max-width: 1400px,  margin: 0 auto        }        .med-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 32px          flex-wrap: wrap,  gap: 20px        }        .header-content {},  flex: 1        }        .med-title {},  display: flex          align-items: center,  gap: 12px          font-size: 32px          font-weight: 700,  color: #1a1a1a,  margin: 0        }        .title-icon {},  color: #10b981}        .med-subtitle {},  color: #666,          margin-top: 8px          font-size: 16px        }        .header-actions {},  display: flex,  gap: 12px        }        .add-med-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 10px 20px,  background: linear-gradient135deg, #10b981 0%, #059669 100%),  color: white,  border: none          border-radius: 12px          font-size: 15px          font-weight: 600,  cursor: pointer,  transition: all 0.2s        }        .add-med-btn:hover {},  transform: translateY(-2px          box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3)        }        .adherence-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 10px 20px,  background: white,  border: 2px solid #e0e0e0          border-radius: 12px          font-size: 15px          font-weight: 600,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .adherence-btn:hover {},          border-color: #10b981,  color: #10b981}        .adherence-overview {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 24px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05),  display: flex          align-items: center,  gap: 48px        }        .adherence-score {},          text-align: center        }        .score-circle {},  position: relative,  width: 120px,  height: 120px,  margin: 0 auto 12px        }        .score-text {},  position: absolute,  top: 50,  left: 50,  transform: translate(-50, -50%)          font-size: 32px          font-weight: 700,  color: #10b981}        .score-label {},          font-size: 14px,  color: #666,          font-weight: 500        }        .adherence-stats {},  display: flex,  gap: 48px        }        .stat {},  display: flex          flex-direction: column        }        .stat-value {},          font-size: 28px          font-weight: 700,  color: #1a1a1a}        .stat-label {},          font-size: 14px,  color: #999}        .refill-alert {},  background: linear-gradient135deg, #fef3c7 0%, #fde68a 100%)          border-radius: 16px,  padding: 16px 20px,  display: flex,  gap: 16px          margin-bottom: 24px        }        .alert-icon {},  color: #d97706,          flex-shrink: 0        }        .alert-content h3 {},  margin: 0 0 8px 0          font-size: 16px,  color: #92400e}        .refill-list {},  display: flex          flex-direction: column,  gap: 4px        }        .refill-item {},  display: flex          justify-content: spacebetween          font-size: 14px        }        .med-name {},          font-weight: 500,  color: #92400e}        .remaining {},  color: #d97706}        .date-selector {},  display: flex          align-items: center,  gap: 12px          margin-bottom: 24px          justify-content: center        }        .date-nav-btn {},  width: 36px,  height: 36px,          border-radius: 8px,  background: white,  border: 2px solid #e0e0e0,  display: flex          align-items: center          justify-content: center,  cursor: pointer,  transition: all 0.2s        }        .date-nav-btn:hover {},          border-color: #10b981,  color: #10b981}        .date-input {},  padding: 8px 12px,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 14px        }        .today-btn {},  padding: 8px 16px,  background: #10b981,  color: white,  border: none          border-radius: 8px          font-size: 14px          font-weight: 500,  cursor: pointer        }        .todays-meds {},  background: white          border-radius: 20px,  padding: 24px          margin-bottom: 32px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .todays-meds h2 {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .no-meds {},          text-align: center,  padding: 40px,  color: #999}        .med-schedule {},  display: grid,  gap: 16px        }        .med-card {},  background: #f9fafb          border-radius: 12px,  padding: 16px        }        .med-header-card {},  display: flex          align-items: center,  gap: 12px          margin-bottom: 16px        }        .med-color-indicator {},  width: 8px,  height: 40px,          border-radius: 4px        }        .med-info h3 {},  margin: 0          font-size: 18px,  color: #1a1a1a}        .dosage {},  margin: 4px 0 0 0,  color: #666,          font-size: 14px        }        .med-times {},  display: grid,  gap: 12px        }        .time-slot {},  display: flex          align-items: center,  gap: 12px,  padding: 8px 12px,  background: white          border-radius: 8px        }        .time {},          font-weight: 500,  color: #1a1a1a}        .status {},          margin-left: auto,  padding: 4px 12px          border-radius: 20px          font-size: 13px          font-weight: 500        }        .status.taken {},  background: #dcfce7,  color: #16a34a}        .status.skipped {},  background: #fee2e2,  color: #dc2626}        .action-buttons {},          margin-left: auto,  display: flex,  gap: 8px        }        .take-btn,        .skip-btn {},  padding: 4px 12px          border-radius: 6px,  border: none          font-size: 13px          font-weight: 500,  cursor: pointer,  transition: all 0.2s        }        .take-btn {},  background: #10b981,  color: white}        .take-btn:hover {},  background: #059669        }        .skip-btn {},  background: #f3f4f6,  color: #666}        .skip-btn:hover {},  background: #e5e7eb        }        .instructions {},  display: flex          align-items: center,  gap: 8px          margin-top: 12px          padding-top: 12px          border-top: 1px solid #e0e0e0          font-size: 14px,  color: #666}        .all-meds {},  background: white          border-radius: 20px,  padding: 24px          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05)        }        .all-meds h2 {},          font-size: 20px          font-weight: 600          margin-bottom: 20px,  color: #1a1a1a}        .meds-grid {},  display: grid,  gap: 12px        }        .med-item {},  display: flex          align-items: center,  gap: 16px,  padding: 16px,  background: #f9fafb          border-radius: 12px        }        .med-indicator {},  width: 6px,  height: 40px,          border-radius: 3px        }        .med-details {},  flex: 1        }        .med-details h4 {},  margin: 0          font-size: 16px,  color: #1a1a1a}        .med-details p {},  margin: 4px 0 0 0          font-size: 14px,  color: #666}        .low-stock {},  display: inlineblock          margin-top: 4px,  padding: 2px 8px,  background: #fef3c7,  color: #d97706,          border-radius: 12px          font-size: 12px          font-weight: 500        }        .med-actions {},  display: flex,  gap: 8px        }        .edit-btn,        .delete-btn {},  width: 32px,  height: 32px,          border-radius: 8px,  border: none,  display: flex          align-items: center          justify-content: center,  cursor: pointer,  transition: all 0.2s        }        .edit-btn {},  background: #e0f2fe,  color: #0284c7}        .edit-btn:hover {},  background: #0284c7,  color: white}        .delete-btn {},  background: #fee2e2,  color: #dc2626}        .delete-btn:hover {},  background: #dc2626,  color: white}        /* Modal Styles */        .modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 20px        }        .modal-content {},  background: white          border-radius: 24px          max-width: 700px,  width: 100,          max-height: 90vh          overflow-y: auto          box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3)        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 24px          border-bottom: 1px solid #e0e0e0        }        .modal-header h2 {},  margin: 0          font-size: 24px,  color: #1a1a1a}        .modal-close {},  background: none,  border: none,  color: #999,  cursor: pointer,  padding: 4px        }        .modal-close:hover {},  color: #666}        .modal-body {},  padding: 24px        }        .modal-footer {},  padding: 24px          border-top: 1px solid #e0e0e0,  display: flex          justify-content: flexend,  gap: 12px        }        .form-section {},          margin-bottom: 32px        }        .form-section: lastchild {},          margin-bottom: 0        }        .form-section h3 {},          font-size: 16px          font-weight: 600,  color: #1a1a1a,  margin: 0 0 16px 0        }        .form-group {},          margin-bottom: 20px        }        .form-group label {},  display: block          margin-bottom: 8px          font-size: 14px          font-weight: 500,  color: #666}        .form-group input,        .form-group select,        .form-group textarea {},  width: 100,  padding: 10px,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 14px        }        .form-group textarea {},  resize: vertical,          font-family: inherit        }        .form-row {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 20px        }        .color-picker {},  display: flex,  gap: 8px        }        .color-option {},  width: 32px,  height: 32px,          border-radius: 8px,  border: 2px solid transparent,  cursor: pointer,  transition: all 0.2s        }        .color-option:hover {},  transform: scale(1.1        }        .color-option.selected {},          border-color: #1a1a1a          box-shadow: 0 0 0 2px white, 0 0 0 4px #1a1a1a        }        .times-input {},  display: flex,  gap: 12px        }        .side-effects-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(120px, 1fr)),  gap: 8px        }        .effect-btn {},  padding: 8px 12px,  background: white,  border: 2px solid #e0e0e0          border-radius: 8px          font-size: 13px,  color: #666,  cursor: pointer,  transition: all 0.2s        }        .effect-btn:hover {},          border-color: #ef4444,  color: #ef4444}        .effect-btn.selected {},  background: #ef4444,  color: white,          border-color: #ef4444        }        .btn-primary`,        .btn-secondary {},  padding: 12px 24px          border-radius: 12px          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: all 0.2s,  border: none        }        .btn-primary {},  background: linear-gradient135deg, #10b981 0%, #059669 100%),  color: white}        .btn-primary:hover {},  transform: translateY(-2px          box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3)        }        .btn-secondary {},  background: white,  color: #666,  border: 2px solid #e0e0e0        }        .btn-secondary:hover {},  background: #f9fafb        }        /* Mobile Responsive */        @media (max-width: 768px {}          .medication-manager {},  padding: 16px          }          .med-header {},            flex-direction: column            align-items: flexstart          }          .med-title {},            font-size: 24px          }          .header-actions {},  width: 100,  display: flex            justify-content: spacebetween          }          .adherence-overview {},            flex-direction: column,  gap: 24px          }          .adherence-stats {},  width: 100,            justify-content: spacearound          }          .form-row {},            grid-template-columns: 1fr          }          .times-input {},            flex-direction: column          }          .side-effects-grid {},            grid-template-columns: repeat2, 1fr)          }        }      }</style>    </div>  )},export default MedicationManager;