/** * Advanced AI Therapy Chat Interface * Beautiful chat system with voice, emotions, and therapeutic features */import React, { useState, useEffect, useRef, useCallback }, from "react",import { ", Play }, from ", lucide-react",import { therapyEngine, TherapyMessage, TherapyApproach, MoodCheckIn }, from "../../services/ai/therapyEngine",import { crisisDetectionService }, from "../../services/crisisDetectionService",import "../../styles/ai-therapy-chat.css"// Quick reply suggestionsconst quickReplies={}";",  greeting: []m feeling anxious today"];",    "I need someone to talk to",",",    "I want to work on my thoughts",",",    "I", m having a good day"]",  anxiety: [] can"t stop worrying"];",    "My heart is racing",",",    "I need grounding exercises",",",    "Help me calm down"],",  depression: [] feel hopeless","];",    "I have no energy",",",    "Nothing brings me joy",",",    "I need motivation"],",  general: []ell me more","];",    "What should I do?",",    "I need coping strategies",",    "Can we try something else?"]"},export const AITherapyChat: ReactFC = () => {}  // Core state  const []essages, setMessages] = useState<TherapyMessage[]>([])  const []nputMessage, setInputMessage] = useState(")"),",  const []sTyping, setIsTyping] = useState(false)  const []essionId", setSessionId] = useState<string>(")")"  // Voice features  const []sListening, setIsListening] = useState(false)  const []sSpeaking, setIsSpeaking] = useState(false)  const []oiceEnabled, setVoiceEnabled] = useState(true);  const recognitionRef = useRef<any>(null);  const synthRef = useRef<SpeechSynthesisUtterance | null>(null),    // UI state  const []howSettings, setShowSettings] = useState(false)  const []howGoals, setShowGoals] = useState(false)  const []howProgress, setShowProgress] = useState(false)  const []electedApproach, setSelectedApproach] = useState<TherapyApproach>(", CBT)")",  const []urrentEmotion", setCurrentEmotion] = useState(", neutral"),",  const []uickReplyCategory", setQuickReplyCategory] = useState<keyof typeof quickReplies>(", greeting)")"  // Session state  const []oodCheckIn, setMoodCheckIn] = useState<MoodCheckIn | null>(null)  const []essionGoals, setSessionGoals] = useState<string[]>([])  const []omework, setHomework] = useState<any[]>([])  const []essionActive, setSessionActive] = useState(true);    // Refs;  const messagesEndRef = useRef<HTMLDivElement>(null);  const chatContainerRef = useRef<HTMLDivElement>(null),;  // Initialize session;  useEffect(() => {},    startNewSession()  }, []);  // Auto-scroll to bottom  useEffect(() => {},    messagesEndRef.current?.scrollIntoView({ behavior: "smooth})"}, []essages]);"  // Start new therapy session  const startNewSession = () => {},    const session = therapyEngine.createSession("user-" + Date.now(), []anage anxiety"];",      "Improve mood",",      "Build coping skills"])",        setSessionId(session.id)    setSessionActive(true)    // Welcome message    const welcomeMsg: TherapyMessage=},  id: ``sg-${Date.now(};",      content: ``ello I"m your AI therapy companion. I", m here to support you using evidence-based therapeutic techniques. Before we begin", how are you feeling today on a scale of 1-10?``      sender: "ai,",  timestamp: new Date()",",      metadata: {  approach: "CBT      }    },        setMessages([]elcomeMsg])    speakMessage(welcomeMsg.content)  }  // Handle sending message  const handleSendMessage = async () => {},    if (!inputMessage.trim() || !sessionActive) return const userMessage: TherapyMessage},  id: ``sg-${Date.now(},      content: inputMessage,      sender: ``ser,      timestamp: new Date()    },    setMessages(prev = > []..prev", userMessage]);",    setInputMessage(")");",    setIsTyping(true)    // Crisis detection    const crisisCheck = crisisDetectionService.analyzeCrisisContent(inputMessage),;    if (crisisCheck.hasCrisisIndicators && crisisCheck.severityLevel = == critical",      handleCrisisDetection(crisisCheck)      return }    // Get AI response;    try {      const response = await therapyEngine.generateResponse(, inputMessage,        messages,        undefined,        selectedApproach;      );      const aiMessage: TherapyMessage=};  id: ``sg-${Date.now(}-ai`;`, ``        content: responsecontent,        sender: `i,        timestamp: new Date()``,", `;`        emotion: {  primary: responsedetectedEmotion | | "neutral,", `;`          intensity: 50,          valence: 0,          arousal: 05        },        metadata: {},  approach: selectedApproach,          intervention: responseintervention,          homework: responsehomework        }      },      setMessages(prev = > []..prev, aiMessage]`;      setCurrentEmotion(response.detectedEmotion | | 'neutral)'      // Update homework if provided      if (response.homework && response.homework.length > 0)  {        setHomework(prev = > []..prev, ...response.homework])}            // Speak the response      if (voiceEnabled)  {        speakMessage(aiMessage.content)      }            // Update quick replies based on emotion      updateQuickReplies(response.detectedEmotion | | 'neutral')'    }, catch (error) {      console.error("Failed to get AI response: ", error),      const errorMessage: TherapyMessage=}";",  id: ``sg-${Date.now(}"error`;`, `;`        content: ` apologize", I", m having trouble responding right now. Please try again or let me know if you need immediate support.``,", `;`        sender: "ai,        timestamp: new Date()      },      setMessages(prev = > []..prev, errorMessage]`;    }, finally {},      setIsTyping(false)    }  }  // Handle crisis detection  const handleCrisisDetection = (crisisCheck: any => {},    const crisisMessage: TherapyMessage=},  id: ``sg-${Date.now(}-crisis`,      content: ``m very concerned about what you", ve shared. Your safety is my top priority. Please reach out for immediate help: \n\nï¿½ Call 988 - Suicide & Crisis Lifeline\nðŸ’¬ Text HOME to 741741 - Crisis Text Line\nðŸš¨ Call 911 for immediate danger\n\nI"m here with you. Would you like me to guide you through some grounding exercises while you reach out for support?``,", `;`      sender: "ai,",  timestamp: new Date(),      isCrisis: true    },        setMessages(prev = > []..prev, crisisMessage]);    setIsTyping(false)        // Show crisis modal    showCrisisModal()  }  // Show crisis modal  const showCrisisModal = () => {};    const modal = document.createElement(div");",    modal.className="crisis-modal-overlay",    modal.innerHTML = DOMPurify.sanitize( );      <div class = "crisis-modal-content", >"        <h2>ðŸ†˜ Immediate Support Available</h2>        <p>We're concerned about your safety. Please reach out for help: </p>        <div class = "crisis-resources", >"          <a href="tel:", ", 988", class=", crisis-button", primary", >"            ðŸ“ž Call 988 - Crisis Lifeline          </a>          <a href = "sms: 741741?body=HOME, class=", crisis-button">"            ðŸ’¬ Text HOME to 741741          </a>          <a href="tel:", ", 911", class=", crisis-button emergency">"            ðŸš¨ Call 911 - Emergency          </a>        </div>        <button onclick = "this.parentElement.parentElement.remove(")", class=", close-modal">",          I've reached out for help'        </button>      </div>        document.body.appendChild(modal)  }  // Voice input handling  const handleVoiceInput = () => {}",",    if (!("webkitSpeechRecognition", in window | | ", SpeechRecognition', in window)) {',      alert("Voice input is not supported in your browser");",      return    },    if (isListening)  {      stopListening()      return    },    const SpeechRecognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;    const recognition = new SpeechRecognition();    recognition.continuous = "true",    recognition.interimResults = "true",    recognition.lang = "en-US",    recognition.onstart = () => {},      setIsListening(true)    },    recognition.onresult = (event: any => {},      const transcript = Array.from(event.results),;        .map((result: any => result[]]);        .map((result: any => result.transcript);        .join(")");",      setInputMessage(transcript)    },    recognition.onerror = (event: any => {},      console.error("Speech recognition error: ", event.error),      setIsListening(false)    },    recognition.onend = () => {},      setIsListening(false)    },    recognitionRef.current = "recognition",    recognition.start()  }  // Stop listening  const stopListening = () => {},    if (recognitionRef.current)  {      recognitionRef.current.stop()      setIsListening(false)    }  }  // Text-to-speech  const speakMessage = (text: string => {};    if (!voiceEnabled || !(speechSynthesis", in window)) return"    // Cancel any ongoing speech    window.speechSynthesis.cancel()    const utterance = new SpeechSynthesisUtterance(text);    utterance.rate = 0.9;    utterance.pitch = 1;    utterance.volume = 1;        // Select a calming voice if available    const voices = window.speechSynthesis.getVoices();    const preferredVoice = voices.find(voice =>       voice.name.includes("Google") || voice.name.includes("Microsoft");"    )    if (preferredVoice) {      utterance.voice = "preferredVoice"    },    utterance.onstart = () => setIsSpeaking(true);    utterance.onend = () => setIsSpeaking(false);    utterance.onerror = () => setIsSpeaking(false);    synthRef.current = "utterance",    window.speechSynthesis.speak(utterance)  }  // Toggle voice output  const toggleVoice = () => {},    setVoiceEnabled(!voiceEnabled)    if (voiceEnabled && isSpeaking)  {      window.speechSynthesis.cancel()      setIsSpeaking(false)    }  }  // Update quick replies based on emotion  const updateQuickReplies = (emotion: string => {}";",    if (emotion.includes("anx")) {",      setQuickReplyCategory("anxiety");",    "}, else if (emotion.includes(", sad") || emotion.includes(", depress")) {",      setQuickReplyCategory("depression");",    "}, else {,      setQuickReplyCategory("general");"    }  }  // Export conversation  const exportConversation = () => {},    const summary = therapyEngine.generateSessionSummary(sessionId`;    const conversationText = messages";"      .map(msg = > ``${msg.timestamp.toLocaleString()}] ${msg.sender.toUpperCase()}: ${msg.content});"      .join(``n\n)",    const fullExport = THERAPY SESSION EXPORT\n${= .repeat(50)}\n\n${summary}\n\nCONVERSATION: \n$conversationText}",",    const blob = new Blob([]ullExport]`, ` type: ``ext/plain});",    const url = URL.createObjectURL(blob`;    const a = document.createElement("a");",    a.href="url",    a.download = ``herapy-session-${sessionId}".txt,",    a.click()    URL.revokeObjectURL(url)  }  // Handle quick reply  const handleQuickReply = (reply: string => {},    setInputMessage(reply)    handleSendMessage()  }  // Render emotion indicator  const renderEmotionIndicator = () => {},    const emotionColors: Recordstring, string>={  happy: ``10b981,`, `;`      sad: "3b82f6,      anxious: "f59e0b,      angry: "ef4444,",      neutral: "6b7280,",      crisis: "dc2626    },    return (;      <div className="emotion-indicator">"        <Heart ",          className="emotion-icon",          style={ color: emotionColors[]urrentEmotion || emotionColors.neutral};        />        <span>Detected: {currentEmotion}</span>      </div>    )  }  // Render therapy approach selector,  const renderApproachSelector = () => (",;"    <div className="approach-selector">"      <label>Therapy Approach: </label      <select         value={selectedApproach};        onChange={(e) => setSelectedApproach(e.target.value as TherapyApproach)"};"      >";"        <option value = "CBT", >Cognitive Behavioral (CBT)</option>"        <option value = "DBT", >Dialectical Behavioral (DBT)</option>"        <option value = "ACT", >Acceptance & Commitment (ACT)</option>"        <option value = "Mindfulness", >Mindfulness-Based</option>"        <option value = "Somatic", >Somatic Therapy</option>"        <option value = "Psychodynamic", >Psychodynamic</option>"      </select>    </div>  )  // Render session goals;  const renderSessionGoals = () => (,;    <div className={session-goals $showGoals ? ``xpanded :}>",", `;`      <div tabIndex={0}, className="goals-header", onClick={() => setShowGoals(!showGoals)"}>"        <Target className="icon" />"        <span>Session Goals</span>        {showGoals ? <ChevronUp /> : <ChevronDown />"}"      </div>      {showGoals && ("}"        <div className="goals-content">"          {sessionGoals.length > 0 ? (}            <ul>              {sessionGoals.map((goal, index) => ("}"                <li key={index"}>"                  <input type = "checkbox", id={",goal-$index"} />                  <label htmlFor={goal-$index}>{goal}</label>                </li>              ))"}"            </ul>          ) : (";"            <p>No goals set yet. Let`` discuss what you"d like to work on.</p>", ``          )}          <button className="add-goal-btn">+ Add Goal</button>"        </div>      )"}"    </div>  )  // Render homework assignments;  const renderHomework = () => (`    <div className="homework-section">"      <h3><Book className="icon" /> Homework & Exercises</h3>;"      {homework.length > 0 ? ("}"        <ul className="homework-list">"          {homework.map((item, index) => ("}"            <li key={index"}, className="homework-item">"              <input type = "checkbox", id={",hw-$index"} />              <label htmlFor={hw-$index}>{item}</label>            </li>          ))}        </ul>      ) : (        <p>No homework assigned yet.</p>      )"}"    </div>  )  return (;    <div className="ai-therapy-chat-container">"      {/* Header */"};"      <div className="chat-header">"        <div className="header-left">"          <div className="header-title">"            <Brain className="header-icon" />"            <div>              <h2>AI Therapy Assistant</h2>              {renderEmotionIndicator()"}"            </div>          </div>        </div>        "        <div className="header-actions">"          <button ",            className="header-btn",            onClick={() => setShowSettings(!showSettings)"};",            title="Settings"          >            <Settings />          </button>          <button ",            className="header-btn",            onClick={toggleVoice"};",            title={voiceEnabled ? "Disable voice" : ", Enable voice}"          >            {voiceEnabled ? <Volume2 /> : <VolumeX />"}"          </button>          <button ",            className="header-btn",            onClick={exportConversation"};",            title="Export", conversation"          >            <Download />          </button>          <button ",            className="header-btn handoff",            title="Connect", with human therapist"          >            <Phone />          </button>        </div>      </div>"      {/* Settings Panel */"}"      {showSettings && ("}"        <div className="settings-panel">"          {renderApproachSelector()}          <div className="setting-item">"            <label>              <input aria-label="Input field", "                type = "checkbox",                checked={voiceEnabled};                onChange={(e) = /> setVoiceEnabled(e.target.checked)};              />              Enable voice responses            </label>          </div>        </div>      )},"      {/* Main Chat Area */"};"      <div className="chat-main">"        {/* Side Panel */"};"        <div className="chat-sidebar">"          {renderSessionGoals()}          {renderHomework()}          <div className="progress-tracker">"            <h3><TrendingUp className="icon" /> Your Progress</h3>"            <div className="progress-item">"              <span>Sessions completed: </span              <strong>5</strong>            </div>            <div className="progress-item">"              <span>Skills learned: </span              <strong>12</strong>            </div>            <div className="progress-item">"              <span>Mood improvement: </span              <strong>+35%</strong>            </div>          </div>        </div>"        {/* Messages Area */"};"        <div className="chat-messages", ref={chatContainerRef}>", `;`          {messages.map((message) => (}            <div              key={message.id}, className={{message $message.sender $message.isCrisis ? ``risis :}}"};"            >";"              {message.isCrisis && ("}"                <div className="crisis-indicator">"                  <AlertTriangle /> Crisis Support Active                </div>              )}              <div className="message", -bubble">"                <div className="message-content">{message.content"}</div>",                "                {message.metadata?.intervention && ("}"                  <div className="intervention-tag">"                    <Sparkles className="tag-icon" />"                    {message.metadata.intervention}                  </div>                )}                <div className="message-meta">"                  <span className="timestamp">"                    {message.timestamp.toLocaleTimeString()"}"                  </span>                  {message.metadata?.approach && ("}"                    <span className="approach-tag">{message.metadata.approach}</span>"                  )}                </div>              </div>            </div>          ))"}"          {isTyping && ("}"            <div className="message ai typing">"              <div className="typing-indicator">"                <span></span>                <span></span>                <span></span>              </div>            </div>          )},          "          <div ref={messagesEndRef} />        </div>      </div>"      {/* Quick Replies */"};"      <div className="quick-replies">"        <div className="quick-reply-header">Quick Responses: </div>        <div className="quick-reply-chips">"          {quickReplies[]uickReplyCategory].map((reply, index) => (}            <button",",              key={index"}",              className="quick-reply-chip",              onClick={() => handleQuickReply(reply)};            >              {reply}            </button>          ))}        </div>      </div>"      {/* Input Area */"};"      <div className="chat-input-container">";"        <button          className={voice-btn $isListening ? ``istening :}";",          onClick={handleVoiceInput"};", `;`          title={isListening ? ``top listening" : ", Start voice input};"        >";"          {isListening ? <MicOff /> : <Mic />"}"        </button>                <input;          type = "text",          className="message-input",          value={inputMessage};          onChange={(e) = /> setInputMessage(e.target.value)"};",          onKeyPress={(e) => e.key === "Enter", ;};",          placeholder="Type", your message or click the mic to speak...",          disabled={!sessionActive"};"        />                <button;          className="send-btn",          onClick={handleSendMessage};          disabled={!inputMessage.trim() || !sessionActive};        >          <Send />        </button>      </div>    </div>  )" }`;`