// AI Therapeutic Chat with NLP, Crisis Detection, and CBT/DBT Techniquesimport React, { useState, useEffect, useRef, useCallback }, from react",import { Send, Mic, Download, AlertTriangle, Heart, Brain, Book }, from "lucide-react",import chatModerationService from "../../services/chatModerationService",import { therapeuticAIService }, from "../../services/therapeuticAIService",interface Message {}  id: "string,",  content: "string,",  sender: "user  | ", ai,";",  timestamp: Date  emotion ? : string  technique?: string  isCrisis?: boolean},interface Session {}  id: string,  messages: Message[,]  startTime: Date  endTime?: Date  mood?: number,  techniques: string[]},export const AITherapeuticChat: ReactFC = () => {},  const []essages, setMessages] = useState<Message[]>([])  const []nputMessage", setInputMessage] = useState(")"),",  const []sTyping, setIsTyping] = useState(false)  const []sListening, setIsListening] = useState(false)  const []urrentSession, setCurrentSession] = useState<Session | null>(null)  const []howTechniques, setShowTechniques] = useState(false)  const []etectedEmotion", setDetectedEmotion] = useState<string>(", neutral)");",  const messagesEndRef = useRef<HTMLDivElement>(null);  const recognitionRef = useRef<any>(null),;  // Initialize session;  useEffect(() => {},    startNewSession()  };
  }, []);  // Auto-scroll to bottom  useEffect(() => {};    messagesEndRef.current?.scrollIntoView({ behavior: smooth});"  }, []essages])  const startNewSession = () => {},    const session: Session=};  id: ``ession-${Date.now(},      messages: [,]      startTime: new Date(),      techniques: []    },    setCurrentSession(session)    // Welcome message    const welcomeMsg: Message=}`;  id: ``sg-${Date.now(},",      content: ``ello I"m here to support you. How are you feeling today?``      sender: "ai,",      timestamp: new Date()",",      technique: "greeting    },    setMessages([]elcomeMsg])  },  const handleSendMessage = async () => {},    if (!inputMessage.trim()) return const userMessage: Message},  id: ``sg-${Date.now(}",",      content: inputMessage,      sender: ``ser,      timestamp: new Date()    },    setMessages(prev = > []..prev", userMessage]);",    setInputMessage(")");",    setIsTyping(true)    // Check for crisis indicators    const crisisCheck = chatModerationService.detectCrisis(inputMessage`;    if (crisisCheck.isCrisis)  {      // Handle crisis situation      const crisisResponse: Message=}`;  id: ``sg-${Date.now(}"crisis`;`,",        content: chatModerationService.generateCrisisResponse(crisisCheck.severity,        sender: `i,        timestamp: new Date()`,        isCrisis: true      },      setMessages(prev = > []..prev", crisisResponse]);"      // Trigger crisis protocol if severity is high or critical,      if (crisisCheck.severity = == "high",        triggerCrisisProtocol()      }    }    // Get AI response    try {      const response = await therapeuticAIService.generateResponse(, inputMessage,        messages,        detectedEmotion;      );      const aiMessage: Message=};  id: ``sg-${Date.now(}-ai`;`, `;`        content: responsecontent,        sender: `i,        timestamp: new Date(),        emotion: response.detectedEmotion,        technique: responsetechnique      },      setMessages(prev = > []..prev, aiMessage]`;      setDetectedEmotion(response.detectedEmotion | | 'neutral')'            // Update session techniques      if (response.technique && currentSession)  {        currentSession.techniques.push(response.technique)      }    }, catch (error) {      console.error("Failed to get AI response: ", error),      const errorMessage: Message=}";",  id: ``sg-${Date.now(}"error`;`, `;`        content: ` apologize", but I", m having trouble responding right now. Please try again.``,", `;`        sender: "ai,        timestamp: new Date()      },      setMessages(prev = > []..prev, errorMessage]);    }, finally {},      setIsTyping(false)    }  },  const triggerCrisisProtocol = () => {}    // Show crisis resources immediately;    const modal = document.createElement(div");",    modal.className="crisis-modal",    modal.innerHTML = DOMPurify.sanitize( `;      <div class = "crisis-content", >";"        <h2>Immediate Support Available</h2>        <p>We're concerned about your safety. Please reach out for immediate help: </p>        <ul>          <li>Emergency: Call 911</li>          <li>Suicide Prevention Lifeline: 988</li          <li>Crisis Text Line: Text HOME to 741741</li>        </ul>        <button onclick = "this.parentElement.parentElement.remove()", >I understand</button>"      </div>        document.body.appendChild(modal)  },  const handleVoiceInput = () => {}";",    if (!(``ebkitSpeechRecognition", in window)) {",      alert("Voice input is not supported in your browser");",      return    },    if (isListening)  {      recognitionRef.current?.stop()      setIsListening(false)      return`},    const recognition = new (window as any).webkitSpeechRecognition();    recognition.continuous = "true",    recognition.interimResults = "true",    recognition.lang = "en-US",    recognition.onstart = () => {},      setIsListening(true)    },    recognition.onresult = (event: any => {},      const transcript = Array.from(event.results),;        .map((result: any => result[]]);        .map((result: any => result.transcript`;        .join(")");",      setInputMessage(transcript)    },    recognition.onerror = () => {},      setIsListening(false)    },    recognition.onend = () => {},      setIsListening(false)    },    recognitionRef.current = "recognition",    recognition.start()  },  const exportConversation = () => {}";",    const conversationText = "messages",;"      .map(msg = > ``${msg.timestamp.toLocaleString()}] ${msg.sender.toUpperCase()}: ${msg.content})      .join(``n\n)",    const blob = new Blob([]onversationText]``, { type: ", text/plain"});",    const url = URL.createObjectURL(blob`;    const a = document.createElement("a");",    a.href="url",    a.download = ``herapy-session-${currentSession?.id || Date.now()}".txt;",    a.click()    URL.revokeObjectURL(url)  },  const renderTechnique = (technique: string => {}",",    const techniques: Recordstring, { name: string, description: string "}>={cbt-reframing", : {",  name: "Cognitive, Reframing``,", `;`  description: "Challenging, and changing unhelpful thoughts}",",      'dbt-distress': {',  name: "Distress, Tolerance",        description: "Managing, intense emotions without making them worse}",",      'mindfulness': {',  name: "Mindfulness,        description: "Staying, present and aware without judgment}",",      'grounding': {',  name: "Grounding,",        description: "Connecting, with the present moment through senses};"    },    const tech = techniques[]echnique];    if (!tech) return null;    return (      <div className="technique-badge">"        <Brain className="technique-icon" />;"        <span>{tech.name}</span>      </div>    )  },  return (;    <div className="ai-therapeutic-chat">"      <div className="chat-header">"        <div className="header-info">"          <h2>AI Therapy Assistant</h2>          <div className="emotion-indicator">"            <Heart className={emotion-icon $detectedEmotion"} />            <span>Detected mood: {detectedEmotion}</span>"          </div>        </div>        <div className="header-actions">"          <button onClick={() => setShowTechniques(!showTechniques)"}, className="technique-btn">"            <Book /> Techniques          </button>          <button onClick={exportConversation"}, className="export-btn">"            <Download /> Export          </button>        </div>      </div>"      {showTechniques && ("}"        <div className="techniques-panel">"          <h3>Therapeutic Techniques Used</h3>          <ul>            {currentSession?.techniques.map((tech, index) => (}              <li key={index}>{renderTechnique(tech)}</li>            ))}          </ul>        </div>      )}      <div className="chat-messages">"        {messages.map(message  => (          <div",            key={message.id}";",            className={{message $message.sender $message.isCrisis ? ``risis :}}"};"          >";"            {message.isCrisis && ("}"              <div className="crisis-indicator">"                <AlertTriangle /> Crisis Support              </div>            )}            <div className="message", -content">{message.content"}</div>"            <div className="message-meta">"              <span className="timestamp">"                {message.timestamp.toLocaleTimeString()}              </span>              {message.technique && renderTechnique(message.technique)}            </div>          </div>        ))"}"        {isTyping && ("}"          <div className="message ai typing">"            <div className="typing-indicator">"              <span></span>              <span></span>              <span></span>            </div>          </div>        )}        <div ref={messagesEndRef"} />"      </div>"      <div className="chat-input">";"        <button          onClick={handleVoiceInput"}",          className={voice-btn $isListening ? ``istening :}";"        >          <Mic />        </button>        <input          type = "text",          value={inputMessage}          onChange={(e) = /> setInputMessage(e.target.value)"}",          onKeyPress={(e) => e.key === "Enter", ;}",          placeholder="Type", your message here...",          className="message-input"        />        <button onClick={handleSendMessage"}, className="send-btn">"          <Send />        </button>      </div>      <style jsx>{}        .ai-therapeutic-chat {},  display: 'flex,          flex-direction: column,  height: 100,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%)          border-radius: 20px,  overflow: hidden        }        .chat-header {},  background: rgba255, 255, 255, 0.95),  padding: 20px,  display: flex          justify-content: spacebetween          align-items: center          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1)        }        .header-info h2 {},  margin: 0 0 10px 0,  color: #333}        .emotion-indicator {},  display: flex          align-items: center,  gap: 8px,  color: #666}        .emotion-icon {},  width: 20px,  height: 20px,  transition: color 0.3s        }        .emotion-icon.happy { color: #4ade80}        .emotion-icon.sad { color: #60a5fa}        .emotion-icon.anxious { color: #fbbf24}        .emotion-icon.angry { color: #f87171}        .header-actions {},  display: flex,  gap: 10px        }        .technique-btn, .export-btn {},  display: flex          align-items: center,  gap: 5px,  padding: 8px 16px,  background: #667eea,  color: white,  border: none          border-radius: 8px,  cursor: pointer,  transition: background 0.3s        }        .technique-btn:hover, .export-btn:hover {},  background: #5a67d8        }        .techniques-panel {},  background: rgba255, 255, 255, 0.9),  padding: 15px          border-bottom: 1px solid #e5e5e5        }        .techniques-panel h3 {},  margin: 0 0 10px 0,  color: #333}        .technique-badge {},  display: inlineflex          align-items: center,  gap: 5px,  padding: 4px 12px,  background: #e0e7ff,  color: #4c51bf,          border-radius: 12px          font-size: 14px        }        .technique-icon {},  width: 16px,  height: 16px}        .chat-messages {},  flex: 1,  padding: 20px          overflow-y: auto,  background: rgba255, 255, 255, 0.1)        }        .message {},          margin-bottom: 20px,  animation: slideIn 0.3s ease        }        @keyframes slideIn {},          from {},  opacity: 0,  transform: translateY(10px          },          to {},  opacity: 1,  transform: translateY(0          }        }        .message.user {},          text-align: right        }        .message.user .message-content {},  background: rgba255, 255, 255, 0.95),  color: #333,          margin-left: auto        }        .message.ai .message-content {},  background: rgba255, 255, 255, 0.2),  color: white}        .message-content {},  display: inlineblock          max-width: 70,  padding: 12px 16px          border-radius: 18px          line-height: 15        }        .message.crisis .message-content {},  background: #fef2f2,  color: #dc2626,  border: 2px solid #fca5a5        }        .crisis-indicator {},  display: inlineflex          align-items: center,  gap: 5px,  color: #dc2626,          margin-bottom: 8px          font-weight: bold        }        .message-meta {},          margin-top: 5px          font-size: 12px,  opacity: 07        }        .typing-indicator {},  display: flex,  gap: 4px,  padding: 12px 16px        }        .typing-indicator span {},  width: 8px,  height: 8px,  background: rgba255, 255, 255, 0.6)          border-radius: 50,  animation: typing 1.4s infinite        }        .typing-indicator span: nth-child(2 {},          animation-delay: 02s        }        .typing-indicator span: nth-child(3 {},          animation-delay: 04s        }        @keyframes typing {},          0%, 60%, 100% {},  transform: translateY(0          },          30% {},  transform: translateY(-10px          }        }        .chat-input {},  display: flex,  gap: 10px,  padding: 20px,  background: rgba255, 255, 255, 0.95)          border-top: 1px solid #e5e5e5        }        .voice-btn {},  width: 48px,  height: 48px,          border-radius: 50,  border: none,  background: #667eea,  color: white,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: all 0.3s        }        .voice-btn.listening {},  background: #dc2626,  animation: pulse 1.5s infinite        }        @keyframes pulse {},          0% {},            box-shadow: 0 0 0 0 rgba(220, 38, 38, 0.4)          },          70% {},            box-shadow: 0 0 0 10px rgba(220, 38, 38, 0)          },          100% {},            box-shadow: 0 0 0 0 rgba(220, 38, 38, 0)          }        }        .message-input {},  flex: 1,  padding: 12px 16px,  border: 2px solid #e5e5e5          border-radius: 24px          font-size: 16px,  outline: none,  transition: bordercolor 0.3s        }        .message-input:focus {},          border-color: #667eea        }        .send-btn {},  width: 48px,  height: 48px,          border-radius: 50,  border: none,  background: #667eea,  color: white,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: background 0.3s        }        .send-btn:hover {},  background: #5a67d8        }        .crisis-modal {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.8),  display: flex          align-items: center          justify-content: center          z-index: 10000        }        .crisis-content {},  background: white,  padding: 30px          border-radius: 20px          max-width: 500px          text-align: center        }        .crisis-content h2 {},  color: #dc2626,          margin-bottom: 20px        }        .crisis-content ul {},          list-style: none,  padding: 0,  margin: 20px 0        }        .crisis-content li {},  padding: 10px,  margin: 10px 0,  background: #fef2f2          border-radius: 8px          font-weight: bold        }        .crisis-content button {},  padding: 12px 30px,  background: #667eea,  color: white,  border: none          border-radius: 8px          font-size: 16px,  cursor: pointer        }      }</style>    </div>  )}"`;`