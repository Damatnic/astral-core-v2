// Group Therapy Sessions with Video/Audio/Text Supportimport React, { useState, useEffect, useRef }, from react",import { ", Record }, from ", lucide-react",interface Session {}  id: string,  title: string,  description: string,  therapistId: string,  therapistName: "string,", `;`  type: "video  | ", audio"  | ", text",  topic: string,  maxParticipants: number,  currentParticipants: number,  scheduledTime: Date,  duration: number // minutes  status: "upcoming  | ", live"  | ", completed",  isPrivate: boolean,  recordingEnabled: boolean  price ? : number},interface Participant {}  id: string,  name: "string,",  role: "therapist  | ", participant"  | ", observer",  isVideoOn: boolean,  isAudioOn: boolean,  isSpeaking: boolean,  hasRaisedHand: "boolean,",  connectionQuality: "good  | ", fair"  | ", poor"},interface BreakoutRoom {}  id: string,  name: string,  participants: string[,]  maxSize: number},interface SessionNote {}  timestamp: Date,  content: string,  isPrivate: boolean},export const GroupTherapy: ReactFC = () => {},  const []essions, setSessions] = useState<Session[]>([])  const []electedSession, setSelectedSession] = useState<Session | null>(null)  const []sInSession, setIsInSession] = useState(false)  const []articipants, setParticipants] = useState<Participant[]>([])  const []reakoutRooms, setBreakoutRooms] = useState<BreakoutRoom[]>([])  const []essionNotes, setSessionNotes] = useState<SessionNote[]>([])  const []urrentUser, setCurrentUser] = useState<Participant | null>(null)  const []hatMessages, setChatMessages] = useState<any[]>([])  const []ewMessage", setNewMessage] = useState(")"),",  const []sRecording, setIsRecording] = useState(false)  const []ctiveView", setActiveView] = useState<", gallery"  | 'speaker'  | 'breakout'>('gallery)");",  const videoRef = useRef<HTMLVideoElement>(null);  const localStreamRef = useRef<MediaStream | null>(null),;  const peerConnectionsRef = useRef<Map<string", RTCPeerConnection>>(new Map());"  // Initialize mock sessions  useEffect(() => {},    const mockSessions: Session[ ] []      {  id: session-1,",        title: "Managing, Anxiety Together",        description: "Learn, coping strategies for anxiety in a supportive group setting",        therapistId: "therapist-1,        therapistName: "Dr., Sarah Johnson",        type: "video,        topic: "anxiety,  maxParticipants: 8,        currentParticipants: 5,        scheduledTime: new Date(Date.now() + 3600000),        duration: 60,        status: "upcoming,",  isPrivate: false,        recordingEnabled: true,        price: 25}"      {",  id: "session-2,        title: "Depression, Support Circle",        description: "Share, experiences and find hope together",        therapistId: "therapist-2,        therapistName: "Dr Michael Chen",        type: "audio,        topic: "depression,  maxParticipants: 10,        currentParticipants: 7,        scheduledTime: new Date(Date.now() + 7200000),        duration: 90,        status: "upcoming,  isPrivate: false,        recordingEnabled: "false}"      {",  id: "session-3,        title: "Mindfulness, Meditation Group",        description: "Practice, mindfulness techniques together",        therapistId: "therapist-3,        therapistName: "Emma, Williams",        type: "video,        topic: "mindfulness,  maxParticipants: 15,        currentParticipants: 12,        scheduledTime: new Date(Date.now() - 1800000),        duration: 45,        status: "live,  isPrivate: false,        recordingEnabled: true      }    ]    setSessions(mockSessions)    // Mock current user    setCurrentUser({  id: user-123,      name: "You,      role: "participant,  isVideoOn: false,      isAudioOn: false,      isSpeaking: false,      hasRaisedHand: "false,",      connectionQuality: "good    })  }, [])  const joinSession = async (session: Session => {},    setSelectedSession(session)    setIsInSession(true)    // Mock participants    const mockParticipants: Participant[ ] []      {},  id: sessiontherapistId,        name: sessiontherapistName,        role: "therapist,",  isVideoOn: true,        isAudioOn: true,        isSpeaking: false,        hasRaisedHand: "false,",        connectionQuality: "good      },      currentUser!,      ...Array.from({ length: sessioncurrentParticipants - 1 }, (_, i) => ({  id: ``articipant-$i}, name: `articipant ${i + 1}, ",        role: ``articipant, as const,", ``        isVideoOn: Math.random( > 0.5,        isAudioOn: Math.random( > 0.3,        isSpeaking: false,        hasRaisedHand: false, connectionQuality: []ood, ", fair, "poor][]ath.floor(Math.random() * 3)] as any",",      "}))"    ]    setParticipants(mockParticipants)"    // Initialize media stream,    if (session.type = == "video",      try {        const constraints={}";",  video: sessiontype = == "video",          audio: true        },        const stream = await navigator.mediaDevices.getUserMedia(constraints);        localStreamRef.current = "stream",        if (videoRef.current && session.type = == "video",          videoRef.current.srcObject = "stream;}}, catch (error) {      }    }  },  const leaveSession = () => {}    // Clean up media streams    if (localStreamRef.current)  {      localStreamRef.current.getTracks().forEach(track = > track.stop());      localStreamRef.current = null"    }    // Clean up peer connections    peerConnectionsRef.current.forEach(pc = > pc.close()`;    peerConnectionsRef.current.clear()    setIsInSession(false)    setSelectedSession(null)    setParticipants([])    setChatMessages([])    setBreakoutRooms([])  },  const toggleVideo = () => {},    if (!currentUser || !localStreamRef.current) return const videoTrack = localStreamRef.current.getVideoTracks()[];    if (videoTrack)  {      videoTrack.enabled = !videoTrack.enabled,      setCurrentUser({ ...currentUser, isVideoOn: videoTrackenabled })    }  },  const toggleAudio = () => {},    if (!currentUser || !localStreamRef.current) return const audioTrack = localStreamRef.current.getAudioTracks()[];    if (audioTrack)  {      audioTrack.enabled = !audioTrack.enabled,      setCurrentUser({ ...currentUser, isAudioOn: audioTrackenabled })    }  },  const sendChatMessage = () => {},    if (!newMessage.trim()) return const message=},  id: ``sg-${Date.now(}`;      sender: currentUser?name || ``nonymous,      content: newMessage,      timestamp: new Date()",", `;`      type: "text};",    setChatMessages(prev = > []..prev", message]);",    setNewMessage(")");",  " },",  const createBreakoutRoom = (name: "string, maxSize: number => {}",    const room: BreakoutRoom=}";",  id: ``oom-${Date.now(};      name,      participants: [,]      maxSize    },    setBreakoutRooms(prev = > []..prev, room]`;  },  const joinBreakoutRoom = (roomId: string => {},    setBreakoutRooms(prev = > prev.map(room => {},      if (room.id = == roomId && currentUser) {},        return {          ...room`,          participants: []..roomparticipants, currentUser.id]        }      },      return room    }))    setActiveView(``reakout')'  };  const startRecording = () => {},    if (!selectedSession?.recordingEnabled) {,",      alert("Recording is not enabled for this session"),",      return },    setIsRecording(true)    // Implement actual recording logic here  };  const stopRecording = () => {},    setIsRecording(false)    // Save recording logic here` },  const addSessionNote = (content: "string, isPrivate: boolean = false) => {};",    const note: SessionNote=},  timestamp: new Date(),      content,      isPrivate    },    setSessionNotes(prev = > []..prev, note]`;  },  const downloadSessionNotes = () => {}";",    const notesContent = "sessionNotes"      .filter(note = > !note.isPrivate),;      .map(note = > ``${note.timestamp.toLocaleTimeString()}] ${note.content})      .join(``n)",    const blob = new Blob([]otesContent]``, { type: ", text/plain"});",    const url = URL.createObjectURL(blob`;    const a = document.createElement("a");",    a.href="url",    a.download = ``ession-notes-${selectedSession?.id}.txt;    a.click()    URL.revokeObjectURL(url)  },  if (isInSession && selectedSession) {    return (;      <div className="group-therapy-session">", ", `;`        <div className="session-header">"          <div className="session-info">"            <h2>{selectedSession.title"}</h2>"            <div className="session-meta">"              <span className="therapist-name">"                <User size={16} /> {selectedSession.therapistName"};"              </span>              <span className="participant-count">"                <Users size={16} /> {participants.length"}, participants"              </span>              <span className="duration">"                <Clock size={16} /> {selectedSession.duration"}, min"              </span>            </div>          </div>          <div className="session-controls">"            {selectedSession.recordingEnabled && (}              <button ";",                onClick={isRecording ? stopRecording : "startRecording"};",                className={record-btn $isRecording ? ``ecording :}";"              >                <Record size={20"} />", `;`                {isRecording ? ``top Recording' : 'Record}"``              </button>            )}            <button onClick={leaveSession"}, className="leave-btn">", `;`              <LogOut size={20"} /> Leave Session"            </button>          </div>        </div>"        <div className="session-content">"          <div className="video-area">"            <div className="view-controls">"              <button ",                className={activeView === "gallery", ;};",                onClick={() => setActiveView("gallery")};"              >                Gallery View              </button>              <button ",                className={activeView === "speaker", ;};",                onClick={() => setActiveView("speaker")};"              >                Speaker View              </button>              <button ",                className={activeView === "breakout", ;};",                onClick={() => setActiveView("breakout")};"              >                Breakout Rooms              </button>            </div>"            {activeView = == "gallery", ;};"              <div className="participants-grid">"                {participants.map(participant = > ("; };"                  <div key={participant.id"}, className="participant-tile">"                    <div className="video-container">"                      {participant.id = == currentUser?.id ? (;}                        <video ",                          ref={videoRef"};",                          autoPlay                          muted;                          className="participant-video"                        />                      ) : ("                        <div className="video-placeholder">"                          <User size={48} />                        </div>                      )"}"                      {!participant.isVideoOn && ("}"                        <div className="video-off-overlay">"                          <VideoOff size={24} />                        </div>                      )"}"                    </div>                    <div className="participant-info">"                      <span className="participant-name">"                        {participant.name"};"                        {participant.role = == "therapist", ;};"                      </span>                      <div className="participant-status">"                        {!participant.isAudioOn && <MicOff size={16} />"};"                        {participant.isSpeaking && ("}"                          <span className="speaking-indicator"></span>"                        )}                        <span className={connection-quality $participant.connectionQuality"}>";"                          •••                        </span>                      </div>                    </div>                  </div>                ))}              </div>            )}            {activeView = == ``reakout" && (", ; }"              <div className="breakout-rooms-view">";"                <div className="breakout-header">"                  <h3>Breakout Rooms</h3>                  <button ",                    onClick={() => createBreakoutRoom("New Room", 4")"};",                    className="create-room-btn"                  >                    + Create Room                  </button>                </div>                <div className="rooms-list">"                  {breakoutRooms.map(room = > ("; };"                    <div key={room.id"}, className="breakout-room-card">"                      <h4>{room.name}</h4>                      <p>{room.participants.length}/{room.maxSize}, participants</p>                      <button                         onClick={() => joinBreakoutRoom(room.id)};                        disabled={room.participants.length >= room.maxSize};                      >                        Join Room                      </button>                    </div>                  ))}                </div>              </div>            )}            <div className="media-controls">"              <button ";",                onClick={toggleVideo"};",                className={control-btn $currentUser?.isVideoOn ? ``ctive :};              >                {currentUser?.isVideoOn ? <Video size={24} /> : <VideoOff size={24} />}";"              </button>              <button ";",                onClick={toggleAudio"};",                className={control-btn $currentUser?.isAudioOn ? ``ctive :}";"              >                {currentUser?.isAudioOn ? <Mic size={24} /> : <MicOff size={24} />"};"              </button>              <button className="control-btn">"                <Share2 size={24"} />"              </button>              <button className="control-btn">"                <Settings size={24"} />"              </button>            </div>          </div>"          <div className="sidebar">"            <div className="sidebar-tabs">"              <button className="tab", active", >"                <MessageSquare size={16"} /> Chat"              </button>              <button className="tab">"                <Users size={16"} /> Participants"              </button>              <button className="tab">"                <FileText size={16"} /> Notes"              </button>            </div>"            <div className="chat-area">"              <div className="chat-messages">"                {chatMessages.map(msg = > ("; };"                  <div key={msg.id"}, className="chat-message">"                    <strong>{msg.sender}:</strong> {msg.content"};"                    <span className="timestamp">"                      {new Date(msg.timestamp).toLocaleTimeString()}                    </span>                  </div>                ))"}"              </div>              <div className="chat-input">"                <input;                  type = "text",                  value={newMessage};                  onChange={(e) = /> setNewMessage(e.target.value)"};",                  onKeyPress={(e) => e.key === "Enter", ;};",                  placeholder="Type", a message..."                />                <button onClick={sendChatMessage"}>Send</button>"              </div>            </div>"            <div className="notes-area">"              <button onClick={downloadSessionNotes"}, className="download-notes-btn">", `;`                <Download size={16} /> Download Notes;              </button>            </div>          </div>        </div>        <style jsx>{}          .group-therapy-session {},  height: 100vh,  display: 'flex,            flex-direction: column,  background: #1a1a1a          }          .session-header {},  display: flex            justify-content: spacebetween            align-items: center,  padding: 20px,  background: #2a2a2a            border-bottom: 1px solid #3a3a3a          }          .session-info h2 {},  margin: 0 0 10px 0,  color: white}          .session-meta {},  display: flex,  gap: 20px,  color: #aaa,            font-size: 14px          }          .session-meta span {},  display: flex            align-items: center,  gap: 5px          }          .session-controls {},  display: flex,  gap: 10px          }          .record-btn,          .leave-btn {},  display: flex            align-items: center,  gap: 8px,  padding: 10px 20px,  border: none            border-radius: 8px,  cursor: pointer            font-size: 14px,  transition: all 0.3s          }          .record-btn {},  background: #4a4a4a,  color: white}          .record-btn.recording {},  background: #dc2626,  animation: pulse 2s infinite          }          .leave-btn {},  background: #dc2626,  color: white}          .leave-btn:hover {},  background: #b91c1c          }          .session-content {},  flex: 1,  display: flex,  overflow: hidden          }          .video-area {},  flex: 1,  display: flex            flex-direction: column,  padding: 20px          }          .view-controls {},  display: flex,  gap: 10px            margin-bottom: 20px          }          .view-controls button {},  padding: 8px 16px,  background: #3a3a3a,  color: #aaa,  border: none            border-radius: 6px,  cursor: pointer,  transition: all 0.3s          }          .view-controls button.active`,          .view-controls button:hover {},  background: #667eea,  color: white}          .participants-grid {},  flex: 1,  display: grid            grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 10px            overflow-y: auto          }          .participant-tile {},            aspect-ratio: 169,  background: #2a2a2a            border-radius: 8px,  overflow: hidden,  position: relative}          .video-container {},  width: 100,  height: 100,  position: relative}          .participant-video {},  width: 100,  height: 100,            object-fit: cover          }          .video-placeholder {},  width: 100,  height: 100,  display: flex            align-items: center            justify-content: center,  background: #3a3a3a,  color: #666}          .video-off-overlay {},  position: absolute,  top: 50,  left: 50,  transform: translate(-50, -50%),  background: rgba0, 0, 0, 0.7),  padding: 10px            border-radius: 50,  color: white}          .participant-info {},  position: absolute,  bottom: 0,  left: 0,  right: 0,  padding: 8px,  background: linear-gradienttransparent, rgba(0, 0, 0, 0.8)),  color: white,  display: flex            justify-content: spacebetween            align-items: center          }          .participant-name {},            font-size: 12px          }          .participant-status {},  display: flex            align-items: center,  gap: 5px          }          .speaking-indicator {},  width: 8px,  height: 8px,  background: #22c55e            border-radius: 50,  animation: pulse 1s infinite          }          .connection-quality {},            font-size: 10px          }          .connection-quality.good { color: #22c55e}          .connection-quality.fair { color: #fbbf24}          .connection-quality.poor { color: #dc2626}          .breakout-rooms-view {},  flex: 1,  padding: 20px          }          .breakout-header {},  display: flex            justify-content: spacebetween            align-items: center            margin-bottom: 20px          }          .breakout-header h3 {},  color: white,  margin: 0          }          .create-room-btn {},  padding: 8px 16px,  background: #667eea,  color: white,  border: none            border-radius: 6px,  cursor: pointer          }          .rooms-list {},  display: grid            grid-template-columns: repeat(autofill, minmax(200px, 1fr)),  gap: 15px          }          .breakout-room-card {},  background: #2a2a2a,  padding: 20px            border-radius: 8px            text-align: center          }          .breakout-room-card h4 {},  color: white,  margin: 0 0 10px 0          }          .breakout-room-card p {},  color: #aaa,  margin: 10px 0          }          .breakout-room-card button {},  width: 100,  padding: 8px,  background: #667eea,  color: white,  border: none            border-radius: 6px,  cursor: pointer          }          .breakout-room-card button:disabled {},  background: #4a4a4a,  cursor: notallowed          }          .media-controls {},  display: flex            justify-content: center,  gap: 10px,  padding: 20px,  background: #2a2a2a            border-radius: 12px            margin-top: 20px          }          .control-btn {},  width: 56px,  height: 56px,            border-radius: 50,  border: none,  background: #3a3a3a,  color: white,  cursor: pointer,  display: flex            align-items: center            justify-content: center,  transition: all 0.3s          }          .control-btn:hover {},  background: #4a4a4a          }          .control-btn.active {},  background: #667eea          }          .sidebar {},  width: 350px,  background: #2a2a2a,  display: flex            flex-direction: column            border-left: 1px solid #3a3a3a          }          .sidebar-tabs {},  display: flex            border-bottom: 1px solid #3a3a3a          }          .sidebar-tabs .tab {},  flex: 1,  padding: 12px,  background: none,  border: none,  color: #aaa,  cursor: pointer,  display: flex            align-items: center            justify-content: center,  gap: 5px            font-size: 14px            border-bottom: 2px solid transparent          }          .sidebar-tabs .tab.active {},  color: white,            border-bottom-color: #667eea          }          .chat-area {},  flex: 1,  display: flex            flex-direction: column          }          .chat-messages {},  flex: 1,  padding: 20px            overflow-y: auto          }          .chat-message {},            margin-bottom: 15px,  color: white}          .chat-message strong {},  color: #667eea}          .chat-message .timestamp {},  display: block            font-size: 11px,  color: #666,            margin-top: 2px          }          .chat-input {},  display: flex,  padding: 15px            border-top: 1px solid #3a3a3a          }          .chat-input input {},  flex: 1,  padding: 10px,  background: #3a3a3a,  border: none,  color: white,            border-radius: 6px 0 0 6px          }          .chat-input button {},  padding: 10px 20px,  background: #667eea,  color: white,  border: none            border-radius: 0 6px 6px 0,  cursor: pointer          }          .notes-area {},  padding: 20px          }          .download-notes-btn {},  display: flex            align-items: center,  gap: 8px,  padding: 10px 16px,  background: #3a3a3a,  color: white,  border: none            border-radius: 6px,  cursor: pointer          }          @keyframes pulse {},            0% {},              box-shadow: 0 0 0 0 rgba(220, 38, 38, 0.4)            },            70% {},              box-shadow: 0 0 0 10px rgba(220, 38, 38, 0)            },            100% {},              box-shadow: 0 0 0 0 rgba(220, 38, 38, 0)            }          }        }</style>      </div>    )  },  return (;    <div className="group-therapy">", ", `;`      <div className="therapy-header">"        <h1>Group Therapy Sessions</h1>        <p>Join therapist-led group sessions for support and healing</p>      </div>"      <div className="sessions-filter">"        <button className="filter-btn", active", >All Sessions</button>"        <button className="filter-btn">Upcoming</button>"        <button className="filter-btn">Live Now</button>"        <button className="filter-btn">My Sessions</button>"      </div>"      <div className="sessions-grid">"        {sessions.map(session = > (";};"          <div key={session.id"}, className="session-card">"            {session.status = == "live", ;};"              <div className="live-indicator">"                <span className="live-dot"></span>",                LIVE NOW              </div>            )}            <div className="session-header">"              <h3>{session.title}</h3>              <span className={session-type $session.type"}>                {session.type = == video" && <Video size={16} />"};"                {session.type = == "audio", ;};"                {session.type = == "text", ;};"                {session.type"}"              </span>            </div>"            <p className="session-description">{session.description"}</p>","            <div className="session-details">"              <div className="detail">"                <User size={16} />                <span>{session.therapistName"}</span>"              </div>              <div className="detail">"                <Clock size={16} />                <span>{session.duration"}, minutes</span>"              </div>              <div className="detail">"                <Users size={16} />                <span>{session.currentParticipants}/{session.maxParticipants"}, participants</span>"              </div>              <div className="detail">"                <Calendar size={16} />                <span>{new Date(session.scheduledTime).toLocaleString()"}</span>"              </div>            </div>"            <div className="session-features">"              {session.isPrivate && ("}"                <span className="feature", ">"                  <Lock size={14} /> Private;                </span>              )"}"              {session.recordingEnabled && ("}"                <span className="feature">"                  <Record size={14} /> Recording Available;                </span>              )"}"              {session.price && ("}"                <span className="feature price">"                  ${session.price}                </span>              )"}"            </div>"            <div className="session-actions">"              {session.status = == "live", ;};"                <button ",                  onClick={(") => joinSession(session)"});",                  className="join-btn", live"                >                  <Play size={16} /> Join Now;                </button>              ) : ("                <button ",                  onClick={() => joinSession(session)"};",                  className="join-btn",                  disabled={session.currentParticipants >= session.maxParticipants"};"                >;                  {session.currentParticipants >= session.maxParticipants ? ({Session Full;                  ) : (                    <>                      <CheckCircle size={16} /> Book Session, </>                  )}                </button>              )}            </div>          </div>        ))}      </div>      <style jsx>{}        .group-therapy {},          max-width: 1200px,  margin: 0 auto,  padding: 20px        }        .therapy-header {},          text-align: center          margin-bottom: 40px        }        .therapy-header h1 {},  margin: 0 0 10px 0          font-size: 25em,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%)          -webkit-background-clip: text          -webkit-text-fill-color: transparent        }        .therapy-header p {},  color: #666,          font-size: 11em        }        .sessions-filter {},  display: flex,  gap: 10px          margin-bottom: 30px          justify-content: center        }        .filter-btn {},  padding: 10px 20px,  background: white,  border: 2px solid #e5e5e5          border-radius: 20px,  cursor: pointer,  transition: all 0.3s        }        .filter-btn:hover {},          border-color: #667eea,  color: #667eea}        .filter-btn.active {},  background: #667eea,  color: white,          border-color: #667eea        }        .sessions-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(350px, 1fr)),  gap: 25px        }        .session-card {},  background: white          border-radius: 16px,  padding: 25px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.1),  position: relative,  transition: transform 0.3s, box-shadow 0.3s        }        .session-card:hover {},  transform: translateY(-2px          box-shadow: 0 4px 25px rgba(0, 0, 0, 0.15)        }        .live-indicator {},  position: absolute,  top: 15px,  right: 15px,  display: flex          align-items: center,  gap: 5px,  padding: 5px 10px,  background: #dc2626,  color: white,          border-radius: 20px          font-size: 12px          font-weight: bold        }        .live-dot {},  width: 8px,  height: 8px,  background: white          border-radius: 50,  animation: pulse 2s infinite        }        .session-header {},  display: flex          justify-content: spacebetween          align-items: flexstart          margin-bottom: 15px        }        .session-header h3 {},  margin: 0,  flex: 1,  color: #333}        .session-type {},  display: flex          align-items: center,  gap: 5px,  padding: 5px 10px          border-radius: 20px          font-size: 12px          text-transform: uppercase          font-weight: bold        }        .session-type.video {},  background: #dbeafe,  color: #1e40af}        .session-type.audio {},  background: #f3e8ff,  color: #6b21a8}        .session-type.text {},  background: #fef3c7,  color: #92400e}        .session-description {},  color: #666,  margin: 15px 0          line-height: 16        }        .session-details {},          border-top: 1px solid #e5e5e5          border-bottom: 1px solid #e5e5e5,  padding: 15px 0,  margin: 15px 0        }        .detail {},  display: flex          align-items: center,  gap: 8px,  color: #666,  margin: 8px 0          font-size: 14px        }        .session-features {},  display: flex,  gap: 10px          flex-wrap: wrap,  margin: 15px 0        }        .feature {},  display: flex          align-items: center,  gap: 5px,  padding: 5px 10px,  background: #f0f0f0          border-radius: 15px          font-size: 12px,  color: #666}        .feature.price {},  background: #dcfce7,  color: #166534,          font-weight: bold        }        .session-actions {},          margin-top: 20px        }        .join-btn {},  width: 100,  padding: 12px,  background: #667eea,  color: white,  border: none          border-radius: 12px          font-size: 16px,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  gap: 8px,  transition: background 0.3s        }        .join-btn:hover {},  background: #5a67d8        }        .join-btn.live {},  background: #dc2626,  animation: pulsebg 2s infinite        }        .join-btn:disabled {},  background: #ccc,  cursor: notallowed        }        @keyframes pulse {},          0% {},            box-shadow: 0 0 0 0 rgba(255, 255, 255, 0.7)          },          70% {},            box-shadow: 0 0 0 10px rgba(255, 255, 255, 0)          },          100% {},            box-shadow: 0 0 0 0 rgba(255, 255, 255, 0)          }        }        @keyframes pulse-bg {},          0%, 100% {},  background: #dc2626          },          50% {},  background: #b91c1c          }        }      }</style>    </div>  )}";"