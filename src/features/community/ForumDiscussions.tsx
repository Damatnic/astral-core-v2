// Forum Discussions - Topic-based Discussion Forums with Moderationimport React, { useState, useEffect, useCallback }, from react",import { ", Quote }, from ", lucide-react",import { communityService }, from "../../services/communityService",interface ForumCategory {}  id: string,  name: string,  description: string,  icon: string,  color: string,  topicCount: number,  postCount: number,  lastActivity: Date,  moderators: string[,]  rules: string[,]  isRestricted: boolean  minKarmaRequired ? : number},interface ForumTopic {}  id: string,  categoryId: string,  title: string,  content: string,  authorId: string,  authorName: "string,",  isAnonymous: "boolean,", `;`  tags: string[],",",  type: "discussion  | ", question'  | 'support'  | 'story'  | 'resource"  | ", poll",  priority: "normal  | ", high"  | ", urgent",  status: "open  | ", closed'  | 'solved"  | ", archived",  isPinned: boolean,  isLocked: boolean,  hasAcceptedAnswer: boolean  triggerWarning?: string,  createdAt: Date,  updatedAt: Date  lastReplyAt ? : Date,  stats: {},  views: number,  replies: number,  upvotes: number,  downvotes: number,  hearts: number,  bookmarks: number,  shares: number  },  moderationFlags: string[]  bestAnswer ? : string},interface ForumReply {}  id: string,  topicId: string,  authorId: string,  authorName: string,  isAnonymous: boolean,  content: string,  createdAt: Date  updatedAt?: Date,  isEdited: boolean  parentReplyId ? : string, // For nested replies,  depth: number,  isAcceptedAnswer: boolean,  isModerator: boolean,  isHelpful: boolean,  stats: {},  upvotes: number,  downvotes: number,  hearts: number,  reports: number },",  moderationStatus: "approved  | ", pending'  | 'flagged"  | ", removed",  attachments ? : ForumAttachment[]},interface ForumAttachment {",  id: "string,",  type: "image  | ", file"  | ", link,",",  url: string,  name: string,  size?: number  preview?: string}interface ForumPoll {}  id: string,  topicId: string,  question: string,  options: PollOption[,]  allowMultiple: boolean,  isAnonymous: boolean  expiresAt?: Date,  totalVotes: number},interface PollOption {}  id: string,  text: string,  votes: number,  percentage: number},export const ForumDiscussions: ReactFC = () => {},  const []ategories, setCategories] = useState<ForumCategory[]>([])  const []opics, setTopics] = useState<ForumTopic[]>([])  const []eplies, setReplies] = useState<Map<string, ForumReply[]>>(new Map())  const []electedCategory", setSelectedCategory] = useState<string>(", all)")",  const []electedTopic, setSelectedTopic] = useState<ForumTopic | null>(null)  const []earchQuery", setSearchQuery] = useState(")"),",  const []ortBy", setSortBy] = useState<", recent"  | 'popular'  | 'trending'  | 'unanswered'>('recent)")",  const []opicFilter", setTopicFilter] = useState<string>(", all)")",  const []howCreateTopic, setShowCreateTopic] = useState(false)  const []ctiveView", setActiveView] = useState<", categories'  | 'topics'  | 'topic-detail'>('categories)")";",  const []urrentUser] = useState({ id: "user-123, name: ", ForumUser", karma: 145, isModerator: false }),",  const []ewTopic, setNewTopic] = useState({},  title:  ,    content: , ",",",    category: ",",  type: "discussion,  tags: ,    isAnonymous: "false,    triggerWarning: ",",  priority: "normal})",  const []ewReply", setNewReply] = useState({",  content: ",",",  isAnonymous: false,    parentReplyId: null as string | null",",  "});"  // Initialize mock data  useEffect(() => {},    const mockCategories: ForumCategory[ ] []      {  id: anxiety-support,",        name: "Anxiety, Support",        description: "Share, experiences, coping strategies, and support for anxiety disorders",        icon: ",        color: "#10b981,  topicCount: 1247,        postCount: 8934,        lastActivity: new Date(Date.now() - 300000),        moderators: []nxietyExpert, 'CalmMind],',        rules: []e supportive and non-judgmental","];",          "Share experiences, not medical advice",",",          "Use trigger warnings for intense content",",",          "No discussion of specific medication effects"],",        isRestricted: "false}"      {",  id: "depression-discussions,        name: "Depression, Discussions",        description: "Safe, space for discussing depression, treatment, and recovery journeys",        icon: ",        color: "#3b82f6,  topicCount: 987,        postCount: 6742,        lastActivity: new Date(Date.now() - 150000),        moderators: []opeKeeper, 'RecoveryGuide],',        rules: []bsolutely no harmful content","];",          "Focus on hope and recovery",",",          "Professional help is encouraged",",",          "Share what works for you specifically"],",        isRestricted: "false}"      {",  id: "trauma-recovery,        name: "Trauma & PTSD Recovery",        description: "Trauma-informed, discussions with professional moderation",        icon: ",        color: "#8b5cf6,  topicCount: 456,        postCount: 2134,        lastActivity: new Date(Date.now() - 900000),        moderators: []raumaSpecialist, 'HealingPath],',        rules: []rofessional screening required for participation","];",          "Mandatory trigger warnings",",",          "No graphic details of traumatic events",",",          "Focus on healing and recovery only",",",          "Grounding techniques encouraged before posting"],",        isRestricted: true,        minKarmaRequired: 50}"      {",  id: "addiction-recovery,        name: "Addiction, Recovery",        description: "Support, for various addiction recovery journeys",        icon: ",        color: "#f59e0b,  topicCount: 789,        postCount: 4521,        lastActivity: new Date(Date.now() - 600000),        moderators: []oberSupport, 'RecoveryCoach],',        rules: []o substance glorification","];",          "Celebrate sobriety milestones",",",          "Share recovery resources",",",          "Support all recovery paths",",",          "No specific substance discussion details"],",        isRestricted: "false}"      {",  id: "relationships-family,        name: "Relationships & Family",        description: "Healthy, relationships, family dynamics, and communication",        icon: ",        color: "#ef4444,  topicCount: 634,        postCount: 3876,        lastActivity: new Date(Date.now() - 450000),        moderators: []elationshipHelper, 'FamilyWise],',        rules: []espect all relationship types","];",          "No relationship advice - share experiences only",",",          "Maintain privacy of others",",",          "Focus on healthy communication"],",        isRestricted: "false}"      {",  id: "success-stories,        name: "Success, Stories & Inspiration",        description: "Share your victories, progress, and inspirational journeys",        icon: ",        color: "#fbbf24,  topicCount: 345,        postCount: 1987,        lastActivity: new Date(Date.now() - 180000),        moderators: []nspirationHub, 'CelebrationGuide],',        rules: []ocus on personal growth and progress","];",          "Include helpful strategies that worked",",          "Be authentic about challenges overcome",",          "Inspire hope in others"],",        isRestricted: false      }    ]    const mockTopics: ForumTopic[ ] []      {  id: "topic-1,",        categoryId: "anxiety-support,        title: "Breathing, techniques that actually work - my experience",        content: "After, trying many different breathing exercises, I wanted to share what has been most effective for me during panic attacks...",        authorId: "user-456,        authorName: "CalmSeeker,  isAnonymous: false,        tags: []reathing, ", panic-attacks", ", techniques, "coping]',        type: "discussion,        priority: "normal,        status: "open,  isPinned: false,        isLocked: false,        hasAcceptedAnswer: false,        createdAt: new Date(Date.now() - 3600000),        updatedAt: new Date(Date.now() - 1800000),        lastReplyAt: new Date(Date.now() - 900000),        stats: {},  views: 234,          replies: 18,          upvotes: 45,          downvotes: 2,          hearts: 23,          bookmarks: 12,          shares: 5        },        moderationFlags: []      }",","      {  id: "topic-2,        categoryId: "depression-discussions,        title: "How, do you handle the morning struggle?",        content: "Every, morning feels like climbing a mountain. What strategies help you get started with your day?",        authorId: "user-789,        authorName: "Anonymous,  isAnonymous: true,        tags: []orning-routine, ", daily-challenges, "coping]',        type: "question,        priority: "normal,        status: "open,  isPinned: false,        isLocked: false,        hasAcceptedAnswer: true,        createdAt: new Date(Date.now() - 7200000),        updatedAt: new Date(Date.now() - 3600000),        lastReplyAt: new Date(Date.now() - 1800000),        stats: {},  views: 156,          replies: 24,          upvotes: 38,          downvotes: 1,          hearts: 19,          bookmarks: 8,          shares: 3        },        moderationFlags: [],",",        bestAnswer: "reply-5}"      {",  id: "topic-3,        categoryId: "success-stories,        title: "6, months anxiety-free - my journey and what helped",        content: "I, never thought I would write this post, but here I am, 6 months without a panic attack. Here is what made the difference...",        authorId: "user-321,        authorName: "HopeReturned,  isAnonymous: false,        tags: []uccess-story, ", anxiety-recovery", ", journey, "hope]',        type: "story,        priority: "normal,        status: "open,",  isPinned: true,        isLocked: false,        hasAcceptedAnswer: false,        createdAt: new Date(Date.now() - 10800000),        updatedAt: new Date(Date.now() - 5400000),        lastReplyAt: new Date(Date.now() - 2700000),        stats: {},  views: 567,          replies: 42,          upvotes: 89,          downvotes: 0,          hearts: 67,          bookmarks: 34,          shares: 15        },        moderationFlags: []      }    ]    setCategories(mockCategories)    setTopics(mockTopics)    // Mock replies for topic-1,    setReplies(new Map([]];"      []opic-1", []];"        {  id: "reply-1,",          topicId: "topic-1,          authorId: "user-111,          authorName: "BreathingMaster,  isAnonymous: "false,          content: "Thank, you for sharing this! The 4-7-8 technique has been a game changer for me too. I practice it every morning now.",          createdAt: new Date(Date.now() - 900000),          isEdited: false,          depth: 0,          isAcceptedAnswer: false,          isModerator: false,          isHelpful: true,          stats: { upvotes: 8, downvotes: 0, hearts: 5, reports: 0 },          moderationStatus: "approved}"        {",  id: "reply-2,          topicId: "topic-1,          authorId: "user-222,          authorName: "Anonymous,  isAnonymous: "true,",          content: "I struggle with remembering the timing during panic attacks. Any tips for making this more automatic?",",          createdAt: new Date(Date.now() - 600000),          isEdited: false,          depth: 0,          isAcceptedAnswer: false,          isModerator: false,          isHelpful: false,          stats: { upvotes: 3, downvotes: 0, hearts: 2, reports: 0 }",",          moderationStatus: "approved}"      ]]    ]))"  }", []);",  const filteredTopics = React.useMemo(() => topics.filteredTopics = topics.filter(topic  => {}    const matchesCategory = selectedCategory === "all", []opics]);",    const matchesSearch = topic.title.toLowerCase().includes(searchQuery.toLowerCase()) ||;                         topic.content.toLowerCase().includes(searchQuery.toLowerCase()) ||                         topic.tags.some(tag = > tag.toLowerCase().includes(searchQuery.toLowerCase()));    const matchesFilter = topicFilter === "all", ;"                         (topicFilter = == "pinned"                         (topicFilter = == "solved", ;"                         (topicFilter = == "unanswered", ;",    return matchesCategory && matchesSearch & matchesFilter  })";",  const sortedTopics = []..filteredTopics].sort((a", b) => {};",    switch (sortBy) {},      case 'popular':,        return (b.stats.upvotes + b.stats.hearts) - (a.stats.upvotes + a.stats.hearts      case 'trending':,        return b.stats.views - a.statsviews      case 'unanswered':,        return a.stats.replies - b.stats.replies      case 'default':,',  default:        return (b.lastReplyAt || b.createdAt).getTime() - (a.lastReplyAt || a.createdAt).getTime(    }  });  const handleCreateTopic = async () => {},    if (!newTopic.title.trim() || !newTopic.content.trim() || !newTopic.category) return const topic: ForumTopic},  id: ``opic-${Date.now(}",",      categoryId: newTopiccategory,      title: newTopictitle,      content: newTopiccontent,      authorId: currentUser.id,`      authorName: newTopicisAnonymous ? ``nonymous" : currentUser.name,", ``      isAnonymous: newTopicisAnonymous, tags: newTopic.tags.split(, ").map(tag = > tag.trim()).filter(Boolean),";",      type: newTopictype as any,      priority: newTopicpriority as any",", `;`      status: "open,",  isPinned: false,      isLocked: false,      hasAcceptedAnswer: false,      triggerWarning: newTopictriggerWarning || undefined,      createdAt: new Date(),      updatedAt: new Date(),      stats: {},  views: 0,        replies: 0,        upvotes: 0,        downvotes: 0,        hearts: 0,        bookmarks: 0,        shares: 0      },      moderationFlags: []    },    setTopics(prev = > []opic, ...prev]`;    setNewTopic({},  title:  ,      content: , ",", `;`      category: ",",  type: "discussion,  tags: ,      isAnonymous: "false,", `;`      triggerWarning: ",",  priority: "normal    })    setShowCreateTopic(false)  },  const handleReply = async () => {},    if (!selectedTopic || !newReply.content.trim()) return const reply: ForumReply},  id: ``eply-${Date.now(},      topicId: selectedTopicid,      authorId: currentUser.id,`;",      authorName: newReplyisAnonymous ? ``nonymous" : currentUser.name,", `;`      isAnonymous: newReplyisAnonymous,      content: newReplycontent,      createdAt: new Date(),      isEdited: false,      parentReplyId: newReplyparentReplyId,      depth: newReplyparentReplyId ? 1 : 0,      isAcceptedAnswer: false,      isModerator: currentUserisModerator,      isHelpful: false,      stats: { upvotes: 0, downvotes: 0, hearts: 0, reports: 0 }``,", `;`      moderationStatus: "approved    },    const topicReplies = replies.get(selectedTopic.id) || [];    setReplies(new Map(replies.set(selectedTopic.id, []..topicReplies, reply])))        // Update topic stats    setTopics(prev = > prev.map(topic => , topic.id = == selectedTopic.id ;,        ? { ...topic, stats: { ...topic.stats, replies: topic.statsreplies + 1 }, lastReplyAt: new Date()}        : topic    ))    setNewReply({ content: ", isAnonymous: false, parentReplyId: null })"  },  const renderCategoryCard = (category: ForumCategory => (";"    <div key={category.id"}, className="category-card">"      <div className="category-header">"        <div className="category-icon", style={", color: categorycolor"}>          {category.icon"}"        </div>        <div className="category-info">"          <h3>{category.name}</h3>          <p>{category.description"}</p>"          {category.isRestricted && ("}"            <div className="restriction-notice">"              <Lock size={14} />              <span>Restricted - {category.minKarmaRequired}, karma required</span>            </div>          )"}"        </div>      </div>"      <div className="category-stats">"        <div className="stat">"          <MessageSquare size={16} />          <span>{category.topicCount"}, topics</span>"        </div>        <div className="stat">"          <MessageCircle size={16} />          <span>{category.postCount"}, posts</span>"        </div>        <div className="stat">"          <Clock size={16} />          <span>Active {new Date(category.lastActivity).toRelativeTimeString()"}</span>"        </div>      </div>"      <div className="category-moderators">"        <span>Moderated by: {category.moderators.join(, ")}</span>"      </div>      <button         onClick={() =>";",          setSelectedCategory(category.id)          setActiveView("topics");"        }},        className="view-topics-btn",        disabled={category.isRestricted && currentUser.karma < (category.minKarmaRequired || 0)}      >        View Topics      </button>    </div>  `;  const renderTopicCard = (topic: ForumTopic => (", ", `;`    <div key={topic.id"}, className={",topic-card $topic.isPinned ? ``inned :"}>",", `;`      {topic.isPinned && ("}"        <div className="pinned-indicator">"          <Pin size={14} />          <span>Pinned</span>        </div>      )"}"      {topic.triggerWarning && ("}"        <div className="trigger-warning">"          <AlertTriangle size={14} />          <span>TW: {topictriggerWarning}</span>        </div>      )}      <div className="topic-header">"        <div className="topic-main">"          <h3 ",            className="topic-title",            onClick={() =>",", `;`              setSelectedTopic(topic`;              setActiveView("topic-detail");"            }}          >";"            {topic.title"}"          </h3>          <div className="topic-meta">"            <span className="author">"              {topic.isAnonymous ? '👤 Anonymous' : topic.authorName'}'            </span>            <span className="timestamp">"              {topic.createdAt.toLocaleString()}            </span>            <span className={topic-type $topic.type"}>              {topic.type"}"            </span>            {topic.hasAcceptedAnswer && ("}"              <span className="solved-badge">"                <CheckCircle size={14} />";",                Solved              </span>            )"}"          </div>          <p className="topic-preview">{topic.content.substring(0`, `00)"}...</p>"          {topic.tags.length > 0 && ("}"            <div className="topic-tags">"              {topic.tags.map(tag = > (";};"                <span key={tag"}, className="tag">#{tag}</span>"              ))}            </div>          )"}"        </div>"        <div className="topic-stats">"          <div className="stat-group">"            <div className="stat">"              <Eye size={16} />              <span>{topic.stats.views"}</span>"            </div>            <div className="stat">"              <MessageCircle size={16} />              <span>{topic.stats.replies"}</span>"            </div>          </div>          <div className="stat-group">"            <div className="stat upvotes">"              <ArrowUp size={16} />              <span>{topic.stats.upvotes"}</span>"            </div>            <div className="stat hearts">"              <Heart size={16} />              <span>{topic.stats.hearts"}</span>"            </div>          </div>        </div>      </div>"      <div className="topic-actions">"        <button className="action-btn">"          <ArrowUp size={16"} />",          Upvote        </button>        <button className="action-btn">"          <Heart size={16"} />",          Support        </button>        <button className="action-btn">"          <Bookmark size={16"} />",          Save        </button>        <button className="action-btn">"          <Share2 size={16"} />",          Share        </button>        <button className="action-btn report">"          <Flag size={16"} />",          Report        </button>      </div>    </div>  )  const renderTopicDetail = () => {},    if (!selectedTopic) return null    const topicReplies = replies.get(selectedTopic.id) || [];    return (      <div className="topic-detail">"        <div className="topic-detail-header">"          <button ";",            onClick={() => setActiveView("topics")}",            className="back-btn"          >            ← Back to Topics          </button>          "          <div className="topic-breadcrumb">"            <span>{categories.find(c = > c.id === selectedTopic.categoryId)?.name}</span>            <span> / </span>            <span>{selectedTopic.title"}</span>"          </div>        </div>;        <div className="topic-content">"          <div className="main-topic">"            {selectedTopic.triggerWarning && ("}"              <div className="trigger-warning">"                <AlertTriangle size={16} />                <span>Trigger Warning: {selectedTopictriggerWarning}</span>              </div>            )}            <div className="topic-post">"              <div className="post-header">"                <div className="author-info">"                  <span className="author-name">"                    {selectedTopic.isAnonymous ? '👤 Anonymous' : selectedTopic.authorName'}'                  </span>                  <span className="post-time">"                    {selectedTopic.createdAt.toLocaleString()}                  </span>                  <span className={topic-type $selectedTopic.type"}>                    {selectedTopic.type"}"                  </span>                  {selectedTopic.isPinned && ("}"                    <span className="pinned-badge">"                      <Pin size={14} />                      Pinned                    </span>                  )"}"                </div>                <button className="post-menu">"                  <MoreVertical size={16"} />"                </button>              </div>"              <h1 className="topic-title">{selectedTopic.title"}</h1>"              <div className="topic-content-text">{selectedTopic.content"}</div>","              {selectedTopic.tags.length > 0 && ("}"                <div className="topic-tags">"                  {selectedTopic.tags.map(tag = > (";};"                    <span key={tag"}, className="tag">#{tag}</span>"                  ))}                </div>              )}              <div className="topic-engagement">"                <div className="engagement-stats">"                  <span><Eye size={16} /> {selectedTopic.stats.views}, views</span>                  <span><MessageCircle size={16} /> {selectedTopic.stats.replies}, replies</span>                  <span><Heart size={16} /> {selectedTopic.stats.hearts}, hearts</span>                  <span><Bookmark size={16} /> {selectedTopic.stats.bookmarks"}, saved</span>"                </div>"                <div className="engagement-actions">"                  <button className="vote-btn", ", upvote">"                    <ArrowUp size={16} />                    <span>{selectedTopic.stats.upvotes"}</span>"                  </button>                  <button className="vote-btn downvote">"                    <ArrowDown size={16} />                    <span>{selectedTopic.stats.downvotes"}</span>"                  </button>                  <button className="action-btn">"                    <Heart size={16"} />",                    Support                  </button>                  <button className="action-btn">"                    <Bookmark size={16"} />",                    Save                  </button>                  <button className="action-btn">"                    <Share2 size={16"} />",                    Share                  </button>                </div>              </div>            </div>          </div>"          <div className="replies-section">"            <div className="replies-header">"              <h2>{topicReplies.length"}, Replies</h2>"              <div className="replies-sort">"                <select defaultValue = "oldest", >"                  <option value = "oldest", >Oldest first</option>"                  <option value = "newest", >Newest first</option>"                  <option value = "helpful", >Most helpful</option>"                  <option value = "upvoted", >Most upvoted</option>"                </select>              </div>            </div>"            <div className="reply-form">"              <h3>Add your reply</h3>              <textarea                placeholder="Share", your thoughts, experiences, or support...",                value={newReply.content}                onChange={(e) => setNewReply( ...newReply", content: e.target.value)}                rows={4"}"              />              <div className="reply-options">"                <label className="anonymous-toggle">"                  <input                    type = "checkbox",                    checked={newReply.isAnonymous}                    onChange={(e) = /> setNewReply( ...newReply", isAnonymous: e.target.checked)}                  />                  Reply anonymously                </label>                <button onClick={handleReply"}, className="reply-btn">",                  Post Reply                </button>              </div>            </div>"            <div className="replies-list">"              {topicReplies.map(reply = > ("; }", `;`                <div key={reply.id"}, className={",reply-card $reply.isAcceptedAnswer ? ``ccepted :"}>",", `;`                  {reply.isAcceptedAnswer && ("}"                    <div className="accepted-answer-badge">"                      <CheckCircle size={16} />                      <span>Accepted Answer</span>                    </div>                  )}                  <div className="reply-header">"                    <div className="reply-author">"                      <span className="author-name">"                        {reply.isAnonymous ? '👤 Anonymous' : reply.authorName'}'                      </span>                      {reply.isModerator && (""}"                        <span className="moderator-badge">"                          <Shield size={14} />                          Moderator                        </span>                      )}                      <span className="reply-time">"                        {reply.createdAt.toLocaleString()"}"                      </span>                      {reply.isEdited && ("}"                        <span className="edited-badge">"                          <Edit3 size={12} />                          Edited                        </span>                      )"}"                    </div>                    <button className="reply-menu">"                      <MoreVertical size={16"} />"                    </button>                  </div>"                  <div className="reply-content">{reply.content"}</div>","                  <div className="reply-actions">"                    <div className="vote-actions">"                      <button className="vote-btn">"                        <ArrowUp size={14} />                        <span>{reply.stats.upvotes"}</span>"                      </button>                      <button className="vote-btn">"                        <ArrowDown size={14} />                        <span>{reply.stats.downvotes"}</span>"                      </button>                    </div>                    <div className="reply-engagement">"                      <button className="action-btn">"                        <Heart size={14} />                        <span>{reply.stats.hearts"}</span>"                      </button>                      <button className="action-btn">"                        <Reply size={14"} />",                        Reply                      </button>                      <button className="action-btn">"                        <Quote size={14"} />",                        Quote                      </button>                      <button className="action-btn report">"                        <Flag size={14} />                        Report                      </button>                    </div>                  </div>                </div>              ))}            </div>          </div>        </div>      </div>    )  },  return (;    <div className="forum-discussions">"      {activeView = == "categories", ;};"        <div className="categories-view">"          <div className="page-header">"            <h1>Discussion Forums</h1>            <p>Join topic-based discussions with community support and moderation</p>          </div>"          <div className="forum-nav">"            <div className="nav-tabs">"              <button className="tab", ", active">Categories</button>"              <button ",                className="tab",                onClick={() => setActiveView("topics")}"              >                All Topics              </button>            </div>            <button ",              onClick={() => setShowCreateTopic(true)"}",              className="create-topic-btn"            >              <Plus size={16"} />",              New Topic            </button>          </div>"          <div className="categories-grid">"            {categories.map(renderCategoryCard)}          </div>        </div>      )}      {activeView = == "topics", ;};"        <div className="topics-view">"          <div className="page-header">"            <h1>              {selectedCategory = == "all", ;}";"                ? "All Forum Topics"                : categories.find(c = > c.id === selectedCategory')?.name | | 'Topics``};"            </h1>            <p>";"              {selectedCategory = == "all", ;};"                ? "Browse all discussions across categories"                : categories.find(c = > c.id === selectedCategory')?.description'              }            </p>          </div>","          <div className="forum-nav">"            <div className="nav-tabs">"              <button ",                className="tab",                onClick={() => setActiveView("categories")}"              >                Categories              </button>              <button className="tab active">All Topics</button>"            </div>            <button ",              onClick={() => setShowCreateTopic(true)"}",              className="create-topic-btn"            >              <Plus size={16"} />",              New Topic            </button>          </div>"          <div className="topics-controls">"            <div className="search-bar">"              <Search className="search-icon" />"              <input                type = "text",                placeholder="Search", topics...",                value={searchQuery}                onChange={(e) = /> setSearchQuery(e.target.value)"}"              />            </div>"            <div className="filters">"              <select                 value={selectedCategory}                onChange={(e) => setSelectedCategory(e.target.value)"}"              >                <option value = "all", >All Categories</option>"                {categories.map(cat  => (                  <option key={cat.id}, value={cat.id}>{cat.name}</option>                ))}              </select>              <select                 value={topicFilter}                onChange={(e) => setTopicFilter(e.target.value)"}"              >                <option value = "all", >All Topics</option>"                <option value = "pinned", >Pinned</option>"                <option value = "solved", >Solved</option>"                <option value = "unanswered", >Unanswered</option>"              </select>              <select                 value={sortBy}                onChange={(e) => setSortBy(e.target.value as any)"}"              >                <option value = "recent", >Most Recent</option>"                <option value = "popular", >Most Popular</option>"                <option value = "trending", >Trending</option>"                <option value = "unanswered", >Unanswered</option>"              </select>            </div>          </div>"          <div className="topics-list">"            {sortedTopics.map(renderTopicCard)}          </div>        </div>      )}      {activeView = == "topic-detail", ;};"      {showCreateTopic && ("}"        <div className="create-topic-modal">"          <div className="modal-content">"            <div className="modal-header">"              <h2>Create New Topic</h2>              <button onClick={() => setShowCreateTopic(false)"}, className="close-btn">"                <X />              </button>            </div>"            <div className="topic-form">"              <div className="form-group">"                <label>Category</label>                <select                   value={newTopic.category}                  onChange={(e) => setNewTopic( ...newTopic, category: e.targetvalue)"}"                >                  <option value = ">Select category...</option>"                  {categories.map(cat  => (                    <option                       key={cat.id}                      value={cat.id}                      disabled={cat.isRestricted && currentUser.karma < (cat.minKarmaRequired || 0)}                    >                      {cat.name"} {cat.isRestricted && ", (${cat.minKarmaRequired}", karma)};"                    </option>                  ))"}"                </select>              </div>"              <div className="form-group">"                <label>Topic Type</label>                <select                   value={newTopic.type}                  onChange={(e) => setNewTopic( ...newTopic, type: e.targetvalue)"}"                >                  <option value = "discussion", >Discussion</option>"                  <option value = "question", >Question</option>"                  <option value = "support", >Support Request</option>"                  <option value = "story", >Story/Experience</option>"                  <option value = "resource", >Resource Share</option>"                </select>              </div>"              <div className="form-group">"                <label>Title</label>                <input                  type = "text",                  placeholder="Enter", a clear, descriptive title...",                  value={newTopic.title}                  onChange={(e) = /> setNewTopic( ...newTopic", title: e.target.value)"}"                />              </div>"              <div className="form-group">"                <label>Content</label>                <textarea                  placeholder="Share", your thoughts, question, or story...",                  value={newTopic.content}                  onChange={(e) => setNewTopic( ...newTopic", content: e.target.value)}                  rows={8"}"                />              </div>"              <div className="form-group">"                <label>Tags (comma-separated)</label>                <input                  type = "text",                  placeholder="e.g.,", anxiety, coping, breathing-techniques",                  value={newTopic.tags}                  onChange={(e) = /> setNewTopic( ...newTopic", tags: e.target.value)"}"                />              </div>"              <div className="form-group">"                <label>Trigger Warning (if applicable)</label>                <input                  type = "text",                  placeholder="Brief", description of potential triggers...",                  value={newTopic.triggerWarning}                  onChange={(e) = /> setNewTopic( ...newTopic", triggerWarning: e.target.value)"}"                />              </div>"              <div className="form-options">"                <label className="anonymous-toggle">"                  <input                    type = "checkbox",                    checked={newTopic.isAnonymous}                    onChange={(e) = /> setNewTopic( ...newTopic", isAnonymous: e.target.checked)"}"                  />                  Post anonymously                </label>"                <div className="form-actions">"                  <button onClick={() => setShowCreateTopic(false)"}, className="cancel-btn">",                    Cancel                  </button>                  <button onClick={handleCreateTopic"}, className="submit-btn">",                    Create Topic                  </button>                </div>              </div>            </div>          </div>        </div>      )}      <style jsx>{}        .forum-discussions {},          max-width: 1400px,  margin: 0 auto,  padding: 20px        }        .page-header {},          text-align: center          margin-bottom: 40px        }        .page-header h1 {},  margin: 0 0 10px 0          font-size: 25em,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%)          -webkit-background-clip: text          -webkit-text-fill-color: transparent        }        .page-header p {},  color: #666,          font-size: 11em,  margin: 0        }        .forum-nav {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 30px        }        .nav-tabs {},  display: flex,  gap: 10px          border-bottom: 2px solid #e5e5e5        }        .tab {},  padding: 12px 24px,  background: none,  border: none,  color: #666,  cursor: pointer          font-size: 16px,  transition: all 0.3s          border-bottom: 3px solid transparent          margin-bottom: -2px        }        .tab:hover {},  color: #667eea}        .tab.active {},  color: #667eea,          border-bottom-color: #667eea        }        .create-topic-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 12px 24px,  background: #667eea,  color: white,  border: none          border-radius: 12px          font-size: 16px,  cursor: pointer,  transition: background 0.3s        }        .create-topic-btn:hover {},  background: #5a67d8        }        /* Categories View */        .categories-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(400px, 1fr)),  gap: 25px        }        .category-card {},  background: white          border-radius: 16px,  padding: 25px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08),  transition: all 0.3s          border-left: 4px solid #667eea        }        .category-card:hover {},  transform: translateY(-2px          box-shadow: 0 4px 25px rgba(0, 0, 0, 0.12)        }        .category-header {},  display: flex,  gap: 15px          margin-bottom: 20px        }        .category-icon {},          font-size: 25em,  display: flex          align-items: center        }        .category-info h3 {},  margin: 0 0 8px 0,  color: #333,          font-size: 13em        }        .category-info p {},  color: #666,  margin: 0 0 10px 0          line-height: 15        }        .restriction-notice {},  display: flex          align-items: center,  gap: 5px,  color: #f59e0b,          font-size: 13px          font-weight: 600        }        .category-stats {},  display: flex          justify-content: spacebetween,  margin: 20px 0,  padding: 15px 0          border-top: 1px solid #e5e5e5          border-bottom: 1px solid #e5e5e5        }        .stat {},  display: flex          align-items: center,  gap: 5px,  color: #666,          font-size: 14px        }        .category-moderators {},  color: #888,          font-size: 13px          margin-bottom: 20px        }        .view-topics-btn {},  width: 100,  padding: 12px,  background: #667eea,  color: white,  border: none          border-radius: 10px          font-size: 16px,  cursor: pointer,  transition: background 0.3s        }        .view-topics-btn:hover {},  background: #5a67d8        }        .view-topics-btn:disabled {},  background: #ccc,  cursor: notallowed        }        /* Topics View */        .topics-controls {},  display: flex,  gap: 20px          margin-bottom: 30px          align-items: center          flex-wrap: wrap        }        .search-bar {},  flex: 1,  position: relative,          min-width: 300px        }        .search-icon {},  position: absolute,  left: 15px,  top: 50,  transform: translateY(-50%,  width: 20px,  height: 20px,  color: #666}        .search-bar input {},  width: 100,  padding: 12px 12px 12px 45px,  border: 2px solid #e5e5e5          border-radius: 10px          font-size: 16px,  transition: bordercolor 0.3s        }        .search-bar input:focus {},  outline: none          border-color: #667eea        }        .filters {},  display: flex,  gap: 10px        }        .filters select {},  padding: 12px 15px,  border: 2px solid #e5e5e5          border-radius: 10px          font-size: 14px,  background: white,  cursor: pointer        }        .topics-list {},  display: flex          flex-direction: column,  gap: 20px        }        .topic-card {},  background: white          border-radius: 16px,  padding: 25px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08),  transition: all 0.3s,  position: relative}        .topic-card:hover {},  transform: translateY(-2px          box-shadow: 0 4px 25px rgba(0, 0, 0, 0.12)        }        .topic-card.pinned {},          border-left: 4px solid #f59e0b        }        .pinned-indicator {},  position: absolute,  top: 15px,  right: 15px,  display: flex          align-items: center,  gap: 5px,  padding: 4px 8px,  background: #fef3c7,  color: #92400e,          border-radius: 12px          font-size: 12px          font-weight: 600        }        .trigger-warning {},  display: flex          align-items: center,  gap: 8px,  padding: 8px 12px,  background: #fef2f2,  color: #dc2626,          border-radius: 8px          margin-bottom: 15px          font-size: 13px,  border: 1px solid #fecaca        }        .topic-header {},  display: flex          justify-content: spacebetween,  gap: 20px        }        .topic-main {},  flex: 1        }        .topic-title {},  margin: 0 0 10px 0,  color: #333,          font-size: 13em,  cursor: pointer,  transition: color 0.3s        }        .topic-title:hover {},  color: #667eea}        .topic-meta {},  display: flex          align-items: center,  gap: 15px          margin-bottom: 10px          flex-wrap: wrap        }        .author {},          font-weight: 600,  color: #333}        .timestamp {},  color: #888,          font-size: 13px        }        .topic-type {},  padding: 4px 8px          border-radius: 12px          font-size: 11px          text-transform: uppercase          font-weight: 600        }        .topic-type.discussion {},  background: #e0e7ff,  color: #4c51bf}        .topic-type.question {},  background: #fef3c7,  color: #92400e}        .topic-type.support {},  background: #fce7f3,  color: #be185d}        .topic-type.story {},  background: #dcfce7,  color: #166534}        .topic-type.resource {},  background: #f3e8ff,  color: #6b21a8}        .solved-badge {},  display: flex          align-items: center,  gap: 4px,  padding: 4px 8px,  background: #dcfce7,  color: #166534,          border-radius: 12px          font-size: 12px          font-weight: 600        }        .topic-preview {},  color: #666,          line-height: 16,  margin: 10px 0 15px 0        }        .topic-tags {},  display: flex,  gap: 8px          flex-wrap: wrap          margin-bottom: 15px        }        .tag {},  background: #f0f0f0,  color: #666,  padding: 4px 8px          border-radius: 12px          font-size: 12px        }        .topic-stats {},  display: flex          flex-direction: column,  gap: 10px          align-items: center        }        .stat-group {},  display: flex,  gap: 15px        }        .stat {},  display: flex          align-items: center,  gap: 5px,  color: #666,          font-size: 14px        }        .stat.upvotes {},  color: #22c55e}        .stat.hearts {},  color: #ef4444}        .topic-actions {},  display: flex,  gap: 10px          margin-top: 15px          padding-top: 15px          border-top: 1px solid #e5e5e5        }        .action-btn {},  display: flex          align-items: center,  gap: 5px,  padding: 6px 12px,  background: none,  border: 1px solid #e5e5e5          border-radius: 8px,  color: #666,  cursor: pointer          font-size: 13px,  transition: all 0.3s        }        .action-btn:hover {},          border-color: #667eea,  color: #667eea}        .action-btn.report:hover {},          border-color: #dc2626,  color: #dc2626}        /* Topic Detail View */        .topic-detail {},          max-width: 1000px,  margin: 0 auto        }        .topic-detail-header {},          margin-bottom: 30px        }        .back-btn {},  padding: 10px 20px,  background: #f0f0f0,  border: none          border-radius: 8px,  cursor: pointer          margin-bottom: 15px,  color: #666,  transition: background 0.3s        }        .back-btn:hover {},  background: #e0e0e0        }        .topic-breadcrumb {},  color: #888,          font-size: 14px        }        .main-topic {},  background: white          border-radius: 16px,  padding: 30px          margin-bottom: 30px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08)        }        .post-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 20px        }        .author-info {},  display: flex          align-items: center,  gap: 15px          flex-wrap: wrap        }        .author-name {},          font-weight: 600,  color: #333}        .post-time {},  color: #888,          font-size: 14px        }        .pinned-badge {},  display: flex          align-items: center,  gap: 4px,  padding: 4px 8px,  background: #fef3c7,  color: #92400e,          border-radius: 12px          font-size: 12px          font-weight: 600        }        .post-menu {},  background: none,  border: none,  color: #666,  cursor: pointer,  padding: 8px          border-radius: 6px,  transition: background 0.3s        }        .post-menu:hover {},  background: #f0f0f0        }        .topic-title {},  margin: 0 0 20px 0,  color: #333,          font-size: 2em          line-height: 13        }        .topic-content-text {},  color: #666,          line-height: 17          font-size: 16px          margin-bottom: 25px        }        .topic-engagement {},          padding-top: 20px          border-top: 1px solid #e5e5e5        }        .engagement-stats {},  display: flex,  gap: 20px          margin-bottom: 15px          flex-wrap: wrap        }        .engagement-stats span {},  display: flex          align-items: center,  gap: 5px,  color: #666,          font-size: 14px        }        .engagement-actions {},  display: flex,  gap: 10px          flex-wrap: wrap        }        .vote-btn {},  display: flex          align-items: center,  gap: 5px,  padding: 8px 12px,  border: 1px solid #e5e5e5          border-radius: 8px,  background: white,  cursor: pointer,  transition: all 0.3s        }        .vote-btn.upvote:hover {},          border-color: #22c55e,  color: #22c55e,  background: #f0fdf4        }        .vote-btn.downvote:hover {},          border-color: #ef4444,  color: #ef4444,  background: #fef2f2        }        /* Replies Section */        .replies-section {},  background: white          border-radius: 16px,  padding: 30px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08)        }        .replies-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 25px        }        .replies-header h2 {},  margin: 0,  color: #333}        .replies-sort select {},  padding: 8px 12px,  border: 1px solid #e5e5e5          border-radius: 6px,  background: white        }        .reply-form {},          margin-bottom: 30px,  padding: 20px,  background: #f9f9f9          border-radius: 12px        }        .reply-form h3 {},  margin: 0 0 15px 0,  color: #333}        .reply-form textarea {},  width: 100,  padding: 12px,  border: 1px solid #e5e5e5          border-radius: 8px          font-size: 15px,  resize: vertical,          font-family: inherit          margin-bottom: 15px        }        .reply-options {},  display: flex          justify-content: spacebetween          align-items: center        }        .anonymous-toggle {},  display: flex          align-items: center,  gap: 8px,  color: #666}        .reply-btn {},  padding: 10px 20px,  background: #667eea,  color: white,  border: none          border-radius: 8px,  cursor: pointer,  transition: background 0.3s        }        .reply-btn:hover {},  background: #5a67d8        }        .replies-list {},  display: flex          flex-direction: column,  gap: 20px        }        .reply-card {},  border: 1px solid #e5e5e5          border-radius: 12px,  padding: 20px,  transition: all 0.3s        }        .reply-card:hover {},          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1)        }        .reply-card.accepted {},          border-color: #22c55e,  background: #f0fdf4        }        .accepted-answer-badge {},  display: flex          align-items: center,  gap: 5px,  padding: 5px 10px,  background: #22c55e,  color: white,          border-radius: 12px          font-size: 12px          font-weight: 600          margin-bottom: 15px,  width: fitcontent}        .reply-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 15px        }        .reply-author {},  display: flex          align-items: center,  gap: 10px          flex-wrap: wrap        }        .moderator-badge {},  display: flex          align-items: center,  gap: 4px,  padding: 2px 6px,  background: #667eea,  color: white,          border-radius: 8px          font-size: 11px          font-weight: 600        }        .reply-time {},  color: #888,          font-size: 13px        }        .edited-badge {},  display: flex          align-items: center,  gap: 3px,  color: #888,          font-size: 11px        }        .reply-menu {},  background: none,  border: none,  color: #666,  cursor: pointer,  padding: 5px          border-radius: 4px,  transition: background 0.3s        }        .reply-menu:hover {},  background: #f0f0f0        }        .reply-content {},  color: #666,          line-height: 16          margin-bottom: 15px        }        .reply-actions {},  display: flex          justify-content: spacebetween          align-items: center          padding-top: 15px          border-top: 1px solid #e5e5e5        }        .vote-actions {},  display: flex,  gap: 5px        }        .reply-engagement {},  display: flex,  gap: 10px        }        /* Create Topic Modal */        .create-topic-modal {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000        }        .modal-content {},  background: white          border-radius: 20px,  width: 90,          max-width: 800px          max-height: 90vh          overflow-y: auto        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 25px          border-bottom: 1px solid #e5e5e5        }        .modal-header h2 {},  margin: 0,  color: #333}        .close-btn {},  width: 40px,  height: 40px,          border-radius: 50,  border: none,  background: #f0f0f0,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: background 0.3s        }        .close-btn:hover {},  background: #e0e0e0        }        .topic-form {},  padding: 25px        }        .form-group {},          margin-bottom: 20px        }        .form-group label {},  display: block          margin-bottom: 8px          font-weight: 600,  color: #333}        .form-group input,        .form-group select,        .form-group textarea {},  width: 100,  padding: 12px,  border: 1px solid #e5e5e5          border-radius: 8px          font-size: 15px,  transition: bordercolor 0.3s        }        .form-group input:focus,        .form-group select:focus,        .form-group textarea:focus {},  outline: none          border-color: #667eea        }        .form-group textarea {},  resize: vertical,          font-family: inherit        }        .form-options {},  display: flex          justify-content: spacebetween          align-items: center          padding-top: 20px          border-top: 1px solid #e5e5e5        }        .form-actions {},  display: flex,  gap: 10px        }        .cancel-btn,        .submit-btn {},  padding: 12px 24px,  border: none          border-radius: 8px          font-size: 16px,  cursor: pointer,  transition: all 0.3s        }        .cancel-btn {},  background: #f0f0f0,  color: #666}        .cancel-btn:hover {},  background: #e0e0e0        }        .submit-btn {},  background: #667eea,  color: white}        .submit-btn:hover {},  background: #5a67d8        }        @media (max-width: 768px {}          .topics-controls {},            flex-direction: column            align-items: stretch          }          .search-bar {},            min-width: auto          }          .filters {},            justify-content: spacebetween          }          .categories-grid {},            grid-template-columns: 1fr          }          .topic-header {},            flex-direction: column,  gap: 15px          }          .topic-stats {},            align-self: stretch          }          .stat-group {},            justify-content: center          }        }      }</style>    </div>  )}";"