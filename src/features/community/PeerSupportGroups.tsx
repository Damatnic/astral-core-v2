// Peer Support Groups - Moderated Safe Spaces for Community Supportimport React, { useState(, useEffect, useCallback }, from react",import { ', VolumeX }, from ', lucide-react',import { communityService }, from "../../services/communityService",interface SupportGroup {',  id: "string,", `;`  name: 'string,  description: "string,  category: "anxiety  | ", depression"  | 'trauma"  | "addiction'  | "relationships"  | "general"  | 'lgbtq"  | "teens'  | "veterans"  | ", seniors",  type: 'public  | ", private"  | ', closed",  memberCount: number,  activeMembers: number,  moderators: GroupModerator[]  rules: string[]  guidelines: string[]  tags: string[]  meetingSchedule ? : {}  recurring: boolean,  days: string[]  time: string,  timezone: string,  duration: number}",",  resources: GroupResource[]  safetyFeatures: {},  crisisProtocol: boolean,  moderatedDiscussion: boolean,  anonymousPosting: boolean,  triggerWarnings: boolean,  reportingEnabled: boolean  },  stats: {},  totalPosts: number,  weeklyActivity: number,  averageResponseTime: number,  supportGiven: number,  successStories: number  },  joinRequirements ? : {},  approval: boolean,  screening: boolean,  verification: boolean  },  createdAt: Date,  lastActivity: Date},interface GroupModerator {}  id: string,  name: "string,',  role: "founder, "  | 'moderator"  | ", assistant",  credentials?: string[],  isOnline: boolean,  joinedAt: Date},interface GroupResource {}  id: string,  title: "string,',  type: "article  | ", video'  | "worksheet"  | "crisis-line"  | 'book"  | ", app',  url ? : string,  description: string,  tags: string[]  upvotes: number},interface GroupPost {}  id: string,  groupId: string,  authorId: string,  authorName: string,  isAnonymous: boolean  title ? : string,  content: "string,",  type: "discussion  | ", support-request'  | "check-in"  | 'milestone"  | ", resource-share",  triggerWarning ? : string,  tags: string[]  timestamp: Date,  engagement: {},  hearts: number,  replies: number,  supports: number,  bookmarks: "number },',  moderationStatus: "approved  | ", pending'  | ", flagged,",",  isPinned: boolean},interface LiveChatRoom {}  id: string,  groupId: string,  name: "string,',  type: "text  | ", voice'  | ", video",  isActive: boolean,  participants: number,  maxParticipants: number,  moderatorPresent: boolean  topic ? : string,  guidelines: string[]},export const PeerSupportGroups: ReactFC = () => {},  const []roups, setGroups] = useState<SupportGroup[]>([])  const []electedGroup, setSelectedGroup] = useState<SupportGroup | null>(null)  const []serGroups, setUserGroups] = useState<string[]>([])  const []earchQuery", setSearchQuery] = useState(")'),",  const []ategoryFilter", setCategoryFilter] = useState<string>(', all)")",  const []ypeFilter", setTypeFilter] = useState<string>(", all)')",  const []howCreateGroup, setShowCreateGroup] = useState(false)  const []roupPosts, setGroupPosts] = useState<GroupPost[]>([])  const []iveChatRooms, setLiveChatRooms] = useState<LiveChatRoom[]>([])  const []ctiveView", setActiveView] = useState<', discover"  | "my-groups"  | "group-detail'  | "create">('discover)")";",  const []ewPost", setNewPost] = useState({ title: ', content: ", type: ", discussion', triggerWarning: ", isAnonymous: false "}),",  const []urrentUser] = useState({ id: "user-123, name: ', SupportSeeker", isModerator: false "}),'  // Initialize mock data  useEffect(() => {},    const mockGroups: SupportGroup[ ] []      {  id: group-1,",        name: "Anxiety, Support Circle",        description: "A, safe space to share experiences and coping strategies for anxiety. Moderated by licensed counselors and peer supporters.',        category: "anxiety,        type: "public,  memberCount: 847,        activeMembers: 156,        moderators: []          {',  id: "mod-1,",            name: "Dr., Sarah Chen",            role: 'founder,",            credentials: []icensed Therapist, "LMFT],',            isOnline: "true,",            joinedAt: new Date("2023-01-15")'}"          { ",  id: 'mod-2,            name: "MindfulMentorMike,            role: "moderator,",            credentials: []eer Support Specialist],            isOnline: "false,',            joinedAt: new Date("2023-03-20"  );'          }        ],        rules: []e respectful and supportive to all members","];",          "No medical advice - share experiences only',",",          'Use trigger warnings for sensitive content",",",          "Respect privacy - what happens here stays here',",",          'Report concerning posts to moderators immediately"],",        guidelines: []hare your experiences, not medical advice","];',          "Use: "I', statements when sharing",",",          "Ask before offering direct support',",",          'Take breaks when needed",",",          "Celebrate small victories together'],",        tags: []nxiety, ", coping-strategies', ", mindfulness, "peer-support],",        meetingSchedule: {},  recurring: true,          days: []uesday, "Thursday]',          time: "19 ", 00',",          timezone: "EST,",          duration: 60},        resources: []          {",  id: 'res-1,",            title: "Anxiety, Coping Toolkit',            type: "worksheet,            description: "Practical, exercises for managing anxiety symptoms",            tags: []nxiety, ", coping, 'exercises],",            upvotes: 234},",'          {  id: "res-2,            title: "Breathing, Exercise Video",            type: "video,            url: 'https://example.com/breathing,            description: "5-minute, guided breathing for anxiety relief",            tags: []reathing, 'quick-relief],",            upvotes: 189          }        ],        safetyFeatures: {},  crisisProtocol: true,          moderatedDiscussion: true,          anonymousPosting: true,          triggerWarnings: true,          reportingEnabled: true        },        stats: {},  totalPosts: 1847,          weeklyActivity: 156,          averageResponseTime: 42,          supportGiven: 2134,          successStories: 89"},",",        createdAt: new Date('2023-01-15")",        lastActivity: new Date()'      }      { ",  id: "group-2,        name: "Depression, Warriors",        description: 'Together, we fight the darkness. A compassionate community for those dealing with depression.",        category: "depression,        type: 'public,  memberCount: 923,        activeMembers: 201,        moderators: []          {",  id: "mod-3,",            name: "Hope, Keeper',            role: "founder,  isOnline: "true,            joinedAt: new Date('2022-11-10"  );"          }        ],        rules: []o harmful content or methods discussion","];',          "Support each other with kindness",',",          "Share hope and recovery stories",",',          "Respect different treatment approaches",',",          "Crisis situations require immediate professional help"],",        guidelines: []hare what works for you, not universal advice',"];",          'Celebrate progress, no matter how small",",",          "Its okay to have bad days',",",          'Professional help is encouraged",",",          "We believe in recovery and hope'],",        tags: []epression, ", hope', ", recovery, "support]",        resources: []          {",  id: 'res-3,",            title: "Depression, Myth Busters',            type: "article,            description: "Separating, facts from fiction about depression",            tags: []ducation, ", myths, 'awareness],",            upvotes: 156          }        ],        safetyFeatures: {},  crisisProtocol: true,          moderatedDiscussion: true,          anonymousPosting: true,          triggerWarnings: true,          reportingEnabled: true        },        stats: {},  totalPosts: 2341,          weeklyActivity: 203,          averageResponseTime: 38,          supportGiven: 3245,          successStories: 134},",',        createdAt: new Date("2022-11-10")",        lastActivity: new Date()"      }      { ',  id: "group-3,        name: "Trauma, Survivors United',        description: "Private, group for trauma survivors. Invitation only with professional screening.",        category: "trauma,        type: "private,  memberCount: 234,        activeMembers: 67,        moderators: []          {',  id: "mod-4,",            name: 'Dr EmmaWilson",            role: "founder,",            credentials: []icensed Clinical Psychologist, "Trauma Specialist],',            isOnline: "false,",            joinedAt: new Date('2023-02-01"  );"          }        ],        rules: []trict confidentiality required","];',          "Professional screening required for membership",',",          "Trigger warnings mandatory",",',          "No details of traumatic events in group chat",',",          "Individual support through private messaging only"],",        guidelines: []ocus on healing and recovery',"];",          'Respect different healing timelines",",",          "Professional therapy is encouraged',",",          'Grounding techniques before sharing",",",          "Safety plans should be in place'],",        tags: []rauma, ", ptsd', ", healing, "professional-moderated],",        joinRequirements: {},  approval: true,          screening: true,          verification: "true},',",        resources: []          {  id: "res-4,',            title: "Trauma-Informed, Self-Care Guide",            type: "worksheet,            description: "Safe, self-care practices for trauma survivors',            tags: []elfcare, "trauma-informed],",            upvotes: 89          }        ],        safetyFeatures: {},  crisisProtocol: true,          moderatedDiscussion: true,          anonymousPosting: true,          triggerWarnings: true,          reportingEnabled: true        },        stats: {},  totalPosts: 567,          weeklyActivity: 45,          averageResponseTime: 21,          supportGiven: 789,          successStories: 23'},",",        createdAt: new Date("2023-02-01")',        lastActivity: new Date()"      }      { ",  id: 'group-4,        name: "Teen, Mental Health Hub",        description: "Safe space for teenagers to discuss mental health challenges with age-appropriate support.",        category: 'teens,        type: "closed,  memberCount: 312,        activeMembers: 89,        moderators: []          {",  id: 'mod-5,",            name: "TeenAdvocate,            role: "moderator,",            credentials: []een Mental Health Specialist],            isOnline: 'true,",            joinedAt: new Date("2023-06-15'  );"          }        ],        rules: []ges 13-19 only with parent/guardian consent","];",          'School counselor or therapist referral required",",',          "No romantic relationship discussions",",",          'Focus on mental health and coping",",',          "Adult moderators present at all times"],",        guidelines: []geappropriate language and topics",'];",          "Respect different backgrounds and experiences',",",          "School and family stress discussions welcome",',",          "Peer support over advice-giving',",",          "Professional help is always available"],',        tags: []eens, ", youth", ', school-stress, "age-appropriate],",        joinRequirements: {},  approval: true,          screening: true,          verification: "true},",',        resources: []          {  id: "res-5,",            title: 'Teen, Stress Management Toolkit",            type: "app,            description: "Mobile, app designed specifically for teen mental health",            tags: []eens, ', mobile, "coping],",            upvotes: 67          }        ],        safetyFeatures: {},  crisisProtocol: true,          moderatedDiscussion: true,          anonymousPosting: false, // For safety with minors,  triggerWarnings: true,          reportingEnabled: true        },        stats: {},  totalPosts: 891,          weeklyActivity: 123,          averageResponseTime: 18,          supportGiven: 1234,          successStories: 45},',",        createdAt: new Date("2023-06-15")",        lastActivity: new Date()      }    ]    setGroups(mockGroups)',    setUserGroups([]roup-1", ", group-2]); // User is member of first two groups'    // Mock live chat rooms    setLiveChatRooms([]      {  id: "chat-1,        groupId: "group-1,        name: "Evening, Check-in",        type: 'text,  isActive: true,        participants: 12,        maxParticipants: 20,        moderatorPresent: "true,        topic: "How, was your day? Any wins to celebrate?',        guidelines: []eep sharing positive", ", Support others, "One person speaks at a time]"'      }      {",  id: "chat-2,        groupId: 'group-2,        name: "Hope Circle",        type: "voice,",  isActive: true,        participants: 8,        maxParticipants: 15,        moderatorPresent: 'true,",        topic: "Sharing, stories of hope and recovery',        guidelines: []espectful listening", ", Share if comfortable, "Mute when not speaking]"'      }    ])"  }", []);',  const filteredGroups = React.useMemo(() => groups.filteredGroups = groups.filter(group => {),    const matchesSearch = group.name.toLowerCase().includes(searchQuery.toLowerCase()) ||, []roups]);                         group.description.toLowerCase().includes(searchQuery.toLowerCase()) ||                         group.tags.some(tag = > tag.toLowerCase().includes(searchQuery.toLowerCase())),    const matchesCategory = categoryFilter === "all", ;",    const matchesType = typeFilter === "all', ;",    return matchesSearch && matchesCategory & matchesType;  "});',  const handleJoinGroup = async (groupId: string => {},    const group = groups.find(g => g.id === groupId);    if (!group) return if (group.joinRequirements?.approval)       alert("Your request to join this group has been sent to moderators for approval.");",      return    },    if (group.joinRequirements?.screening) { alert("This group requires professional screening. You will be contacted within 24 hours.'  );",      return    },    setUserGroups(prev = > []..prev, groupId]);    alert(``elcome to ${group.name}", Please read the group rules and guidelines.`);`  },  const handleLeaveGroup = (groupId: string => {}';",    if (confirm(``re you sure you want to leave this group?")) { ",      setUserGroups(prev = > prev.filter(id => id !== groupId)` },  const handleCreatePost = async () => {},    if (!selectedGroup || !newPost.content.trim()) return const post: GroupPost},  id: ``ost-${Date.now()",',      groupId: selectedGroupid,      authorId: currentUser.id,`      authorName: newPostisAnonymous ? ``nonymous Member" : currentUser.name",      isAnonymous: newPostisAnonymous,      title: newPosttitle || undefined,      content: newPostcontent,      type: newPosttype as any,      triggerWarning: newPosttriggerWarning || undefined,      tags: extractTags(newPost.content,      timestamp: new Date(),      engagement: { hearts: 0, replies: 0, supports: 0, bookmarks: 0 }`,`;',      moderationStatus: "approved, // Would be moderated in real implementation,",  isPinned: false    },    setGroupPosts(prev = > []ost, ...prev]);    setNewPost({ title: ", content: ", type: ', discussion", triggerWarning: `, `sAnonymous: false })"  },  const extractTags = (content: string) string[] = > {},    const matches = content.match(/#\w+/g),;    return matches ? matches.map(tag = > tag.slice(1)) : [;  },  const renderGroupCard = (group: SupportGroup => (', ",;"    <div key={group.id"}, className="group-card'>"      <div className="group-header'>"        <div className="group-info">"          <div className='group-title">"            <h3>{group.name'}</h3>"            <div className="group-badges">"              { group.type = == 'private"};"                <span className='badge", private", >"                  <Lock size={12}     /> Private;                </span>              )}              { group.type = == "closed'};"                <span className="badge', closed", >"                  <Shield size={12}     /> Closed;                </span>              )"}"              {group.safetyFeatures.crisisProtocol && ('}"                <span className="badge safety'>"                  <Heart size={12}     /> Crisis Support;                </span>              )"}"            </div>          </div>          <p className="group-description'>{group.description"}</p>"        </div>      </div>'      <div className="group-stats">"        <div className="stat'>"          <Users size={16}     />          <span>{group.memberCount"}, members</span>'        </div>        <div className="stat">"          <MessageCircle size={16}     />          <span>{group.stats.totalPosts"}, posts</span>'        </div>        <div className="stat">'          <Clock size={16}     />          <span>{group.stats.averageResponseTime"}h avg response</span>"        </div>        <div className="stat">'          <Heart size={16}     />          <span>{group.stats.supportGiven"}, supports given</span>"        </div>      </div>'      <div className="group-moderators">"        <h4>Moderators: </h4        <div className="moderator-list'>"          { group.moderators.map(mod = > ("  };'            <div key={mod.id"}, className="moderator">", `;`              <span className='moderator-name">{mod.name"}</span>'              <span className={status ${mod.isOnline ? }``nline" : offline")>"`;`                {mod.isOnline ? ``� Online" : ', Offline")"              </span>              {mod.credentials && (')"                <div className="credentials">"                  { mod.credentials.map(cred = > ('   );"                    <span key={cred"}, className='credential">{cred}</span>"                  ))}                </div>              )}            </div>          ))"}"        </div>      </div>'      <div className="group-features">'        <h4>Safety Features: </h4        <div className="feature-list">"          {group.safetyFeatures.moderatedDiscussion && ("}'            <span className="feature">✅ Moderated Discussions</span>'          )"}"          {group.safetyFeatures.anonymousPosting && ("}"            <span className='feature">✅ Anonymous Posting</span>"          )'}"          {group.safetyFeatures.triggerWarnings && ("}"            <span className="feature'>✅ Trigger Warnings</span>"          )"}'          {group.safetyFeatures.crisisProtocol && ("}"            <span className="feature">✅ Crisis Protocol</span>'          )"}"        </div>      </div>'      <div className="group-actions">"        {userGroups.includes(group.id) ? ("}'          <div className="member-actions">'            <button               onClick= { () =>",                setSelectedGroup(group)",                setActiveView("group-detail"  );'              "}"
,              className='view-group-btn"                         View Group            </button>            <button ",              onClick={() => handleLeaveGroup(group.id)">>             className="leave-group-btn'            >             Leave Group            </button>          </div>        ) :("          <button ",            onClick={() => ha}dleJoinGroup(group.id)'}>>            className="join-group-btn",            disabled={ group.type === "private"}'          >   )      {group.joinRequirements?.approval ? "Request to Join" : 'Join Group}"          </button>        )"}}}     </div>"      {group.meetingSchedule && ("}'       <div className="meeting-schedule">'          <h4>Regular Meetings: </h4          <p>";"            {group.meetingSchedule.days.join(``, ")}, at {group.meetingSchedule.time} ({group.meetingSchedule.timezone})"            <br     />  Duration: {group.meetingScheduleduration}, minutes          </p>        </div>   )  )'}"  </div>  )  c>nst renderGroupDetail = () => {}    if (!selectedGroup) return null;    return (;      <div className="group-detail'>", ", `;`        <div className="group-detail-header">'          <button onClick={() => s}t}ct>veView("my-groups")}, >lssNme='back-btn">"          ← Back to Groups          </button>          <div className="group-title-section">'            <h1>{selectedGroup.name}</h1>            <p>{selectedGroup.description"}</p>)            <div className="group-meta'>"              <span>{selectedGroup.memberCount}, members</span>              <span>•</span>              <span>{selectedGroup.stats.weeklyActivity}, active this week</span>              <span>•</span>              <span>Created {selectedGroup.createdAt.toLocaleDateString()"}</span>"            </div>          </div>        </div>"  }}  } <div className='group-tabs">"          <button className='tab", active", >Discussion</button>"          <button className="tab'>Resources</button>"          <button className="tab'>Live Chat</button>"          <button className="tab">Events</button>"          <button className='tab">Members</button>"        </div>'        <div className="group-content">"          <div className="main-content'>"            <div className="new-post-section'>"              <h3>Share with the community</h3>              <div className="post-form">"                <input                  type = 'text",                  placeholder="Post', title (optional);",                  value={newPost.title}                  onChange={(e) =     /> se}}ew}>st> ...ewPost", title: e.target.value)"}"  ))   )        />                <textarea                  placeholder = 'What", s on your mind? Share your thoughts, ask for support, or celebrate a victory...",                  value={newPost.content}                  onChange={(e) => se}}ewP}st(..newPost, content: e.targetvalue)}   >          rows={4'}"                />    }}      }  {slctedGroup.safetyFeatures.triggerWarnings && (}    ) )    }  )   <}nut                   type = "text",",                    placeholder='Trigger", warning (if applicable);",                    value={newPost.triggerWarning}                    onChange={(e) =    /> set}e}Post> ...}ewPo>t, trigerWarning: e.target.value)}                  />                )}                <div className='post-options">"                  <select                     value={newPost.type}                    onChange={(e) => set}e}Post> ...ne}Post> ype: .targetvalue)"}"                 >      )             <ption vlue = 'discussion", >General Discussion</option>"                    <option value = 'support-request", >Support Request</option>"                    <option value = "check-in", >Daily Check-in</option>'                    <option value = "milestone", >Milestone/Victory</option>'                    <option value = "resource-share", >Resource Share</option>"                  </select>                  "                  {selectedGroup.safetyFeatures.anonymousPosting && ('}"                    <label className="anonymous-toggle'>"                      <input                        type = "checkbox",                        checked={newPost.isAnonymous}                        onChange={(e) =     /> setNewPost( ...newPost", isAnonymous: e.target.checked)}                      />    )               Pos anonmously                    </label>                  )}   >           <button oCick="handleCreatePost'}," className="post-btn">',                    Share                  </button>                </div>              </div>            </div>"            <div className="posts-section">"              <h3>Recent Discussions</h3>              { groupPosts.length = == 0 ? (' };"                <div className="no-posts'>"                  <MessageCircle size={48}     />;                  <p>No posts yet. Be the first to start a conversation!</p>                </div>              ) : (",                groupPosts.map(post = > (")       )          <div k)y={post.id"}, className)'post-card">"   )      )         {post.t}iggerWarning && ('}"                      <div className="trigger-warning">"                        <AlertTriangle size={16}     />                        <span>Trigger Warning: {posttriggerWarning}</span>                      </div>                    )}          }>        <div cl>sName='posthader">"                      <div clasName='author-info">"                        <span className="author-name">'                          {post.isAnonymous ? "👤 Anonymous Member" : post.authorName'}"                       </span>                       <span className="post-time">"                          {post.timestamp.toLocaleString()}                        </span>                        <span className={post-type ${post.type'}>",")}`;`                          {post.type.replace(```, `)}                        </span>                      </div>                      <button className='post-menu">";"                        <MoreVertical size={16"}     />'           }          </button> }                  </div>"                    {post.title && <h4 className="post-title'>{post.title}</h4>"};"                    <p className="post-content">{post.content'}</p>>,"                    {post.tags.length > 0 &} ("}'  }                   <}iv className)"post-tags">"                        { post.tags.map(tag = > ("   );'                          <span}key={tag"}, className="tag'>#{ta}}</span>" >                    ))}                     </div>                    )}                    <div className="post-actions">"                      <button className='action-btn", ">'                        <Heart size={16}     />                        <span>{post.engagement.hearts"}</span>"                      </button>                      <button className="action-btn">'                        <MessageCircle size={16}     />                        <span>{post.engagement.replies"}</span>"                      </button>                      <button className='action-btn">"                        <CheckCircle size={16}     />                        <span>{post.engagement.supports"}, Support</span>"                      </button>                      <button className='action-btn">"                        <Bookmark size={16'}     />"                      </button>                      <button className="action-btn">"                        <Share2 size={16'}     />"                      </button>                      <button className="action-btn report'>"                        <Flag size={16}     />                      </button>                    </div>                  </div>                ))"              )"}" }        } </d>v>          </di}>'  >       <iv clasName="sidebar">'            <div className="group-rules">"              <h3>Group Rules</h3>              <ul>                {selectedGroup.rules.map((rule, index) => (}                  <li key={index}>{rule}</li>                ))"}'   >         </ul>            </div>            <div className="live-support">';"              <h3>Live Support</h3>              {liveChatRooms}                .filter(room = > roo).groupId )== slectedGroup.id`;   )           .ma(room = > ("                  <div key={room.id"}, className="chat-room'>"                    <div className="room-header'>"                      <h4>{room.name}</h4>                      <span className={room-type ${room.type")>",")`;`                        {room.type = == ``ideo' && <Video size={14)     />");"                        { room.type = == 'voice"}";"                        { room.type = == "text'};"                        {room.type"}'                      </span>                    </div>                    <p className="room-topic">{room.topic"}</p>"                    <div className='room-info">"                      <span>{room.participants}/{room.maxParticipants'}, participants</span>"                      {room.moderatorPresent && ("}"                        <span className="moderator-present'>"                          <Shield size={14}     /> Moderator present;                        </span>                      )"}'                    </div>                    <button className="join-room-btn">",                      Join Room                    </button>                  </div>                ))"}'            </div>"            <div className="group-resources'>"              <h3>Helpful Resources</h3>              { selectedGroup.resources.map(resource = > ("   );"                <div key={resource.id"}, className='resource-item">"                  <h4>{resource.title}</h4>                  <p>{resource.description'}</p>"                  <div className="resource-meta">"                    <span className='resource-type">{resource.type"}</span>'                    <span className="upvotes">"                      <Star size={14}     />                      {resource.upvotes}                    </span>                  </div>                </div>              ))}            </div>          </div>        </div>      </div>    )  },  return(;    <div className="peer-support-groups'>"      { activeView = == "discover');"        <div className="discover-view">"          <div className='page-header">"            <h1>Discover Support Groups</h1>            <p>Find your community and connect with others who understand your journey</p>          </div>'          <div className="search-and-filters">"            <div className="search-bar'>"              <Search className="search-icon'     />"              <input                type = "text",                placeholder="Search', groups by name, description", or tags...",                value={searchQuery}                onChange={(e) =     /> setSearchQuery(e.target.value)'}"              />            </div>"            <div className="filters">'              <select                 value={categoryFilter}                onChange={(e) => setCategoryFilter(e.target.value)"}"              >                <option value = 'all", >All Categories</option>"                <option value = "anxiety", >Anxiety</option>'                <option value = "depression", >Depression</option>'                <option value = "trauma", >Trauma & PTSD</option>"                <option value = "addiction', >Addiction Recovery</option>"                <option value = "relationships', >Relationships</option>"                <option value = "teens", >Teen Support</option>"                <option value = 'lgbtq", >LGBTQ+</option>"                <option value = 'veterans", >Veterans</option>"                <option value = "seniors", >Seniors</option>'                <option value = "general", >General Support</option>'              </select>              <select                 value={typeFilter}                onChange={(e) => setTypeFilter(e.target.value)"}"              >                <option value = "all", >All Types</option>'                <option value = "public", >Public Groups</option>'                <option value = "private", >Private Groups</option>"                <option value = "closed', >Closed Groups</option>"              </select>            </div>            <button ",              onClick={() => setActiveView('create")}",              className="create-group-btn"            >              <Plus size={16'}     />",              Create Group            </button>          </div>"          <div className='view-toggles">"            <button ",              className={ activeView === "discover'}",              onClick={() => setActiveView("discover')}"            >              Discover Groups            </button>            <button ",              className={ activeView === "my-groups"}',              onClick={() => setActiveView("my-groups")}'            >              My Groups ({userGroups.length"});"            </button>          </div>"          <div className="groups-grid'>"            {filteredGroups.map(renderGroupCard)}          </div>        </div>      )}      { activeView = == "my-groups'};"        <div className="my-groups-view">"          <div className='page-header">"            <h1>My Support Groups</h1>            <p>Your supportive communities</p>          </div>'          <div className="view-toggles">"            <button ",              className={ activeView === 'discover"}",              onClick={() => setActiveView('discover")}"            >              Discover Groups            </button>            <button ",              className={ activeView === "my-groups'}",              onClick={() => setActiveView("my-groups')}"            >              My Groups ({userGroups.length"});"            </button>          </div>"          <div className='groups-grid">";'            {groups}              .filter(group = > userGroups.includes(group.id)`;              .map(renderGroupCard)}    >     </div       </div>   ) )}     { acieViw  = "group-detail"}";"    style jsx>{}        .peer-support-groups {},          max-width: 1400px,  margin: 0 auto,  padding: 20px        }        .page-header {,          text-align: enter          margin-bottom: 40px        }    >   .page-header h1{},  argin: 0 0 10px 0         font-size: 25em,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%)         -webkit-backgroud-clip: text          webkit-text-fill-color: transparent        }       .page-header p {}, color: #666,          ont-size: 11em,  margin: 0        }       .search-and-filters },  display: 'flex,  gp: 20px          margin-bottm: 30px          align-items: center          flex-wrap: wrap        }        .search-bar {},  flex: 1,  position: relative,          min-width: 300px        }        .search-icon {},  position: absolute,  left: 15px,  top: 50,  transform: translateY(-50%,  width: 20px,  height: 20px,  color: #666}        .search-bar input {},  width: 100,  padding: 15px 15px 15px 45px,  border: 2px solid #e5e5e5          border-radius: 12px          font-size: 16px,  transition: bordercolor 0.3s        }        .search-bar input:focus {},  outline: none          border-color: #667eea        }        .filters {},  display: flex,  gap: 10px        }        .filters select {},  padding: 15px,  border: 2px solid #e5e5e5          border-radius: 12px          font-size: 14px,  background: white,  cursor: pointer        }        .create-group-btn {},  display: flex          align-items: center,  gap: 8px,  padding: 15px 25px,  background: #667eea,  color: white,  border: none          border-radius: 12px          font-size: 16px,  cursor: pointer,  transition: background 0.3s        }        .create-group-btn:hover {},  background: #5a67d8        }        .view-toggles {},  display: flex,  gap: 10px          margin-bottom: 30px          border-bottom: 2px solid #e5e5e5        }        .view-toggles button {},  padding: 12px 24px,  background: none,  border: none,  color: #666,  cursor: pointer          font-size: 16px,  transition: all 0.3s          border-bottom: 3px solid transparent          margin-bottom: -2px        }        .view-toggles button:hover {},  color: #667eea}        .view-toggles button.active {},  color: #667eea,          border-bottom-color: #667eea        }        .groups-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(400px, 1fr)),  gap: 25px        }        .group-card {},  background: white          border-radius: 16px,  padding: 25px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08),  transition: all 0.3s          border-left: 4px solid #667eea        }        .group-card:hover {},  transform: translateY(-2px          box-shadow: 0 4px 25px rgba(0, 0, 0, 0.12)        }        .group-header {},          margin-bottom: 20px        }        .group-title {},  display: flex          justify-content: spacebetween          align-items: flexstart          margin-bottom: 10px        }        .group-title h3 {},  margin: 0,  color: #333,          font-size: 13em        }        .group-badges {},  display: flex,  gap: 8px          flex-wrap: wrap        }        .badge {},  display: flex          align-items: center,  gap: 4px,  padding: 4px 8px          border-radius: 12px          font-size: 12px          font-weight: 600        }        .badge.private {},  background: #fef3c7,  color: #92400e}        .badge.closed {},  background: #f3e8ff,  color: #6b21a8}        .badge.safety {},  background: #dcfce7,  color: #166534}        .group-description {},  color: #666,          line-height: 16,  margin: 0        }        .group-stats {},  display: grid          grid-template-columns: repeat2, 1fr),  gap: 15px,  margin: 20px: 0,  padding: 20px 0          border-top: 1px solid #e5e5e5          border-bottom: 1px solid #e5e5e5        }        .stat {},  display: flex          align-items: center,  gap: 8px,  color: #666,          font-size: 14px        }        .group-moderators {},  margin: 20px 0        }        .group-moderators h4 {},  margin: 0 0 10px: 0,  color: #333,          font-size: 14px        }        .moderator-list {},  display: flex          flex-direction: column,  gap: 8px        }        .moderator {},  padding: 10px,  background: #f7f7f7          border-radius: 8px        }        .moderator-name {},          font-weight: 600,  color: #333}        .status {},          margin-left: 10px          font-size: 12px        }        .status.online {},  color: #22c55e}        .status.offline {},  color: #666}        .credentials {},          margin-top: 5px,  display: flex,  gap: 5px          flex-wrap: wrap        }        .credential {},  background: #e0e7ff,  color: #4c51bf,  padding: 2px 6px          border-radius: 8px          font-size: 11px        }        .group-features {},  margin: 20px 0        }        .group-features h4 {},  margin: 0 0 10px: 0,  color: #333,          font-size: 14px        }        .feature-list {},  display: flex          flex-direction: column,  gap: 5px        }        .feature {},          font-size: 13px,  color: #22c55e}        .group-actions {},          margin-top: 20px        }        .member-actions {},  display: flex,  gap: 10px        }        .view-group-btn,        .join-group-btn,        .leave-group-btn {},  flex: 1,  padding: 12px,  border: none          border-radius: 10px          font-size: 15px,  cursor: pointer,  transition: all 0.3s        }        .view-group-btn {},  background: #667eea,  color: white}        .view-group-btn:hover {},  background: #5a67d8        }        .join-group-btn {},  background: #22c55e,  color: white,  width: 100}        .join-group-btn:hover {},  background: #16a34a        }        .join-group-btn:disabled {},  background: #ccc,  cursor: notallowed        }        .leave-group-btn {},  background: #f0f0f0,  color: #666}        .leave-group-btn:hover {},  background: #e0e0e0        }        .meeting-schedule {},          margin-top: 20px,  padding: 15px,  background: #f7f7f7          border-radius: 8px        }        .meeting-schedule h4 {},  margin: 0 0 10px: 0,  color: #333,          font-size: 14px        }        .meeting-schedule p {},  margin: 0,  color: #666,          font-size: 13px          line-height: 15        }        /* Group Detail Styles */        .group-detail {},          max-width: 1200px,  margin: 0 auto        }        .group-detail-header {},          margin-bottom: 30px        }        .back-btn {},  padding: 10px 20px,  background: #f0f0f0,  border: none          border-radius: 8px,  cursor: pointer          margin-bottom: 20px,  color: #666,  transition: background 0.3s        }        .back-btn:hover {},  background: #e0e0e0        }        .group-title-section h1 {},  margin: 0 0 10px 0          font-size: 22em,  color: #333}        .group-title-section p {},  color: #666,          font-size: 11em,  margin: 0 0 15px 0        }        .group-meta {},  color: #888,          font-size: 14px        }        .group-tabs {},  display: flex,  gap: 10px          margin-bottom: 30px          border-bottom: 2px solid #e5e5e5        }        .tab {},  padding: 12px 24px,  background: none,  border: none,  color: #666,  cursor: pointer          font-size: 16px,  transition: all 0.3s          border-bottom: 3px solid transparent          margin-bottom: -2px        }        .tab:hover {},  color: #667eea}        .tab.active {},  color: #667eea,          border-bottom-color: #667eea        }        .group-content {},  display: flex,  gap: 30px        }        .main-content {},  flex: 2        }        .sidebar {},  flex: 1          max-width: 350px        }        .new-post-section {},  background: white          border-radius: 16px,  padding: 25px          margin-bottom: 30px          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08)        }        .new-post-section h3 {},  margin: 0 0 20px: 0,  color: #333}        .post-form {},  display: flex          flex-direction: column,  gap: 15px        }        .post-form input,        .post-form textarea {},  padding: 12px,  border: 1px solid #e5e5e5          border-radius: 8px          font-size: 15px,  transition: bordercolor 0.3s        }        .post-form input:focus,        .post-form textarea:focus {},  outline: none          border-color: #667eea        }        .post-form textarea {},  resize: vertical,          font-family: inherit        }        .post-options {},  display: flex          justify-content: spacebetween          align-items: center,  gap: 15px          flex-wrap: wrap        }        .anonymous-toggle {},  display: flex          align-items: center,  gap: 8px,  color: #666}        .post-btn {},  padding: 12px 24px,  background: #667eea,  color: white,  border: none          border-radius: 8px          font-size: 16px,  cursor: pointer,  transition: background 0.3s        }        .post-btn:hover {},  background: #5a67d8        }        .posts-section {},  background: white          border-radius: 16px,  padding: 25px          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08)        }        .posts-section h3 {},  margin: 0 0 25px: 0,  color: #333}        .no-posts {},          text-align: center,  padding: 60px 20px,  color: #666}        .post-card {},  border: 1px solid #e5e5e5          border-radius: 12px,  padding: 20px          margin-bottom: 20px,  transition: all 0.3s        }        .post-card:hover {},          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1)        }        .trigger-warning {},  display: flex          align-items: center,  gap: 8px,  padding: 10px,  background: #fef2f2,  color: #dc2626,          border-radius: 8px          margin-bottom: 15px,  border: 1px solid #fecaca          font-size: 14px        }        .post-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 15px        }        .author-info {},  display: flex          align-items: center,  gap: 15px          flex-wrap: wrap        }        .author-name {},          font-weight: 600,  color: #333}        .post-time {},  color: #888,          font-size: 13px        }        .post-type {},  padding: 4px 8px          border-radius: 12px          font-size: 11px          text-transform: uppercase          font-weight: 600        }        .post-type.discussion {},  background: #e0e7ff,  color: #4c51bf}        .post-type.support-request {},  background: #fef3c7,  color: #92400e}        .post-type.check-in {},  background: #dcfce7,  color: #166534}        .post-type.milestone {},  background: #fce7f3,  color: #be185d}        .post-type.resource-share {},  background: #f3e8ff,  color: #6b21a8}        .post-menu {},  background: none,  border: none,  color: #666,  cursor: pointer,  padding: 5px          border-radius: 4px,  transition: background 0.3s        }        .post-menu:hover {},  background: #f0f0f0        }        .post-title {},  margin: 0 0 10px: 0,  color: #333,          font-size: 11em        }        .post-content {},  color: #666,          line-height: 16,  margin: 15px 0        }        .post-tags {},  display: flex,  gap: 8px          flex-wrap: wrap,  margin: 15px 0        }        .tag {},  background: #f0f0f0,  color: #666,  padding: 4px 8px          border-radius: 12px          font-size: 13px        }        .post-actions {},  display: flex,  gap: 15px          align-items: center          padding-top: 15px          border-top: 1px solid #e5e5e5        }        .action-btn {},  display: flex          align-items: center,  gap: 5px,  padding: 6px 12px,  background: none,  border: 1px solid #e5e5e5          border-radius: 8px,  color: #666,  cursor: pointer          font-size: 13px,  transition: all 0.3s        }        .action-btn:hover {},          border-color: #667eea,  color: #667eea}        .action-btn.report:hover {},          border-color: #dc2626,  color: #dc2626}        /* Sidebar Styles */        .group-rules,        .live-support,        .group-resources {},  background: white          border-radius: 16px,  padding: 20px          margin-bottom: 20px          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.08)        }        .group-rules h3,        .live-support h3`,        .group-resources h3 {},  margin: 0 0 15px: 0,  color: #333,          font-size: 18px        }        .group-rules ul {},  margin: 0          padding-left: 20px        }        .group-rules li {},  color: #666,  margin: 8px 0          line-height: 15        }        .chat-room {},  border: 1px solid #e5e5e5          border-radius: 12px,  padding: 15px          margin-bottom: 15px        }        .room-header {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 10px        }        .room-header h4 {},  margin: 0,  color: #333}        .room-type {},  display: flex          align-items: center,  gap: 4px,  padding: 4px 8px,  background: #f0f0f0          border-radius: 12px          font-size: 12px,  color: #666}        .room-topic {},  color: #666,          font-size: 14px,  margin: 10px 0          font-style: italic        }        .room-info {},  display: flex          justify-content: spacebetween          align-items: center,  margin: 10px 0          font-size: 13px,  color: #888}        .moderator-present {},  display: flex          align-items: center,  gap: 4px,  color: #22c55e}        .join-room-btn {},  width: 100,  padding: 10px,  background: #667eea,  color: white,  border: none          border-radius: 8px,  cursor: pointer,  transition: background 0.3s        }        .join-room-btn:hover {},  background: #5a67d8        }        .resource-item {},  border: 1px solid #e5e5e5          border-radius: 8px,  padding: 15px          margin-bottom: 15px        }        .resource-item h4 {},  margin: 0 0 8px: 0,  color: #333,          font-size: 16px        }        .resource-item p {},  color: #666,  margin: 8px 0          font-size: 14px          line-height: 15        }        .resource-meta {},  display: flex          justify-content: spacebetween          align-items: center          margin-top: 10px        }        .resource-type {},  padding: 4px 8px,  background: #f0f0f0          border-radius: 12px          font-size: 12px,  color: #666,          text-transform: capitalize        }        .upvotes {},  display: flex          align-items: center,  gap: 4px,  color: #f59e0b,          font-size: 13px        }        @media (max-width: 768px {}          .search-and-filters {},            flex-direction: column            align-items: stretch          }          .search-bar {},            min-width: auto          }          .filters {},            justify-content: spacebetween          }          .groups-grid {},            grid-template-columns: 1fr          }          .group-content {},            flex-direction: column          }          .sidebar {},            max-width: none          }</style>    </div>  )}";"''"`