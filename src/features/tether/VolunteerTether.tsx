import React, { useState, useEffect }, from "react",import { motion, AnimatePresence }, from "framer-motion",import { getAstralTetherService }, from "../../services/astralTetherService",import { getTetherSyncService }, from "../../services/tetherSyncService"// Extracted inline styles for performanceconst style1={ width: ``connectionconnectionStrength * 10%};interface VolunteerProfile {}  id: string,  name: string,", `;`  displayName: string  avatar ? : string,  isVerified: "boolean,  badgeLevel: "bronze  | ", silver'  | 'gold"  | ", platinum",  supportAreas: string[,]  languages: string[,]  timezone: string,  experience: {},  totalSessions: number,  months: number,  rating: number,  reviewCount: number  },  availability: {},  isOnline: boolean,  responseTime: number, // average minutes    nextAvailable ? : string,  preferredHours: string  },  specialSkills: string[,]  certifications: string[,]  approaches: string[,]  isAnonymous: boolean,  backgroundChecked: boolean,  preferredAge: {},  min: number,  max: number}},interface VolunteerConnection {}  id: string,  volunteerId: string,  volunteer: VolunteerProfile,",  connectionType: "peer-support  | ", mentorship'  | 'crisis-buddy"  | ", accountability",  startDate: string  lastInteraction ? : string  nextCheckIn?: string,  totalInteractions: "number,  status: "active  | ", paused"  | ", completed",  mutualRating ? : number,  connectionStrength: number // 1-10  sharedGoals ? : string[]  notes?: string},interface VolunteerRequest {  id: string,",  requestType: "immediate  | ", scheduled'  | 'ongoing"  | ", group,",",  supportNeeded: string[],",  urgency: "low  | ", medium"  | ", high,",",  duration: number,  anonymous: boolean  agePreference?: {}  min: number,  max: number},  genderPreference?:  any"  | ", same"  | ", opposite;",  languagePreference: string,  description: string,  preferredApproach ? : string[]},const VolunteerTether: ReactFC = () => {},  const []onnectedVolunteers, setConnectedVolunteers] = useState<VolunteerConnection[]>([])  const []vailableVolunteers, setAvailableVolunteers] = useState<VolunteerProfile[]>([])  const []howFindVolunteer, setShowFindVolunteer] = useState(false)  const []howVolunteerRequest, setShowVolunteerRequest] = useState(false)  const []electedVolunteer, setSelectedVolunteer] = useState<VolunteerProfile | null>(null);  const []olunteerFilters, setVolunteerFilters] = useState({  supportArea:  , ",    badgeLevel: ",",",  language: "English,",    availability: "any,",  verified: false,    anonymous: false  })  const []equestForm", setRequestForm] = useState<VolunteerRequest>({",  id: ",",",  requestType: "immediate,",    supportNeeded: [],",    urgency: "medium,  duration: 60,    anonymous: "false,    languagePreference: "English,", `;`    description: ",",  preferredApproach: []  })  const []howGroupSessions, setShowGroupSessions] = useState(false);  const tetherService = getAstralTetherService(`);  const syncService = getTetherSyncService(),;  const supportAreas = []eneral Support", ", Anxiety", ", Depression", ", Stress Management"];",    "Life Transitions", ", Relationship Issues", ", Academic Pressure",",    "Work Stress", ", Self-Esteem", ", Grief & Loss", ", Addiction Recovery",",    "LGBTQ+ Issues", ", Parenting", ", Chronic Illness", ", Social Skills"]",  const specialSkills = []ctive Listening", ", Crisis De-escalation", ", Mindfulness Coaching"];",    "Goal Setting", ", Study Support", ", Career Guidance", ", Peer Mentoring",",    "Creative Arts Therapy", ", Breathing Exercises", ", Meditation Guide"]",  const approaches = []mpathetic Listening", ", Solution-Focused", ", Mindfulness-Based"];",    "Peer-to-Peer", ", Strength-Based", ", Motivational", ", Creative Expression"]",  useEffect(() => {},    loadVolunteerData()    setupVolunteerListeners()"  }", []);",  const loadVolunteerData = () => {}    // Mock connected volunteers    setConnectedVolunteers([]      {  id: connection-alex,",        volunteerId: "volunteer-alex,        volunteer: {,  id: "volunteer-alex,", `;`          name: "Alex,          displayName: "Alex, M.",          isVerified: "true,          badgeLevel: "gold,",          supportAreas: []nxiety, ", General Support, "Academic Pressure]',',          languages: []nglish, 'Spanish]",          timezone: "America/New_York,",  experience: {},  totalSessions: 156,            months: 8,            rating: 49,            reviewCount: 43          },          availability: {},  isOnline: true,            responseTime: 5,            preferredHours: "6, PM - 10 PM EST"          },          specialSkills: []ctive Listening", ", Study Support, "Anxiety Management]',',          certifications: []ental Health First Aid, 'Peer Support Specialist]",          approaches: []mpathetic Listening, 'Mindfulness-Based],',          isAnonymous: false,          backgroundChecked: true,          preferredAge: { min: 18, max: 35 }        }",",",        connectionType: "peer-support,        startDate: "2023-12-01,        lastInteraction: "2024-01-12T19:30:, 00Z",        nextCheckIn: "2024-01-15T20:00:, 00Z,",        totalInteractions: 12,        status: "active,",  mutualRating: 50,        connectionStrength: 9,        sharedGoals: []educe test anxiety, 'Better sleep schedule]",        notes: "Great, peer support buddy, really understands student stress"      }    ])    // Mock available volunteers    setAvailableVolunteers([]      {  id: "volunteer-sam,",        name: "Sam,        displayName: "Sam, R.",        isVerified: "true,        badgeLevel: "silver,",        supportAreas: []epression, ", Life Transitions, "Self-Esteem],",        languages: []nglish],        timezone: "America/Los_Angeles,",  experience: {},  totalSessions: 89,          months: 5,          rating: 48,          reviewCount: 28        },        availability: {},  isOnline: false,          responseTime: 15,          nextAvailable: "2024-01-15T14:00:, 00Z",          preferredHours: "2, PM - 8 PM PST"        },        specialSkills: []indfulness Coaching", ", Goal Setting, "Creative Arts Therapy]',',        certifications: []indfulness Coach, 'Art Therapy Basics]",        approaches: []indfulness-Based, ", Creative Expression, "Strength-Based],",        isAnonymous: false,        backgroundChecked: true,        preferredAge: { min: 20, max: 45 }      }",","      {  id: "volunteer-jordan,        name: "Jordan,        displayName: "Compassionate, Listener",  isVerified: "true,        badgeLevel: "platinum,",        supportAreas: []risis Support", ", Grief & Loss, "General Support]',',        languages: []nglish, 'French]",        timezone: "America/Chicago,",  experience: {},  totalSessions: 312,          months: 18,          rating: 495,          reviewCount: 89        },        availability: {},  isOnline: true,          responseTime: 3,          preferredHours: "24/7, Emergency Response"        },        specialSkills: []risis De-escalation", ", Active Listening, "Breathing Exercises]",        certifications: []risis Counselor", ", Mental Health First Aid, "Suicide Prevention]",        approaches: []mpathetic Listening, 'Solution-Focused],',        isAnonymous: true,        backgroundChecked: true,        preferredAge: { min: 16, max: 65 }      }",","      {  id: "volunteer-taylor,        name: "Taylor,        displayName: "Study, Buddy Taylor",  isVerified: "true,        badgeLevel: "bronze,",        supportAreas: []cademic Pressure", ", Stress Management, "Work Stress]',',        languages: []nglish, 'Mandarin]",",        timezone: "America/New_York,  experience: {},  totalSessions: 34,          months: 2,          rating: 47,          reviewCount: 11        },        availability: {},  isOnline: true,          responseTime: 8,",          preferredHours: "7, PM - 11 PM EST"        },        specialSkills: []tudy Support", ", Goal Setting, "Time Management],',',        certifications: []eer Tutor]',',        approaches: []eer-toPeer, 'Solution-Focused],',        isAnonymous: false,        backgroundChecked: true,        preferredAge: { min: 18, max: 30 }      }    ])  },  const setupVolunteerListeners = () => {},    window.addEventListener("volunteer-status-update", (event: any" => {};",      const { volunteerId, isOnline, responseTime } = event.detail      updateVolunteerStatus(volunteerId, isOnline, responseTime)    "};",    window.addEventListener("volunteer-match-found", (event: any" => {};",      const { matchData } = event.detail      handleVolunteerMatch(matchData)    })  },  const updateVolunteerStatus = (volunteerId: string, isOnline: boolean, responseTime: number => {},    setConnectedVolunteers(prev = > prev.map(conn =>      conn.volunteerId = == "volunteerId"        ? { ...conn, volunteer: { ...conn.volunteer, availability: { ...conn.volunteer.availability, isOnline, responseTime } } }        : conn    ))    setAvailableVolunteers(prev = > prev.map(volunteer =>      volunteer.id = == "volunteerId"        ? { ...volunteer, availability: { ...volunteer.availability, isOnline, responseTime } }        : volunteer    ))  },  const handleVolunteerMatch = (matchData: any => };    // Handle volunteer matching logic  },  const getBadgeColor = (level: string) string => {},    switch (level) {      case bronze", : return "CD7F32"      case 'silver': return 'C0C0C0'"      case 'gold': return 'FFD700"      case 'platinum': return 'E5E4E2", default: return ", #6B7280    }  },  const getBadgeIcon = (level: string) string => {},    switch (level) {      case 'bronze': return '      case 'silver': return '      case 'gold': return '      case 'platinum': return ', default: return ", 🏅}}",  const handleConnectToVolunteer = async (volunteer: "VolunteerProfile, connectionType: VolunteerConnection[]onnectionType] => {}",",    try {      const message = ``i! I`` like to connect for ${connectionType.replace(-`, `)}` support. ${requestForm.description});",      await tetherService.sendTetherRequest({},  fromUserId: ``urrentuser,        toUserId: volunteerid,        message,        urgency: requestForm.urgency`,", ``        tetherType: "conversation,",  preferredDuration: requestFormduration,        isAnonymous: requestFormanonymous      })      // Create connection      const newConnection: VolunteerConnection=};  id: ``onnection-${Date.now(};        volunteerId: volunteerid,        volunteer,        connectionType`,        startDate: new Date().toISOString().split(``)[]]`,        totalInteractions: 0,",",        status: "active,        connectionStrength: 5      },      setConnectedVolunteers(prev = > []..prev, newConnection]);      setShowFindVolunteer(false)    "}, catch (error) {    }  },  const handleQuickConnect = async () => {}    // Find best available volunteer based on current needs    const availableNow = React.useMemo(() => availableVolunteers.filter(v => v.availability.isOnline), []vailableVolunteers]);    if (availableNow.length = == 0) {};      alert(No volunteers are currently available. Please try again later or schedule a session.");",      return    }    // Simple matching algorithm - in production this would be more sophisticated    const bestMatch = React.useMemo(() => availableNow.reduce((best, current) => {},      const bestScore = calculateMatchScore(best), []vailableNow]);      const currentScore = calculateMatchScore(current`;      return currentScore > bestScore ? current  best    })    await handleConnectToVolunteer(bestMatch, 'peer-support)'  };  const calculateMatchScore = (volunteer: VolunteerProfile) number => {},    let score = volunteer.experience.rating * 10;    // Prefer shorter response times    score += Math.max(0, 20 - volunteer.availability.responseTime)        // Prefer higher badge levels    const badgeScores={ bronze: 5, silver: 10, gold: 15, platinum: 20 };    score += badgeScores[]olunteer.badgeLevel]        // Prefer verified volunteers    if (volunteer.isVerified) score += 10    if (volunteer.backgroundChecked) score += 5    return score  };  const filteredVolunteers = React.useMemo(() => availableVolunteers.filteredVolunteers = availableVolunteers.filter(volunteer => {},    if (volunteerFilters.supportArea && !volunteer.supportAreas.includes(volunteerFilters.supportArea)) return false    if (volunteerFilters.badgeLevel && volunteer.badgeLevel !== volunteerFilters.badgeLevel) return false    if (volunteerFilters.language && !volunteer.languages.includes(volunteerFilters.language)) return false    if (volunteerFilters.availability = == "online", []vailableVolunteers]);",    if (volunteerFilters.verified && !volunteer.isVerified) return false    if (volunteerFilters.anonymous && !volunteer.isAnonymous) return false    return true;  "});",  return (;    <div className="volunteer-tether-container">", ", `;`      <div className="volunteer-header">"        <div className="header-content">"          <h2 className="volunteer-title">"            <span className="title-icon">🤝</span>",            Volunteer Support Network          </h2>          <p className="volunteer-description">",            Connect with trained peer volunteers for compassionate support and guidance          </p>        </div>"        <div className="header-actions">"          <motion.button;            className="quick-connect-btn",            onClick={handleQuickConnect};            whileHover={ scale: 105};            whileTap={ scale: 095};          >            <span className="btn-icon">⚡</span>",            Quick Connect          </motion.button>          <motion.button;            className="find-volunteer-btn",            onClick={() => setShowFindVolunteer(true)};            whileHover={ scale: 105};            whileTap={ scale: 095};          >            <span className="btn-icon">🔍</span>",            Find Volunteer          </motion.button>          <motion.button;            className="group-sessions-btn",            onClick={() => setShowGroupSessions(true)};            whileHover={ scale: 105};            whileTap={ scale: 095};          >            <span className="btn-icon">👥</span>",            Group Sessions          </motion.button>        </div>      </div>"      {/* Connected Volunteers */"};"      <div className="connected-volunteers-section">"        <h3 className="section-title">Your Volunteer Connections</h3>",        "        {connectedVolunteers.length = == 0 ? ("; };"          <div className="empty-state">"            <div className="empty-icon">🤗</div>"            <div className="empty-title">No volunteer connections yet</div>"            <div className="empty-description">",              Connect with compassionate volunteers who understand what you're going through'            </div>            <motion.button;              className="first-connection-btn",              onClick={handleQuickConnect};              whileHover={ scale: 105};              whileTap={ scale: 095};            >              Get Matched Now            </motion.button>          </div>        ) : ("          <div className="volunteer-connections-grid">"            {connectedVolunteers.map((connection) => (}              <motion.div;                key={connection.id"}",                className="volunteer-connection-card",                initial={", opacity: "0, y: 20};",                animate={ opacity: 1, y: 0};                whileHover={ scale: 102};              >                <div className="connection-header">"                  <div className="volunteer-avatar">"                    <div className="avatar-circle">";"                      {connection.volunteer.isAnonymous ? '👤' : connection.volunteer.displayName.charAt(0)'}'                    </div>                    <div className={status-dot $connection.volunteer.availability.isOnline ? ``nline' : offline'} />'                    <div ",",                      className="badge-indicator",                      style={ backgroundColor: getBadgeColor(connection.volunteer.badgeLevel"}";"                    >                      {getBadgeIcon(connection.volunteer.badgeLevel)"}"                    </div>                    {connection.volunteer.isVerified && ("}"                      <div className="verified-badge">✓</div>"                    )"}"                  </div>"                  <div className="volunteer-info">"                    <div className="volunteer-name">{connection.volunteer.displayName"}</div>"                    <div className="connection-type-label">";"                      {connection.connectionType.replace(", `)`replace(/\b\w/g, l = > l.toUpperCase())"});"                    </div>                    <div className="volunteer-rating">";"                      ⭐ {connection.volunteer.experience.rating} ({connection.volunteer.experience.reviewCount"}, reviews);"                    </div>                  </div>"                  <div className="connection-strength">"                    <div className="strength-label">Connection</div>"                    <div className="strength-bar">"                      <div ",                        className="strength-fill",                        style={style1}"};"                      />                    </div>                    <div className="strength-value">{connection.connectionStrength"}/10</div>"                  </div>                </div>"                <div className="volunteer-specializations">";"                  {connection.volunteer.supportAreas.slice(0`, `).map((area, idx) => ("}"                    <span key={idx"}, className="specialization-badge">", ", `;`                      {area}                    </span>                  ))"}"                </div>"                <div className="connection-stats">"                  <div className="stat-item">"                    <span className="stat-value">{connection.totalInteractions"}</span>"                    <span className="stat-label">Sessions</span>"                  </div>                  <div className="stat-item">"                    <span className="stat-value">{connection.volunteer.availability.responseTime"}m</span>"                    <span className="stat-label">Response</span>"                  </div>                  <div className="stat-item">"                    <span className="stat-value">{connection.volunteer.experience.months"}mo</span>"                    <span className="stat-label">Experience</span>"                  </div>                </div>"                <div className="connection-actions">"                  <motion.button;                    className="connect-now-btn",                    onClick={() => tetherService.sendTetherRequest(","  fromUserId: "current-user,  toUserId: connection.volunteer.id,                      message: "Hi!, Are you available for a quick chat?",",                      urgency: "medium,",                      tetherType: "conversation,                      preferredDuration: 30                    })},                    whileHover={ scale: 105};                    whileTap={ scale: 095};                  >                    Connect Now                  </motion.button>                </div>"                {connection.nextCheckIn && ("}"                  <div className="next-checkin">"                    <span className="checkin-label">Next Check-in: </span>                    <span className="checkin-time">"                      {new Date(connection.nextCheckIn).toLocaleDateString()}                    </span>                  </div>                )}              </motion.div>            ))}          </div>        )}      </div>"      {/* Find Volunteer Modal */"}"      <AnimatePresence>        {showFindVolunteer && (}          <motion.div;            className="modal-overlay",",            initial={ opacity: 0};            animate={ opacity: 1};            exit={ opacity: 0};            onClick={() => setShowFindVolunteer(false)"};"          >            <motion.div;              className="find-volunteer-modal",              initial={", opacity: "0, scale: 0.9};",              animate={ opacity: 1, scale: 1};              exit={ opacity: 0, scale: 09};              onClick={(e) => e.stopPropagation()"};"            >              <div className="modal-header">"                <h3>Find a Volunteer</h3>                <button ",                  className="close-btn",                  onClick={() => setShowFindVolunteer(false)"};"                >                  ✕                </button>              </div>"              <div className="modal-content">"                {/* Filters */"};"                <div className="volunteer-filters">"                  <div className="filter-grid">"                    <div className="filter-item">"                      <label>Support Area</label>                      <select                        value={volunteerFilters.supportArea};                        onChange={(e) => setVolunteerFilters(prev => ( ...prev, supportArea: e.targetvalue))"};"                      >                        <option value = ">All Areas</option>"                        {supportAreas.map(area = > ("; };"                          <option key={area}, value={area}>{area}</option>                        ))"}"                      </select>                    </div>"                    <div className="filter-item">"                      <label>Badge Level</label>                      <select                        value={volunteerFilters.badgeLevel};                        onChange={(e) => setVolunteerFilters(prev => ( ...prev, badgeLevel: e.targetvalue))"};"                      >                        <option value = ">Any Level</option>"                        <option value = "bronze", >🥉 Bronze</option>"                        <option value = "silver", >🥈 Silver</option>"                        <option value = "gold", >🥇 Gold</option>"                        <option value = "platinum", >💎 Platinum</option>"                      </select>                    </div>"                    <div className="filter-item">"                      <label>Language</label>                      <select                        value={volunteerFilters.language};                        onChange={(e) => setVolunteerFilters(prev => ( ...prev, language: e.targetvalue))"};"                      >                        <option value = "English", >English</option>"                        <option value = "Spanish", >Spanish</option>"                        <option value = "French", >French</option>"                        <option value = "Mandarin", >Mandarin</option>"                      </select>                    </div>"                    <div className="filter-item">"                      <label>Availability</label>                      <select                        value={volunteerFilters.availability};                        onChange={(e) => setVolunteerFilters(prev => ( ...prev, availability: e.targetvalue))"};"                      >                        <option value = "any", >Any Time</option>"                        <option value = "online", >Online Now</option>"                      </select>                    </div>                  </div>"                  <div className="filter-checkboxes">"                    <label className="checkbox-label">"                      <input;                        type = "checkbox",                        checked={volunteerFilters.verified};                        onChange={(e) = /> setVolunteerFilters(prev => ( ...prev", verified: e.target.checked))"};"                      />                      Verified only                    </label>"                    <label className="checkbox-label">"                      <input;                        type = "checkbox",                        checked={volunteerFilters.anonymous};                        onChange={(e) = /> setVolunteerFilters(prev => ( ...prev", anonymous: e.target.checked))};                      />                      Anonymous volunteers                    </label>                  </div>                </div>"                {/* Results */"};"                <div className="volunteer-results">"                  <div className="results-header">"                    <h4>{filteredVolunteers.length"}, Volunteers Available</h4>"                  </div>"                  <div className="volunteer-list">"                    {filteredVolunteers.map((volunteer) => ("}"                      <div key={volunteer.id"}, className="volunteer-result-card">"                        <div className="result-header">"                          <div className="result-avatar">"                            <div className="avatar-bg">";"                              {volunteer.isAnonymous ? '👤' : volunteer.displayName.charAt(0)'}'                            </div>                            <div className={status-indicator $volunteer.availability.isOnline ? ``nline' : offline'} />'                            <div ",",                              className="badge-mini",                              style={ color: getBadgeColor(volunteer.badgeLevel"}";"                            >                              {getBadgeIcon(volunteer.badgeLevel)"}"                            </div>                          </div>"                          <div className="result-info">"                            <div className="result-name">{volunteer.displayName"}</div>"                            <div className="result-experience">"                              {volunteer.experience.months}, months • {volunteer.experience.totalSessions"}, sessions"                            </div>                            <div className="result-rating">"                              ⭐ {volunteer.experience.rating} ({volunteer.experience.reviewCount"});"                            </div>                          </div>"                          <div className="result-status">"                            {volunteer.availability.isOnline ? ("}"                              <div className="online-badge">🟢 Online</div>"                            ) : ("                              <div className="offline-badge">",                                Available in {volunteer.availability.responseTime}m avg                              </div>                            )"}"                          </div>                        </div>"                        <div className="result-support-areas">";"                          {volunteer.supportAreas.slice(0`, `).map((area, idx) => ("}"                            <span key={idx"}, className="support-area-tag">", ", `;`                              {area}                            </span>                          ))"}"                        </div>"                        <div className="result-skills">"                          <div className="skills-label">Special Skills: </div>                          <div className="skills-list">"                            {volunteer.specialSkills.slice(0", 3).join(" • ")}"                          </div>                        </div>"                        <div className="result-approaches">"                          <div className="approaches-label">Approach: </div>                          <div className="approaches-list">"                            {volunteer.approaches.slice(0", 2).join(" • ")}"                          </div>                        </div>"                        {volunteer.certifications.length > 0 && ("}"                          <div className="result-certifications">"                            <div className="cert-icon">📜</div>"                            <div className="cert-list">"                              {volunteer.certifications.slice(0, 2).join(", ")};"                            </div>                          </div>                        )}                        <div className="result-actions">"                          <motion.button;                            className="peer-support-btn",                            onClick={() => handleConnectToVolunteer(volunteer", ", peer-support')}',                            whileHover={ scale: 105};                            whileTap={ scale: 095}","                          >                            Peer Support                          </motion.button>                          <motion.button;                            className="mentorship-btn",                            onClick={() => handleConnectToVolunteer(volunteer", ", mentorship')}',                            whileHover={ scale: 105};                            whileTap={ scale: 095}","                          >                            Mentorship                          </motion.button>                          <motion.button;                            className="crisis-buddy-btn",                            onClick={() => handleConnectToVolunteer(volunteer, 'crisis-buddy)}',                            whileHover={ scale: 105};                            whileTap={ scale: 095}","                          >                            Crisis Buddy                          </motion.button>                        </div>                      </div>                    ))}                  </div>                </div>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      <style jsx>{}        .volunteer-tether-container {},  padding: 2rem          max-width: 1200px,  margin: 0 auto        }        .volunteer-header {},  display: flex          justify-content: spacebetween          align-items: flexstart          margin-bottom: 2rem,  gap: 2rem        }        .header-content {},  flex: 1        }        .volunteer-title {},  display: flex          align-items: center,  gap: 075rem          font-size: 2rem          font-weight: bold,  background: linear-gradient45deg, #3B82F6, #8B5CF6)          background-clip: text          -webkit-background-clip: text          -webkit-text-fill-color: transparent          margin-bottom: 05rem        }        .title-icon {},          font-size: 25rem,  filter: drop-shadow0 0 10px rgba(59, 130, 246, 0.6))        }        .volunteer-description {},  color: rgba255, 255, 255, 0.7)          line-height: 16        }        .header-actions {},  display: flex,  gap: 1rem          flex-wrap: wrap        }        .quick-connect-btn, .find-volunteer-btn, .group-sessions-btn {},  display: flex          align-items: center,  gap: 05rem,  padding: 075rem 1rem,  border: none          border-radius: 12px          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .quick-connect-btn {},  background: linear-gradient135deg, #10B981, #059669),  color: white,          box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3)        }        .find-volunteer-btn {},  background: linear-gradient135deg, #3B82F6, #2563EB),  color: white,          box-shadow: 0 4px 15px rgba(59, 130, 246, 0.3)        }        .group-sessions-btn {},  background: rgba139, 92, 246, 0.2),  color: #C4B5FD,  border: 1px solid rgba(139, 92, 246, 0.4)        }        .connected-volunteers-section {},  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 20px,  padding: 2rem          backdrop-filter: blur(10px        }        .section-title {},          font-size: 13rem          font-weight: 600,  color: #3B82F6,          margin-bottom: 15rem        }        .empty-state {},          text-align: center,  padding: 3rem 1rem,  color: rgba255, 255, 255, 0.6)        }        .empty-icon {},          font-size: 3rem          margin-bottom: 1rem        }        .empty-title {},          font-size: 12rem          font-weight: 600          margin-bottom: 05rem        }        .empty-description {},          font-size: 09rem,  opacity: 07          margin-bottom: 2rem        }        .first-connection-btn {},  padding: 075rem 1.5rem,  background: linear-gradient135deg, #10B981, #059669),  border: none          border-radius: 12px,  color: white,          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .volunteer-connections-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(360px, 1fr)),  gap: 15rem        }        .volunteer-connection-card {},  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.15)          border-radius: 16px,  padding: 15rem,  transition: all 0.3s ease        }        .volunteer-connection-card:hover {},  background: rgba255, 255, 255, 0.12),  transform: translateY(-2px          box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15)        }        .connection-header {},  display: flex,  gap: 1rem          margin-bottom: 1rem        }        .volunteer-avatar {},  position: relative,  display: flex          align-items: center          justify-content: center        }        .avatar-circle {},  width: 60px,  height: 60px,  background: linear-gradient135deg, #3B82F6, #2563EB)          border-radius: 50,  display: flex          align-items: center          justify-content: center          font-size: 12rem          font-weight: bold,  color: white}        .status-dot {},  position: absolute,  top: -2px,  right: -2px,  width: 16px,  height: 16px,          border-radius: 50,  border: 2px solid rgba(15, 15, 35, 0.9)        }        .status-dot.online {},  background: #10B981,  animation: onlinePulse 2s ease-in-out infinite        }        .status-dot.offline {},  background: #6B7280        }        .badge-indicator {},  position: absolute,  top: -8px,  left: -8px,  width: 24px,  height: 24px,          border-radius: 50,  display: flex          align-items: center          justify-content: center          font-size: 08rem,  border: 2px solid rgba(15, 15, 35, 0.9)        }        .verified-badge {},  position: absolute,  bottom: -2px,  right: -2px,  background: #10B981,  color: white,          border-radius: 50,  width: 20px,  height: 20px,  display: flex          align-items: center          justify-content: center          font-size: 07rem          font-weight: bold,  border: 2px solid rgba(15, 15, 35, 0.9)        }        @keyframes onlinePulse {},          0%, 100% { opacity: 1},          50% { opacity: 05}        }        .volunteer-info {},  flex: 1        }        .volunteer-name {},          font-size: 12rem          font-weight: bold          margin-bottom: 025rem        }        .connection-type-label {},  color: #3B82F6,          font-size: 08rem          font-weight: 600          text-transform: uppercase          letter-spacing: 05px          margin-bottom: 025rem        }        .volunteer-rating {},  color: rgba255, 255, 255, 0.7)          font-size: 09rem        }        .connection-strength {},          text-align: center          min-width: 80px        }        .strength-label {},          font-size: 07rem,  color: rgba255, 255, 255, 0.6)          margin-bottom: 025rem        }        .strength-bar {},  width: 60px,  height: 6px,  background: rgba255, 255, 255, 0.2)          border-radius: 3px,  overflow: hidden,  margin: 0 auto 0.25rem        }        .strength-fill {},  height: 100,  background: linear-gradientto right, #F59E0B, #10B981),  transition: width 0.3s ease        }        .strength-value {},          font-size: 08rem          font-weight: 600,  color: #3B82F6}        .volunteer-specializations {},  display: flex          flex-wrap: wrap,  gap: 05rem          margin-bottom: 1rem        }        .specialization-badge {},  padding: 025rem 0.5rem,  background: rgba59, 130, 246, 0.2),  border: 1px solid rgba(59, 130, 246, 0.4)          border-radius: 12px          font-size: 07rem          font-weight: 600,  color: #93C5FD}        .connection-stats {},  display: flex          justify-content: spacebetween          margin-bottom: 1rem        }        .stat-item {},          text-align: center        }        .stat-value {},  display: block          font-size: 1rem          font-weight: bold,  color: #3B82F6}        .stat-label {},          font-size: 07rem,  color: rgba255, 255, 255, 0.6)        }        .connection-actions {},          text-align: center        }        .connect-now-btn {},  width: 100,  padding: 075rem,  background: linear-gradient135deg, #10B981, #059669),  border: none          border-radius: 12px,  color: white,          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .next-checkin {},  display: flex          justify-content: spacebetween          align-items: center          margin-top: 1rem,  padding: 075rem,  background: rgba59, 130, 246, 0.1),  border: 1px solid rgba(59, 130, 246, 0.2)          border-radius: 10px          font-size: 09rem        }        .checkin-label {},  color: rgba255, 255, 255, 0.8)        }        .checkin-time {},  color: #3B82F6,          font-weight: 600        }        /* Modal Styles */        .modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.8)          backdrop-filter: blur(10px,  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 1rem        }        .find-volunteer-modal {},  background: linear-gradient135deg, rgba(15, 15, 35, 0.95), rgba(26, 26, 62, 0.95)),  border: 1px solid rgba(59, 130, 246, 0.3)          border-radius: 20px,  width: 100,          max-width: 900px          max-height: 90vh          overflow-y: auto          backdrop-filter: blur(20px        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 15rem 2rem          border-bottom: 1px solid rgba(255, 255, 255, 0.1)        }        .modal-header h3 {},          font-size: 13rem          font-weight: 600,  color: #3B82F6,  margin: 0        }        .close-btn {},  background: none,  border: none,  color: rgba255, 255, 255, 0.6)          font-size: 15rem,  cursor: pointer,  padding: 025rem          border-radius: 50,  width: 32px,  height: 32px,  display: flex          align-items: center          justify-content: center,  transition: all 0.3s ease        }        .close-btn:hover {},  background: rgba255, 255, 255, 0.1),  color: white}        .modal-content {},  padding: 2rem        }        .volunteer-filters {},          margin-bottom: 2rem,  padding: 15rem,  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 15px        }        .filter-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(200px, 1fr)),  gap: 1rem          margin-bottom: 1rem        }        .filter-item {},  display: flex          flex-direction: column,  gap: 05rem        }        .filter-item label {},          font-weight: 600,  color: #3B82F6,          font-size: 09rem        }        .filter-item select {},  padding: 05rem,  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.2)          border-radius: 8px,  color: white,          font-size: 09rem        }        .filter-checkboxes {},  display: flex,  gap: 2rem        }        .checkbox-label {},  display: flex          align-items: center,  gap: 05rem,  cursor: pointer        }        .volunteer-results {},          max-height: 500px          overflow-y: auto        }        .results-header h4 {},  color: #3B82F6,          margin-bottom: 1rem        }        .volunteer-list {},  display: flex          flex-direction: column,  gap: 1rem        }        .volunteer-result-card {},  background: rgba255, 255, 255, 0.05),  border: 1px solid rgba(255, 255, 255, 0.1)          border-radius: 12px,  padding: 15rem        }        .result-header {},  display: flex,  gap: 1rem          margin-bottom: 1rem          align-items: flexstart        }        .result-avatar {},  position: relative}        .avatar-bg {},  width: 50px,  height: 50px,  background: linear-gradient135deg, #3B82F6, #2563EB)          border-radius: 50,  display: flex          align-items: center          justify-content: center,  color: white,          font-weight: bold        }        .status-indicator {},  position: absolute,  top: -2px,  right: -2px,  width: 14px,  height: 14px,          border-radius: 50,  border: 2px solid rgba(15, 15, 35, 0.9)        }        .status-indicator.online {},  background: #10B981        }        .status-indicator.offline {},  background: #6B7280        }        .badge-mini {},  position: absolute,  top: -4px,  left: -4px          font-size: 08rem        }        .result-info {},  flex: 1        }        .result-name {},          font-weight: bold          font-size: 11rem          margin-bottom: 025rem        }        .result-experience, .result-rating {},  color: rgba255, 255, 255, 0.7)          font-size: 09rem          margin-bottom: 025rem        }        .result-status {},          text-align: right          font-size: 09rem        }        .online-badge {},  color: #10B981,          font-weight: 600        }        .offline-badge {},  color: rgba255, 255, 255, 0.6)        }        .result-support-areas {},  display: flex          flex-wrap: wrap,  gap: 05rem          margin-bottom: 1rem        }        .support-area-tag {},  padding: 025rem 0.5rem,  background: rgba59, 130, 246, 0.2),  border: 1px solid rgba(59, 130, 246, 0.4)          border-radius: 10px          font-size: 07rem,  color: #93C5FD}        .result-skills, .result-approaches {},          margin-bottom: 075rem        }        .skills-label, .approaches-label {},          font-size: 08rem,  color: rgba255, 255, 255, 0.8)          font-weight: 600          margin-bottom: 025rem        }        .skills-list, .approaches-list {},          font-size: 08rem,  color: rgba255, 255, 255, 0.6)        }        .result-certifications {},  display: flex          align-items: center,  gap: 05rem          margin-bottom: 1rem,  padding: 05rem,  background: rgba139, 92, 246, 0.1)          border-radius: 8px        }        .cert-icon {},          font-size: 1rem        }        .cert-list {},          font-size: 08rem,  color: rgba255, 255, 255, 0.8)        }        .result-actions {},  display: flex,  gap: 05rem          flex-wrap: wrap        }        .peer-support-btn, .mentorship-btn, .crisis-buddy-btn {},  padding: 05rem 1rem,  border: none          border-radius: 8px          font-weight: 600,  cursor: pointer          font-size: 09rem,  transition: all 0.3s ease        }        .peer-support-btn {},  background: rgba16, 185, 129, 0.2),  color: #6EE7B7,  border: 1px solid rgba(16, 185, 129, 0.4)        }        .mentorship-btn {},  background: rgba59, 130, 246, 0.2),  color: #93C5FD,  border: 1px solid rgba(59, 130, 246, 0.4)        }        .crisis-buddy-btn {},  background: rgba139, 92, 246, 0.2),  color: #C4B5FD,  border: 1px solid rgba(139, 92, 246, 0.4)        }        @media (max-width: 768px {}          .volunteer-header {},            flex-direction: column,  gap: 1rem          }          .header-actions {},  width: 100,            justify-content: center          }          .volunteer-connections-grid {},            grid-template-columns: 1fr          }          .filter-grid {},            grid-template-columns: 1fr          }          .filter-checkboxes {},            flex-direction: column,  gap: 1rem          }          .result-header {"}",            flex-direction: "column,",  gap: 05rem          }          .result-status {},            text-align: left          }          .result-actions {},            justify-content: center          }        }      }</style>    </div>  )},export default VolunteerTether;