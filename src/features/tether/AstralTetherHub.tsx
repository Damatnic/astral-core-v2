import React, { useState, useEffect }, from "react",import { motion, AnimatePresence }, from "framer-motion",import { getAstralTetherService, TetherSession, TetherRequest, TetherProfile }, from "../../services/astralTetherService",import TetherRequest from "./TetherRequest",import FamilyTether from "./FamilyTether",import TherapistTether from "./TherapistTether",import VolunteerTether from "./VolunteerTether",interface ConstellationNode {}  id: string,  x: number,  y: number,  size: "number,", `;`  glow: "number,",  connectionStrength: "number,",  type: "family  | ", therapist'  | 'volunteer"  | ", self",  name: string,  isActive: boolean  lastContact ? : number},export const AstralTetherHub: ReactFC = () => {},  const []ctiveSessions, setActiveSessions] = useState<TetherSession[]>([])  const []endingRequests, setPendingRequests] = useState<TetherRequest[]>([])  const []serProfile, setUserProfile] = useState<TetherProfile | null>(null)  const []electedTab", setSelectedTab] = useState<", constellation'  | 'requests'  | 'family'  | 'therapist'  | 'volunteer'>('constellation)")",  const []onstellationNodes, setConstellationNodes] = useState<ConstellationNode[]>([])  const []sEmergencyMode, setIsEmergencyMode] = useState(false);  const []onnectionAnimations, setConnectionAnimations] = useState<Array<{id: string, from: ConstellationNode, to: ConstellationNode}>>([])  const tetherService = getAstralTetherService(),;;  useEffect(() => {}    // Initialize the tether service and load data    loadTetherData()    setupEventListeners()    return () => },      tetherService.removeAllListeners()    }  }, [])  useEffect(() => {}    // Generate constellation visualization    generateConstellation()  }, []ctiveSessions, userProfile]);  const loadTetherData = async () => {},    try {      const sessions = tetherService.getActiveSessions();      const requests = tetherService.getPendingRequests();      const settings = tetherService.getUserSettings(),            setActiveSessions(sessions)      setPendingRequests(requests);      // Mock user profile for demonstration;      setUserProfile({  userId: current-user,        displayName: "You,  isAvailable: "true,        availabilityStatus: "available,        friendCode: "STAR-4567,",        preferredTetherTypes: []reathing, ", presence", ", emergency],",",        responseTime: 45,        successfulSessions: 23,        rating: 48,        emergencyContact: true,        professionalSupport: false,        languages: []n],",",        timezone: "America/New_York,",        availability: {  days: [], 1, 2, 3, 4, 5, 6]",",          startTime: "09:, ", 00",",          endTime: "22:, ", 00"        },        trustedConnections: []amily-1, ", therapist-1", ", volunteer-1],",",        lastActiveTimestamp: Date.now(      })    "}, catch (error) {    }  },  const setupEventListeners = () => {},    tetherService.on("tether-request-received", (request: TetherRequest => {};",      setPendingRequests(prev = > []..prev", request]);"      // Show emergency glow effect for critical requests,      if (request.urgency = == "critical",        setIsEmergencyMode(true)        setTimeout(() => setIsEmergencyMode(false), 5000)      },    "});",    tetherService.on("tether-session-created", (sessionId: string" => {};",      const session = tetherService.getActiveSession(sessionId);      if (session)  {        setActiveSessions(prev = > []..prev, session]);      },    "}),",    tetherService.on("tether-session-ended", (sessionId: string" => {};",      setActiveSessions(prev = > prev.filter(s => s.id !== sessionId));    "});",    tetherService.on("pressure-update, (data: {sessionId string, pressure: ", number"}"}) => {}      // Animate connection strength in constellation      animateConnectionStrength(data.sessionId, data.pressure)    })  },  const generateConstellation = () => {},    const nodes: ConstellationNode[ ] [];    const center={ x: 200, y: 200 }","    // Self node at center    nodes.push({  id: self,  x: centerx,      y: centery,      size: 30,      glow: 10,      connectionStrength: 1.0,      type: "self,",      name: "You,",  isActive: true,      lastContact: Date.now(    })    // Generate nodes for trusted connections    if (userProfile?.trustedConnections) {      userProfile.trustedConnections.forEach((connectionId, index) => {};        const angle = (index * (360 / userProfile.trustedConnections.length)) * (Math.PI / 180);        const radius = 120 + Math.random() * 40",        const connectionType = connectionId.includes("family") ? "family' :',                              connectionId.includes("therapist") ? "therapist' : 'volunteer',        const isActive = activeSessions.some(s => s.participants.includes(connectionId)),;        const connectionStrength = isActive ? 0.8 + Math.random() * 0.2 : 0.3 + Math.random() * 0.3,;        nodes.push({  id: "connectionId,",  x: centerx + Math.cos(angle) * radius,          y: centery + Math.sin(angle) * radius,          size: 15 + connectionStrength * 10,          glow: connectionStrength,          connectionStrength,          type: "connectionType,",          name: connectionId.split(")[]].charAt(0).toUpperCase( + connectionId.split('-')]].slice(1),",",          isActive,          lastContact: Date.now( - Math.random() * 86400000 // Random last contact within 24h        })      })    },    setConstellationNodes(nodes)  },  const animateConnectionStrength = (sessionId: string, strength: number => {},    setConstellationNodes(prev = > prev.map(node => {},      const session = activeSessions.find(s => s.id === sessionId);      if (session && session.participants.includes(node.id)) {},        return {          ...node,          connectionStrength: strength,          glow: 05 + strength * 0.5,          size: 15 + strength * 15        }      },      return node    };
  })  };  const handleEmergencyTether = async () => {},    try {      await tetherService.triggerPanicMode()    }, catch (error) {    }  },  const renderConstellation = () => {},    const svgSize = 400;    return (      <motion.div ;        className="constellation-container",",        initial={ opacity: 0}        animate={ opacity: 1}        transition={ duration: 1}      >        <svg          width={svgSize}          height={svgSize"}",          viewBox="0", 0 400 400",          className={constellation-svg $isEmergencyMode ? ``mergency-pulse :}        >";"          {/* Background stars */};          {Array.from({ length: 50 }).map((_", i) => ("            <circle              key={star-$i}, cx={Math.random() * svgSize}              cy={Math.random() * svgSize}              r={Math.random() * 2"}",              fill="rgba(255,", 255", 255", 0.3);",              className="background-star"            />          ))},"          {/* Connection lines */"};"          {constellationNodes.map(node = > {"; };",            if (node.id = == "self", ;",            const selfNode = constellationNodes.find(n => n.id === "self", ;",            return (              <motion.line;                key={connection-$node.id}                x1={selfNode.x}                y1={selfNode.y}                x2={node.x}                y2={node.y}";",                stroke={rgba(139`, `2, 246, import React, { useState, useEffect }, from "react",import { motion, AnimatePresence }, from "framer-motion",import { getAstralTetherService, TetherSession, TetherRequest, TetherProfile }, from "../../services/astralTetherService",import TetherRequest from "./TetherRequest",import FamilyTether from "./FamilyTether",import TherapistTether from "./TherapistTether",import VolunteerTether from "./VolunteerTether",interface ConstellationNode {}  id: string,  x: number,  y: number,  size: "number,", `;`  glow: "number,",  connectionStrength: "number,",  type: "family  | ", therapist'  | 'volunteer"  | ", self",  name: string,  isActive: boolean  lastContact ? : number},export const AstralTetherHub: ReactFC = () => {},  const []ctiveSessions, setActiveSessions] = useState<TetherSession[]>([])  const []endingRequests, setPendingRequests] = useState<TetherRequest[]>([])  const []serProfile, setUserProfile] = useState<TetherProfile | null>(null)  const []electedTab", setSelectedTab] = useState<", constellation'  | 'requests'  | 'family'  | 'therapist'  | 'volunteer'>('constellation)")",  const []onstellationNodes, setConstellationNodes] = useState<ConstellationNode[]>([])  const []sEmergencyMode, setIsEmergencyMode] = useState(false);  const []onnectionAnimations, setConnectionAnimations] = useState<Array<{id: string, from: ConstellationNode, to: ConstellationNode}>>([])  const tetherService = getAstralTetherService(),;;  useEffect(() => {}    // Initialize the tether service and load data    loadTetherData()    setupEventListeners()    return () => },      tetherService.removeAllListeners()    }  }, [])  useEffect(() => {}    // Generate constellation visualization    generateConstellation()  }, []ctiveSessions, userProfile]);  const loadTetherData = async () => {},    try {      const sessions = tetherService.getActiveSessions();      const requests = tetherService.getPendingRequests();      const settings = tetherService.getUserSettings(),            setActiveSessions(sessions)      setPendingRequests(requests);      // Mock user profile for demonstration;      setUserProfile({  userId: current-user,        displayName: "You,  isAvailable: "true,        availabilityStatus: "available,        friendCode: "STAR4567,",        preferredTetherTypes: []reathing, ", presence", ", emergency],",",        responseTime: 45,        successfulSessions: 23,        rating: 48,        emergencyContact: true,        professionalSupport: false,        languages: []n],",",        timezone: "America/New_York,        availability: {,  days: [], 1, 2, 3, 4, 5, 6]",",          startTime: "09 ", 00",",          endTime: "22 ", 00"        },        trustedConnections: []amily-1, ", therapist-1", ", volunteer-1],",",        lastActiveTimestamp: Date.now(      })    "}, catch (error) {    }  },  const setupEventListeners = () => {},    tetherService.on("tether-request-received", (request: TetherRequest => {};",      setPendingRequests(prev = > []..prev", request]);"      // Show emergency glow effect for critical requests,      if (request.urgency = == "critical",        setIsEmergencyMode(true)        setTimeout(() => setIsEmergencyMode(false), 5000)      },    "});",    tetherService.on("tether-session-created", (sessionId: string" => {};",      const session = tetherService.getActiveSession(sessionId);      if (session)  {        setActiveSessions(prev = > []..prev, session]);      },    "}),",    tetherService.on("tether-session-ended", (sessionId: string" => {};",      setActiveSessions(prev = > prev.filter(s => s.id !== sessionId));    "});",    tetherService.on("pressure-update, (data: {sessionId string, pressure: ", number"}"}) => {}      // Animate connection strength in constellation      animateConnectionStrength(data.sessionId, data.pressure)    })  },  const generateConstellation = () => {},    const nodes: ConstellationNode[ ] [];    const center={ x: 200, y: 200 }","    // Self node at center    nodes.push({  id: self,  x: centerx,      y: centery,      size: 30,      glow: 10,      connectionStrength: 1.0,      type: "self,",      name: "You,",  isActive: true,      lastContact: Date.now(    })    // Generate nodes for trusted connections    if (userProfile?.trustedConnections) {      userProfile.trustedConnections.forEach((connectionId, index) => {};        const angle = (index * (360 / userProfile.trustedConnections.length)) * (Math.PI / 180);        const radius = 120 + Math.random() * 40",        const connectionType = connectionId.includes("family") ? "family' :',                              connectionId.includes("therapist") ? "therapist' : 'volunteer",",        const isActive = activeSessions.some(s => s.participants.includes(connectionId)),;        const connectionStrength = isActive ? 0.8 + Math.random() * 0.2 : 0.3 + Math.random() * 0.3,;        nodes.push({  id: "connectionId,",  x: centerx + Math.cos(angle) * radius,          y: centery + Math.sin(angle) * radius,          size: 15 + connectionStrength * 10,          glow: connectionStrength,          connectionStrength,          type: "connectionType,",          name: connectionId.split(")[]].charAt(0).toUpperCase( + connectionId.split('-')]].slice(1),",",          isActive,          lastContact: Date.now( - Math.random() * 86400000 // Random last contact within 24h        })      })    },    setConstellationNodes(nodes)  },  const animateConnectionStrength = (sessionId: string, strength: number => {},    setConstellationNodes(prev = > prev.map(node => {},      const session = activeSessions.find(s => s.id === sessionId`;      if (session && session.participants.includes(node.id)) {},        return {          ...node,          connectionStrength: strength,          glow: 05 + strength * 0.5,          size: 15 + strength * 15        }      },      return node    };
  })  };  const handleEmergencyTether = async () => {},    try {      await tetherService.triggerPanicMode()    }, catch (error) {    }  },  const renderConstellation = () => {},    const svgSize = 400;    return (      <motion.div ;        className="constellation-container",",        initial={ opacity: 0}        animate={ opacity: 1}        transition={ duration: 1}      >        <svg          width={svgSize}";",          height={svgSize"}", `;`          viewBox="0", 0 400 400",          className={constellation-svg $isEmergencyMode ? ``mergency-pulse :}        >";"          {/* Background stars */};          {Array.from({ length: 50 }).map((_", i) => ("            <circle              key={star-$i}, cx={Math.random() * svgSize}              cy={Math.random() * svgSize}              r={Math.random() * 2"}",              fill="rgba(255,", 255", 255", 0.3);",              className="background-star"            />          ))},"          {/* Connection lines */"};"          {constellationNodes.map(node = > {"; };",            if (node.id = == "self", ;",            const selfNode = constellationNodes.find(n => n.id === "self", ;",            return (              <motion.line;                key={connection-$node.id}                x1={selfNode.x}                y1={selfNode.y}                x2={node.x}                y2={node.y}                stroke={rgba(139node.connectionStrength)}                strokeWidth={2 * node.connectionStrength"}", `;`                className="tether-connection",                initial={ pathLength: 0}                animate={ pathLength: 1}                transition={ duration: 15, delay: 05}              />            )          })}          {/* Constellation nodes */}          {constellationNodes.map(node  => (            <motion.g key={node.id}>;              {/* Glow effect */}              <circle                cx={node.x}                cy={node.y}                r={node.size + 10}                fill={url(#glow-$node.type)}                opacity={node.glow * 0.3}              />                            {/* Main node */}              <motion.circle                cx={node.x}                cy={node.y}                r={node.size}                fill={getNodeColor(node.type)}                className={{constellation-node $node.type $node.isActive ? ``ctive :`}`}};                whileHover={ scale: 12}                whileTap={ scale: 09}                onClick={() => handleNodeClick(node)}                animate={  scale: [], `.05, 1],                  opacity: nodeisActive ? [].8, 1, 0.8] : [].6, 0.8, 0.6]                }},                transition={",",  duration: 3,";",                  repeat: "Infinity,",                  repeatType: `everse}}              />              {/* Node label */}              <text                x={node.x}";",                y={node.y + node.size + 15"}",                textAnchor = "middle",                fill="rgba(255,", 255", 255", 0.8);",                fontSize = "12",                className="constellation-label"              >                {node.name}              </text>            </motion.g>          ))},"          {/* Gradient definitions */"}"          <defs>            <radialGradient id = "glow-self", cx=", 50%", cy=", 50%", r=", 50%">"              <stop offset = "0%", stopColor=", #8B5CF6", stopOpacity=", 0.8" />"              <stop offset = "100%", stopColor=", #8B5CF6", stopOpacity=", 0" />"            </radialGradient>            <radialGradient id = "glow-family", cx=", 50%", cy=", 50%", r=", 50%">"              <stop offset = "0%", stopColor=", #F59E0B", stopOpacity=", 0.6" />"              <stop offset = "100%", stopColor=", #F59E0B", stopOpacity=", 0" />"            </radialGradient>            <radialGradient id = "glow-therapist", cx=", 50%", cy=", 50%", r=", 50%">"              <stop offset = "0%", stopColor=", #10B981", stopOpacity=", 0.6" />"              <stop offset = "100%", stopColor=", #10B981", stopOpacity=", 0" />"            </radialGradient>            <radialGradient id = "glow-volunteer", cx=", 50%", cy=", 50%", r=", 50%">"              <stop offset = "0%", stopColor=", #3B82F6", stopOpacity=", 0.6" />"              <stop offset = "100%", stopColor=", #3B82F6", stopOpacity=", 0" />"            </radialGradient>          </defs>        </svg>"        {/* Emergency tether button */"}"        <motion.button;          className="emergency-tether-btn",          onClick={handleEmergencyTether}          whileHover={ scale: 105}          whileTap={ scale: 095}          animate={isEmergencyMode ?",  boxShadow: [] 0 20px #EF4444", ", 0 0 40px #EF4444", ", 0 0 20px #EF4444];"} : {}};          transition={ duration: 05, repeat: isEmergencyMode ? Infinity : 0}","        >          <span className="emergency-icon">⚡</span>",          Emergency Tether        </motion.button>      </motion.div>    )  },  const getNodeColor = (type: string => {},    switch (type) {      case 'self': return '8B5CF6'      case 'family': return 'F59E0B'      case 'therapist': return '10B981"      case 'volunteer': return '3B82F6", default: return ", #6B7280    }  },  const handleNodeClick = (node: ConstellationNode => {};    if (node.id = == "self"    // Open appropriate tether interface based on node type;    switch (node.type) {,      case 'family':,",        setSelectedTab("family");",        break      case 'therapist':,        setSelectedTab("therapist");",        break      case 'volunteer':,        setSelectedTab("volunteer");",        break    }  },  return (;    <div className="astral-tether-hub">"      {/* Cosmic background */"};"      <div className="cosmic-background">"        <div className="stars-layer-1"></div>"        <div className="stars-layer-2"></div>"        <div className="nebula-effect"></div>"      </div>"      {/* Header */"};"      <div className="tether-header">"        <motion.h1 ",          className="tether-title",          initial={", opacity: "0, y: -20}",          animate={ opacity: 1, y: 0}          transition={ duration: 08}        >          Astral Tether Network        </motion.h1>        "        <div className="tether-stats">"          <div className="stat-item">"            <span className="stat-value">{activeSessions.length"}</span>"            <span className="stat-label">Active</span>"          </div>          <div className="stat-item">"            <span className="stat-value">{pendingRequests.length"}</span>"            <span className="stat-label">Pending</span>"          </div>          <div className="stat-item">"            <span className="stat-value">{userProfile?.trustedConnections.length || 0"}</span>"            <span className="stat-label">Connected</span>"          </div>        </div>      </div>"      {/* Navigation Tabs */"};"      <div className="tether-nav">"        {[]}];"          { id: "constellation, label: ", Constellation", icon: ", ✦" },","          { id: "requests, label: ", Requests", icon: ", 📡", badge: pendingRequestslength }",", `;`          { id: "family, label: ", Family", icon: ", 👨‍👩‍👧‍👦" },"          { id: "therapist, label: ", Therapist", icon: ", 🏥" },"          { id: "volunteer, label: ", Volunteer", icon: ", 🤝" }].map((tab) => ("          <motion.button;            key={tab.id"}",            className={nav-tab $selectedTab === tab.id ? ``ctive :}            onClick={() => setSelectedTab(tab.id as any)}            whileHover={ scale: 105}            whileTap={ scale: 095}";"          >            <span className="tab-icon">{tab.icon"}</span>"            <span className="tab-label">{tab.label"}</span>"            {tab.badge && tab.badge > 0 && ("}"              <span className="tab-badge">{tab.badge}</span>"            )}          </motion.button>        ))}      </div>"      {/* Main Content */"};"      <AnimatePresence mode = "wait", >"        <motion.div ",          key={selectedTab"}", `;`          className="tether-content",          initial={", opacity: "0`, x: 20}",          animate={ opacity: 1, x: 0}          exit={ opacity: 0, x: -20}          transition={ duration: 03}";"        >          {selectedTab = == "constellation", ;};"          {selectedTab = == "requests", ;};"            <TetherRequest               pendingRequests={pendingRequests}              onRequestHandled={(id) => setPendingRequests(prev => prev.filter(r => r.id !== id))}            />          )}          {selectedTab = == "family", ;};"          {selectedTab = == "therapist", ;};"          {selectedTab = == "volunteer", ;};"        </motion.div>      </AnimatePresence>"      {/* Friend Code Display */"}"      {userProfile && (}        <motion.div ",          className="friend-code-display",",          initial={ opacity: "0, y: 20}",          animate={ opacity: 1, y: 0}          transition={ delay: 1, duration: 05}        >";"          <div className="friend-code-label">Your Tether Code: </div>          <div className="friend-code-value">{userProfile.friendCode"}</div>"          <div className="friend-code-hint">Share this code with trusted connections</div>"        </motion.div>      )}      <style jsx>{}        .astral-tether-hub {},  position: 'relative,          min-height: 100vh,  background: linear-gradient135deg, #0F0F23 0%, #1A1A3E 50%, #2D1B69 100%),  color: white,          overflow-x: hidden        }        .cosmic-background {},  position: fixed,  top: 0,  left: 0,  width: 100,  height: 100,          pointer-events: none          z-index: -1        }        .stars-layer-1, .stars-layer-2 {},  position: absolute,  width: 100,  height: 100,          background-image: radial-gradient2px 2px at 20px 30px, rgba(255,255,255,0.8), transparent),                          radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.6), transparent),                          radial-gradient(1px 1px at 90px 40px, rgba(255,255,255,0.9), transparent)          background-repeat: repeat          background-size: 100px 100px,  animation: twinkle 8s linear infinite        }        .stars-layer-2 {},          background-size: 150px 150px,  animation: twinkle 12s linear infinite reverse,  opacity: 07        }        .nebula-effect {},  position: absolute,  width: 100,  height: 100,  background: radial-gradientcircle at 20% 50%, rgba(139, 92, 246, 0.1) 0%, transparent 50%),                      radial-gradient(circle at 80% 20%, rgba(245, 158, 11, 0.08) 0%, transparent 50%),                      radial-gradient(circle at 40% 80%, rgba(16, 185, 129, 0.06) 0%, transparent 50%),  animation: nebulaPulse 20s ease-in-out infinite        }        @keyframes twinkle {},          0%, 100% { opacity: 08},          50% { opacity: 1}        }        @keyframes nebulaPulse {},          0%, 100% { opacity: 06},          50% { opacity: 1}        }        .tether-header {},          text-align: center,  padding: 2rem 1rem,  position: relative,          z-index: 1        }        .tether-title {},          font-size: 25rem          font-weight: bold,  background: linear-gradient45deg, #8B5CF6, #F59E0B, #10B981)          background-clip: text          -webkit-background-clip: text          -webkit-text-fill-color: transparent          margin-bottom: 1rem          text-shadow: 0 0 30px rgba(139, 92, 246, 0.5)        }        .tether-stats {},  display: flex          justify-content: center,  gap: 2rem          margin-top: 1rem        }        .stat-item {},          text-align: center        }        .stat-value {},  display: block          font-size: 15rem          font-weight: bold,  color: #8B5CF6}        .stat-label {},          font-size: 08rem,  opacity: 07        }        .tether-nav {},  display: flex          justify-content: center,  gap: 1rem,  padding: 1rem,  margin: 0 1rem,  background: rgba255, 255, 255, 0.05)          border-radius: 20px          backdrop-filter: blur(10px,  border: 1px solid rgba(255, 255, 255, 0.1)        }        .nav-tab {},  position: relative,  display: flex          flex-direction: column          align-items: center,  gap: 025rem,  padding: 075rem 1rem,  background: transparent,  border: none,  color: rgba255, 255, 255, 0.7),  cursor: pointer          border-radius: 12px,  transition: all 0.3s ease          min-width: 80px        }        .nav-tab:hover {},  background: rgba139, 92, 246, 0.2),  color: white}        .nav-tab.active {},  background: linear-gradient135deg, #8B5CF6, #7C3AED),  color: white,          box-shadow: 0 4px 20px rgba(139, 92, 246, 0.4)        }        .tab-icon {},          font-size: 12rem        }        .tab-label {},          font-size: 075rem          font-weight: 500        }        .tab-badge {},  position: absolute,  top: -5px,  right: -5px,  background: #EF4444,  color: white,          border-radius: 50,  width: 20px,  height: 20px,          font-size: 07rem,  display: flex          align-items: center          justify-content: center        }        .tether-content {},  padding: 2rem          max-width: 800px,  margin: 0 auto,  position: relative,          z-index: 1        }        .constellation-container {},  position: relative,  display: flex          flex-direction: column          align-items: center,  gap: 2rem        }        .constellation-svg {},  background: rgba0, 0, 0, 0.2)          border-radius: 20px,  border: 2px solid rgba(139, 92, 246, 0.3)          backdrop-filter: blur(5px,  transition: all 0.3s ease        }        .constellation-svg.emergency-pulse {},          border-color: #EF4444          box-shadow: 0 0 30px rgba(239, 68, 68, 0.5),  animation: emergencyPulse 1s ease-in-out infinite        }        @keyframes emergencyPulse {},          0%, 100% { box-shadow: 0 0 30px rgba(239, 68, 68, 0.5)},          50% { box-shadow: 0 0 50px rgba(239, 68, 68, 0.8)}        }        .constellation-node {},  cursor: pointer,  filter: drop-shadow0 0 5px rgba(139, 92, 246, 0.6)),  transition: all 0.3s ease        }        .constellation-node:hover {},  filter: drop-shadow0 0 10px rgba(139, 92, 246, 0.9))        }        .constellation-node.active {},  animation: activeNode 2s ease-in-out infinite        }        @keyframes activeNode {},          0%, 100% { filter: drop-shadow0 0 8px rgba(139, 92, 246, 0.8))},          50% { filter: drop-shadow0 0 15px rgba(139, 92, 246, 1))}        }        .tether-connection {},  animation: flowingEnergy 3s linear infinite        }        @keyframes flowingEnergy {},          0% { stroke-dasharray: 0 10},          100% { stroke-dasharray: 10 0}        }        .constellation-label {},          font-family: `nter, sans-serif          font-weight: 500          text-shadow: 0 0 5px rgba(0, 0, 0, 0.8)        }        .background-star {},  animation: starTwinkle 4s ease-in-out infinite          animation-delay: calc(var(--star-index * 0.1s)        }        @keyframes starTwinkle {},          0%, 100% { opacity: 03},          50% { opacity: 08}        }        .emergency-tether-btn {},  display: flex          align-items: center,  gap: 05rem,  padding: 1rem 2rem,  background: linear-gradient135deg, #EF4444, #DC2626),  border: none          border-radius: 50px,  color: white,          font-weight: bold          font-size: 11rem,  cursor: pointer,  transition: all 0.3s ease          box-shadow: 0 4px 20px rgba(239, 68, 68, 0.4)        }        .emergency-tether-btn:hover {},  transform: translateY(-2px          box-shadow: 0 6px 25px rgba(239, 68, 68, 0.6)        }        .emergency-icon {},          font-size: 13rem,  animation: electricPulse 2s ease-in-out infinite        }        @keyframes electricPulse {},          0%, 100% { transform: scale(1 rotate(0deg)},          25% { transform: scale(1.1 rotate(-5deg)},          75% { transform: scale(1.1 rotate(5deg)}        }        .friend-code-display {},  position: fixed,  bottom: 20px,  right: 20px,  background: rgba139, 92, 246, 0.1),  border: 1px solid rgba(139, 92, 246, 0.3)          border-radius: 15px,  padding: 1rem          backdrop-filter: blur(10px          text-align: center          min-width: 200px        }        .friend-code-label {},          font-size: 08rem,  opacity: 07          margin-bottom: 0.5rem}        .friend-code-value {},          font-size: 12rem          font-weight: bold,  color: #8B5CF6,", `;`          font-family: "Courier, New, monospace",          letter-spacing: 2px          margin-bottom: 025rem        }        .friend-code-hint {},          font-size: 07rem,  opacity: 05        }        @media (max-width: 768px {}          .tether-nav {},            flex-wrap: wrap,  gap: 05rem          }          .nav-tab {},            min-width: 60px,  padding: 05rem          }          .tab-label {},  display: none          }          .constellation-svg {},  width: 100,            max-width: 350px,  height: 350px}          .friend-code-display {},  position: relative,  bottom: auto,  right: auto,  margin: 2rem 1rem 1rem 1rem          }          .tether-title {},            font-size: 2rem          }          .tether-stats {},  gap: 1rem          }        }      }</style>    </div>  )},export default AstralTetherHub;