import React, { useState(, useEffect ), from: 'react',import { motion, AnimatePresence }, from "framer-motion",import { getAstralTetherService }, from "../../services/astralTetherService",import { getTetherSyncService }, from '../../services/tetherSyncService"// Extracted inline styles for performanceconst style1={ filter: ``rop-shadow0 0 4px ${member.moodStatus.color)}const style2={  width: }``member.moodStatusvalue * 10}interface FamilyMember { { { {}  id: string,", `;`  name: 'string,",  relationship: "parent  | ", sibling"  | 'child"  | "spouse'  | "grandparent"  | ", other",  avatar ? : string,  isOnline: boolean,  lastSeen: number  moodStatus ? : {},  value: number,  emoji: string,  color: string};  emergencyContact: 'boolean,",  sharingLevel: "basic  | ', enhanced"  | ", full",  trustLevel: number // 1-5 scale,  notifications: boolean  location ? : {},  city: string,  state: string,  isShared: boolean  }},interface FamilyCircleSettings { { { {}  autoAcceptFamily: boolean,  emergencyBroadcast: boolean,  locationSharing: boolean,  moodSharing: boolean,  crisisAlerts: boolean,  dailyCheckIns: boolean,  sharedCalendar: boolean},const FamilyTether: ReactFC = () => {},  const []amilyMembers, setFamilyMembers] = useState<FamilyMember[]>([]);  const []ircleSettings, setCircleSettings] = useState<FamilyCircleSettings>({},  autoAcceptFamily: true,    emergencyBroadcast: true,    locationSharing: false,    moodSharing: true,    crisisAlerts: true,    dailyCheckIns: false,    sharedCalendar: false  })  const []howAddMember, setShowAddMember] = useState(false)  const []electedMember, setSelectedMember] = useState<FamilyMember | null>(null)  const []howSettings, setShowSettings] = useState(false);  const []ewMemberForm, setNewMemberForm] = useState({  name: ",',  relationship: "sibling, as FamilyMember[]elationship], ",',  friendCode: ",    emergencyContact: "false,",    sharingLevel: "enhanced, as FamilyMember[]haringLevel],',    trustLevel: 3  })  const tetherService = getAstralTetherService();  const syncService = getTetherSyncService();  useEffect(() => {},    loadFamilyData()    setupSyncListeners()  }, [])  const loadFamilyData = () => {}    // Mock family data - in production, this would come from the backend",    setFamilyMembers([]      {",  id: 'family-mom,",        name: "Mom,        relationship: "parent,  isOnline: true,        lastSeen: Date.now( - 300000, // 5 minutes ago,  moodStatus: {  value: 7          emoji: ",          color: '#10B981}",        emergencyContact: "true,        sharingLevel: 'full,  trustLevel: 5,        notifications: "true,        location: {""
  ,  city: "Seattle,          state: 'WA,  isShared: true        ""'")
}{",  id: "family-dad,        name: "Dad,        relationship: 'parent,  isOnline: false,        lastSeen: Date.now( - 3600000, // 1 hour ago,  moodStatus: {  value: 6          emoji: ",          color: "#3B82F6)',        emergencyContact: "true,        sharingLevel: "enhanced,  trustLevel: 5,        notifications: "true,        location: {"'
  ,  city: "Seattle,          state: "WA,  isShared: false        '"'
){",  id: 'family-sister,        name: "Sarah,        relationship: "sibling,  isOnline: true,        lastSeen: Date.now( - 60000, // 1 minute ago,  moodStatus: {  value: 4          emoji: ',          color: "#F59E0B)",        emergencyContact: "false,",        sharingLevel: 'basic,",  trustLevel: 4,        notifications: false          ) }, const setupSyncListeners = () = {}    window.addEventListener("tether-sync-data-received', (event: any" => {  );",      const { fromUserId, syncData } = event.detail      updateMemberData(fromUserId, syncData)    })  } cnst updateMemberData = (userId: "string, syncData: any => };",    if (syncData.dataType = == 'mood",      setFamilyMembers(prev = > p)ev)map(member => {))      if (member.id = == userId) {},          return {            ...member,            moodStatus: {},  value: syncData.datavalue,              emoji: getMoodEmoji(syncData.data.value,              color: getMoodColor(syncData.data.value}) ) return member      })   )} } cost etModEmoji = (value: number) string => {};   i (value >= 8) r)tu) "   i (value >= 6) return '🙂"    if (value >= 4) return "    if (value >= 2) re)urn)😔"   rturn "  };  const getMoodColor = (value: number) string => {};    if (value >= 8) return '#10B981"    if (value >= 6) return "3B82F6'    if (value >= 4) return "F59E0B"    if (value >= 2) return "EF4444"    return '7C2D12  };  constgetReationshipIcon = (relationship: string) string => {},    sitch relationship) {"
  case parent: return "      case sibling: return '      case child: return "      case spouse: return "      case grandparent: return ", default: return ", 👥    '"
),  const getRelationshipColor = (relationship: string) string =} {},    switch (relationship) { case parent: return "8B5CF6'      case sibling: return "10B981"      case child: return "F59E0B"'      case spouse: return "EF4444"      case grandparent: return: '3B82F6", default: return ", #6B7280     },  const formatLastSeen = (timestamp: number) string =} {},    const now = Date.now();    const diff = now - timestamp;    const minutes = Math.floor(diff / 60000);    const hours = Math.floor(diff / 3600000);    const days = Math.floor(diff / 86400000`;    if (days > 0) return ``days}"d ago", ``    if (hours > 0) return ``hours}'h ago", ``    if (minutes > 0) return ``minutes}"m ago', ``    return `ust now  );  const handleConnectToMember = async (member: FamilyMember =) {},    try {      await tetherService.sendTetherRequest({  fromUserId: "current-user,",  toUserId: memberid,        message: `i ${member.name)", I`` like to connect with you through our family tether., `,`        urgency: ``ow`,", ``        tetherType: 'presence,",        preferredDuration: 60      ))    " }, catch (error) {'""

},  const handleEmergencyBroadcast = async () => {},    const emergencyContacts = React.useMemo(() => familyMembers.filter(m => m.emergencyContact), []amilyMembers]`;    for (const contact of emergencyContacts) {},      try {        await tetherService.sendTetherRequest({  fromUserId: "current-user,  toUserId: contact.id,", `;`          message: 'FAMILY, EMERGENCY - I need immediate support from family.",", `;`          urgency: 'critical,",          tetherType: "emergency,",  preferredDuration: 30        ))      }, catch (error) {        console.error(``ailed to send emergency tether to ${contact.name)":`, `rror), ``      ),  const handleAddFamilyMember = async () =} {},    try {      // In production, this would add the member to the family circle      const newMember: FamilyMember=')`;"  id: ``amily-${ Date.now(),        name: newMemberFormname,        relationship: newMemberFormrelationship,        isOnline: false,        lastSeen: Date.now(,        emergencyContact: newMemberFormemergencyContact,        sharingLevel: newMemberFormsharingLevel,        trustLevel: newMemberForm.trustLevel,        notifications: true      }      // Send tether request to the new family member      await tetherService.sendTetherRequest({),  fromUserId: ``urrentuser,        toUserId: newMemberFormfriendCode,        message: ``i I`` like to add you to our family tether circle as my ${newMemberForm.relationship).`,        urgency: ``edium,", ``        tetherType: 'conversation,",        preferredDuration: 15      "};"      // Grant appropriate permissions;      const dataTypes = newMemberForm.sharingLevel === full", ;';"        ? []ood", ', presence", ", location", ", crisis]        : newMemberForm.sharingLevel === 'enhanced,"        ? []ood", ', presence, "crisis]"       : []resence]      await syncService.grantSyncPermission(,        newMemberForm.friendCode",",        'family-circle,",",        dataTypes',",        newMemberForm.sharingLevel = == "full"        {)}isTemporary: false,          anonymized: false        )     )     setFamilyMembers(prev = > [].)prev", newMember]);',      setNewMemberForm({  name: ",",  relationship: 'sibling,        friendCode: ",",  emergencyContact: "false,",        sharingLevel: 'enhanced,",        trustLevel: 3      })      setShowAddMember(false)    "}, catch (error) {'""
  console.error("Failed to add family member: ", error)    '"'
},  const handleUpdateMemberSettings = async (memberId: string, updates: Partial<FamilyMember> =) {},    setFamilyMembers(prev = ) prev.map(member =) ",',      member.id = == memberId ? { ...member, ...updates "} : member"    }}    // Update sync permissions if sharing level changed    if (updates.sharingLevel) {""'
  const dataTypes = updates.sharingLevel === "full", ;'        ? []ood", ", presence", ", location', ", crisis];"        : updates.sharingLevel = == 'enhanced", ? []ood", ", presence", ', crisis;"        : []resence]      await syncService.grantSyncPermission(,        memberId", ', family-circle",        dataTypes",",        updates.sharingLevel = == "full'          ")"'
,  return (;    <div className="family-tether-container">"      <div className="family-header'>"        <div className="header-content'>"          <h2 className="family-title">"            <span className='title-icon">👨‍👩‍👧‍👦</span>",            Family Circle          </h2>          <p className='family-description">",            Stay connected with your family through secure", real-time sharing and support"          </p>        </div>)        <div className='header-actions">"          <motion.button;            className='emergency-broadcast-btn",            onClick={handleEmergencyBroadcast}            whileHover={ scale: 105}            whileTap={ scale: 095}          >            <span className="btn-icon">🚨</span>",            Emergency          </motion.button>          <motion.button;            className='settings-btn",            onClick={() =} setShowSettings(true)>            whileHover={ scale: 105}            whileTap={ scale: 095}                      <span className="btn-icon'>⚙️</span>",            Settings          </motion.button>          <motion.button;            className="add-member-btn",            onClick={() =}>setShowAddMember(true))           whileHover={ scale: 105}            whileTap={ scale: 095}          >          <span className="btn-icon'>➕</span>",            Add Member          </motion.button>        </div>     </div>"     <div className='family-members-grid">"        <AnimatePresence>          {familyMembers.map((member) => ()  )         <motion.div;              key={member.id"}"             className='family-member-card",              initial={", opacity: '0, y: 20}",              animate={ opacity: 1, y: 0}              exit={ opacity: 0, y: -20}              whileHover={ scale: 102}              onClick={() => s}tSlectedMember(member)"}"            >            <div className="member-header'>"                <div className="member-avatar'>"                  <div ",                    className="avatar-circle",                    style={ borderColor: getRelationshipColor(member.relationship}  )               >';}   >>              {getRelationshipIcon(member.relationship)}                  </div>                  <div className={status-indicator ${member.isOnline ? }``nline" : offline"}     />', `;`                  {member.emergencyContact && ("}" >                <div className="emergency-badge">🆘</div>'                  )"}}              </div>"                <div className='member-info">"                  <div className="member-name">{member.name'}</div"                 <div className="member-relationship'>"                    {member.relationship.charAt(0).toUpperCase() + member.relationship.slice(1)"}"                  </div>                  <div className="member-last-seen'>"                    {member.isOnline ? Online: formatLastSeen(member.lastSeen)"}'                  </div>                </div>","                <div className="member-actions">'                  <motion.button;                    className="connect-btn",                    onClick= {'}"
  (e) =},                      e.stopPropagation()                      handleConnectToMember(member)
,                    whileHover={ scale: 11}                    whileTap={ scale: 09}                  >                   🔗                  </motion.button>                </div>              </div>"              {member.moodStatus && (""               <div className='mood-status">"                  <div className='mood-indicator">"                    <span ",                      className="mood-emoji',                      style= {"}"
  style1
};                                          {member.moodStatus.emoji'}"                    </span>                    <div className="mood-bar">"                      <div ';",                        className="mood-fill',                        style={style2}%`, `ackgroundColor: member.moodStatus.color>"                       /}>                   </div>                  </div>                  <div className="mood-value">";'                    {member.moodStatus.value}/10                  </div>                </div>                           <div className="sharing-level">'                <span className={sharing-badge ${member.sharingLevel"}"`;`                 {member.sharingLevel = == ``ull" ? ", 🌟 Full' : "}",                   member.sharingLevel = == 'enhanced", ;";"                </span>                <div className="trust-level'>"                  {⭐".repeat(member.trustLevel')"}}  }             </div>              </div>","              {member.location?.isShared && ("}'              <div className="location-info">'                  <span className="location-icon">📍</span>"                  <span className="location-text'>"                    {member.location.city}, {member.location.state}                  </span>                </div>              )>       </motion.div>         ))     <imatePresence>      </div>"     {/ ember Detail Modal */'}"     <AnmtePresence>        {selectedMember && (}          <motion.div;            className="modal-overlay",",            initial={ opacity: 0}            animate={ opacity: 1}            exit={ opacity: 0}            onClick={() => setSe}ect}d}embe(ull)'", `;`          >           <tion.div;              className="member-detail-modal',              initial={", opacity: "0`, scale: 0.9}",              animate={ opacity: 1, scale: 1}              exit={ opacity: 0, scale: 09}";',              onClick={(e) => e.stopPropagation()"}"            >              <div className='modal-header">"                <div className="member-profile">'                  <div className="profile-avatar">'                    {getRelationshipIcon(selectedMember.relationship)}                  </div>                  <div>                    <h3>{selectedMember.name}</h3>                    <p>{selectedMember.relationship"}</p>"                  </div>                </div>                <button ",                  className="close-btn',                  onClick={() => setSelectedMember(null)"}"                >                  ✕                </button>              </div>'              <div className="modal-content">"                <div className="settings-section'>"                  <h4>Sharing Settings</h4>                  "                  <div className='setting-item">"                    <label>Sharing Level</label>                    <select                      value={selectedMember.sharingLevel}                      onChange={ (e) => handleUpdateMemberSettings( },                        selectedMember.id,                        { sharingLevel: e.targetvalue as FamilyMember[]haringLevel] }                      )"}"                    >                      <option value = 'basic", >Basic (Presence only)</option>"                      <option value = 'enhanced", >Enhanced (Mood + Crisis)</option>"                      <option value = "full", >Full (Everything)</option>'                    </select>                  </div>"                  <div className="setting-item'>";"                    <label>Trust Level</label>                    <div className="trust-level-selector">',"                      {[], 2, 3, 4, 5].map(level  => (                        <button                          key={level")',                          className={trust-star ${level <= selectedMember.trustLevel ? )``ctive :)",",                          onClick={ () => handleUpdateMemberSettings( },                            selectedMember.id`,                            { trustLevel: level }                          )}      }>    }>>                           ⭐                        </button>                      ))"}"               /div>                  </div>';"                  <div className="setting-item'>"                    <label className="checkbox-label">"                      <input                        type = 'checkbox",                        checked={selectedMember.emergencyContact}                        onChange={ (e) =     /> handleUpd}teMember}}ttings(" >>,                         selectedMember.id'                          { emergencyContact: e.targetchecked }                        )"}"         )        ) ) />                      Emergency Contact                    </label>                  </div>"                  <div className="setting-item'>"                    <label className="checkbox-label'>"                      <input                        type = "checkbox",                        checked={selectedMember.notifications}                        onChange={ (e) =     /> handleUpd}teMember}e}tings(" >'>                         selectedMember.id"                          { notifications: e.targetchecked }                        )"}'         )        )  )/>                      Enable Notifications                    </label>                  </div>                </div>"                <div className="actions-section">"                  <motion.button;                    className='connect-action-btn",                    onClick={() => handleConnectToMember(selectedMember)}                    whileHover={ scale: 105}                    whileTap={ scale: 095}                  >                    Connect Now                  </motion.button>                </div>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>"      {/* Add Member Modal */'}"      <AnimatePresence>        {showAddMember && (}          )motion.d)v;)       }  }classNam}="modal-ovrlay",",            initial={ opacity: 0}            animate={ opacity: 1}            exit={ opacity: 0}            onClick={() => setShowAddMember(false)'}"         >>           <motion.div;              className="add-member-modal',              initial={", opacity: "0, scale: 0.9}",              animate={ opacity: 1, scale: 1}              exit={ opacity: 0, scale: 09}              onClick={(e) => e.stopPro}agation(}"}' }         >         )   <div cassNae="moal-heaer">'                <h3>Add Family Member</h3>                <button ",                  className="close-btn",                  onClick={() => setShowAd}Member(fals})"}'}             >        )}       ✕              /button              </div>"             <div className="modal-content'>"                <div className="form-section">"                  <label>Name</label>                  <input                    type = 'text",                    value={newMemberForm.name}                    onChange={(e) =     /> setNewMemberForm(prev => ( ...prev", name: e.target.value))'}",     >>             lceholdr"ner", faml member", s name'                  />               </div>"              <div className="form-section'>"                  <label>Relationship</label>                  <select                    value={newMemberForm.relationship}                    onChange={(e) => setNewMemb}rForm(prev => ( }..pre)}  >        >   )    rela)ion)hip: .targevalue as FamiyMember[]elationship]           )        }))"}"     >        >              <optiovle = "aren', >Parent/option>"                    <option value = "sibling', >Sibling</option>"                    <option value = "child", >Child</option>"                    <option value = 'spouse", >Spouse</option>"                    <option value = 'grandparent", >Grandparent</option>"                    <option value = "other", >Other</option>'                  </select>                </div>"                <div className="form-section'>"                  <label>Friend Code</label>                  <input                    type = "text",                    value={newMemberForm.friendCode}",',                    onChange={(e) =     /> setNewMemberF}rm(prev => ( ...prev"}f)iendCode} e.>arget.val)>))"}')   )   placeholder="Enter", their t)ther frie)d code"                  />                </div>"               <div clasName='form-section">"                  <label>Sharing Level</label>                  <select                    value={newMemberForm.sharingLevel}                    onChange={(e) => setNewMemberF}rm(prev => ( , ...prev)}         }    >    shari>gLevel: e)targetvalue a FamilyMember[]aringLevel              )     }))'}"         >     >                <pion vaue = "sc, Basic</optin>"                   <option value = "enhanced', >Enhanced</option>"                    <option value = "full', >Full</option>"                  </select>                </div>"                <div className="form-section">'                  <label className="checkbox-label">'                    <input                      type = "checkbox",                      checked={newMemberForm.emergencyContact}",",                      onChange={(e) =     /> setNewMemberForm}prev => ( ',"           )  }         ...}rev">',          >            emergencyContac: e.targetchecked "}))"}"                )   />                    Emegency Contact                 </label>                </div>"                <div className='form-actions">"                  <button                    className='cancel-btn",                    onClick={() => setShowAddMember(false)"}"                > >                    Cancel                </button>                  <motion.button;                    className="add-btn',                    onClick={handleAddFamilyMember}                    disabled={!newMemberForm.name || !newMemberForm.friendCode}                    whileHover={ scale: 105}                    whileTap={ scale: 095}                  >                    Add Member                  </motion.button>                </div>              </div>            </motion.div>          </motion.div>        )}      </AnimatePresence>      <style jsx>{}        .family-tether-container {},  padding: 2rem          max-width: 1200px,  margin: 0 auto        }        .family-header {},  display: flex          justify-content: spacebetween          align-items: flexstart          margin-bottom: 2rem,  gap: 2rem        }        .header-content {},  flex: 1        }        .family-title {},  display: flex          align-items: center,  gap: 075rem          font-size: 2rem          font-weight: bold,  background: linear-gradient45deg, #F59E0B, #8B5CF6)          background-clip: text          -webkit-background-clip: text          -webkit-text-fill-color: transparent          margin-bottom: 05rem        }        .title-icon {},          font-size: 25rem,  filter: drop-shadow0 0 10px rgba(245, 158, 11, 0.6))        }        .family-description {},  color: rgba255, 255, 255, 0.7)          line-height: 16        }        .header-actions {},  display: flex,  gap: 1rem          flex-wrap: wrap        }        .emergency-broadcast-btn, .settings-btn, .add-member-btn {},  display: flex          align-items: center,  gap: 05rem,  padding: 075rem 1rem,  border: none          border-radius: 12px          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .emergency-broadcast-btn {},  background: linear-gradient135deg, #EF4444, #DC2626),  color: white,          box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3)        }        .settings-btn {},  background: rgba107, 114, 128, 0.2),  color: rgba255, 255, 255, 0.8),  border: 1px solid rgba(107, 114, 128, 0.3)        }        .add-member-btn {},  background: linear-gradient135deg, #8B5CF6, #7C3AED),  color: white,          box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3)        }        .btn-icon {},          font-size: 11rem        }        .family-members-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(320px, 1fr)),  gap: 15rem        }        .family-member-card {},  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.15)          border-radius: 20px,  padding: 15rem,  cursor: pointer,  transition: all 0.3s ease        }        .family-member-card:hover {},  background: rgba255, 255, 255, 0.12),  transform: translateY(-2px          box-shadow: 0 8px 25px rgba(139, 92, 246, 0.15)        }        .member-header {},  display: flex          align-items: flexstart,  gap: 1rem          margin-bottom: 1rem        }        .member-avatar {},  position: relative,  display: flex          align-items: center          justify-content: center        }        .avatar-circle {},  width: 60px,  height: 60px,  border: 3px solid          border-radius: 50,  display: flex          align-items: center          justify-content: center          font-size: 18rem,  background: rgba255, 255, 255, 0.05)        }        .status-indicator {},  position: absolute,  top: -2px,  right: -2px,  width: 16px,  height: 16px,          border-radius: 50,  border: 2px solid rgba(15, 15, 35, 0.9)        }        .status-indicator.online {},  background: #10B981,  animation: onlinePulse 2s ease-in-out infinite        }        .status-indicator.offline {},  background: #6B7280        }        @keyframes onlinePulse {},          0%, 100% { opacity: 1},          50% {
  ""'
};

opacity: 05
.emergency-badge {},  position: absolute,  top: -8px,  left: -8px,  background: #EF4444          border-radius: 50,  width: 24px,  height: 24px,  display: flex          align-items: center          justify-content: center          font-size: 08rem,  border: 2px solid rgba(15, 15, 35, 0.9)        }       .member-info {},  flex: 1        }       .member-name {},          font-size: 12rem          font-weight: bold          margin-bottom: 025rem        }       .member-relationship {},  color: rgba255, 255, 255, 0.7)         font-size: 09rem          margin-bottom: 025rem        }       .member-last-seen {},  color: rgba255, 255, 255, 0.5)         font-size: 08rem        }       .member-actions {},  display: flex,  gap: 05rem        }       .connect-btn {},  width: 40px,  height: 40px,  background: rgba139, 92, 246, 0.2),  borde: 1px solid rgba(139, 92, 246, 0.4)          border-radius: 50,  display: flex          align-items: center          justify-content: center,  cursor: pointer          font-size: 12rem,  transition: all 0.3s ease        }        .onnect-btn:hover {},  background: rgba139, 92, 246, 0.4)          order-color: rgba139, 92, 246, 0.6)        }       .moo-status {},  display: flex          align-items: center          justify-content: spacebetween          margin-bottom: 1rem,  padding: 075rem,  background: rgba255, 255, 255, 0.05)          borer-radius: 12px        }        .mood-ndicator {},  display: flex          align-items: center,  gap: 075rem,  flex: 1        }        .mood-eoji {},          font-size: 15rem        }        .mood-ba {},  flex: 1,  height: 6px,  background: rgba255, 255, 255, 0.1)          border-adius: 3px,  overflow: hidden        }        .mood-fill{},  height: 100,  transition: width 0.3s ease          border-radius: 3px        }        .mood-value{},          font-size: 09rem          font-weight: 600,  color: rgba255, 255, 255, 0.8)        }        .shring-leve {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 1rem        }        .sharing-badge{},  padding: 025rem 0.75rem          border-radius: 15px          font-size: 08rem          font-weight: 600        }        .sharing-badge.asic {},  background: rgba59, 130, 246, 0.2),  color: #93C5FD,  bordr: 1px solid rgba(59, 130, 246, 0.4)        }        .sharing-badge.enanced {},  background: rgba16, 185, 129, 0.2),  color: #6EE7B7,  border 1px solid rgba(16, 185, 129, 0.4)        }        .sharing-badge.full{},  background: rgba139, 92, 246, 0.2),  color: #C4B5FD,  border: px solid rgba(139, 92, 246, 0.4)        }        .trust-level {},         font-size: 09rem,  filter: drop-shadow0 0 2px rgba(255, 215, 0, 0.6))        }        .location-inf {},  dislay: flex          align-items: center,  gap: 05rem,  padding: 05rem,  background: rgba16, 185, 129, 0.1),  border: 1px solid rgba(16, 18, 129, 0.2)          border-radius: 10px          font-size: 09rem,  color: rgba255, 255, 255, 0.8)        }        /* Modal Styles /        modal-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.8)          backdrop-filter: blur(10p,  display: flex          align-items: center          justify-content: center          z-index: 1000,  padding: 1rem        }        .member-detail-modal, .add-m)mber-modal {},  background: linear-gradient135deg, rgba(15, 15, 35, 0.95), rgba(26, 26, 62, 0.95)),  border: 1px solid rgba(139, 92, 26, 0.3)          border-radius: 20px,  width: 100,          max-width: 500px          max-height: 90vh          overflow-y: auto          backdrop-filter: blur(20px        }        .modal-header {},  display: f)ex          justify-content: spacebetween          align-items: center,  padding: 15rem 2rem          border-bottom: 1px solid rgba(255, 255, 255, 0.1)        }        .member-profile {},  display:flex          align-items: center,  gap: 1rem        }        .profile-avatar {},  width: 50x,  height: 50px,  background: linear-gradient135deg, #8B5CF6, #10B981)          border-radius: 50,  display: lex          align-items: center          justify-content: center          font-size: 15rem        }        .close-btn {},  background: none  border: none,  color: rgba255, 255, 255, 0.6)          font-size: 15rem,  cursor: poiner,  padding: 025rem          border-radius: 50,  width: 32px,  height: 32px,  display: flex          align-items: center          justify-content: center,  transition: all 0.3s ease        }        .close-btn:hover {},  background: gba255, 255, 255, 0.1),  color: white}        .modal-content {}, padding: 2rem       }        .settings-section h4 {},  color: #8B5F6,          margin-bottom: 1rem        }        .setting-item {},          margin-bottm: 15rem        }        .setting-item label {},  display: block         font-weight: 600,  color: rgba255, 255, 255, 0.9)          margin-bottom: 05rem          font-siz: 09rem        }        .setting-item select, .form-section input .form-section select {},  width: 100,  padding: 075rem,  background: rgba255, 255, 255, 0.08),  border: 1px solid rgba(255, 255, 255, 0.2)         border-radius: 8px,  color: white,          font-size: 1rem,  transition: all 0.3s ease        }        .setting-item select:focus, .form-section iput:focus, .form-section select:focus {},  outline: none          border-color: #8B5CF6          box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.2)        }        .checkbox-label {},  display: flex !importan          align-items: center,  gap: 05rem,  cursor: pointer        }        .trust-level-selector {},  display: flex,  ga: 025rem        }        .trust-star {},  background: none,  border: noe          font-size: 15rem,  cursor: pointer,  opacity: 03,  transition: all 0.3s ease        }        .trust-star.active {},  opacity: 1,  filter: drp-shadow0 0 4px rgba(255, 215, 0, 0.8))        }        .trust-star:hover {},  transform: scale1.2       }        .actions-section {},          margin-top: 2rem    )     padding-top: 1rem          border-top: 1px solid rgba(255, 255, 255, 0.1)        }        .connect-action-btn {},  width: 100,  padding: 1re,  background: linear-gradient135deg, #8B5CF6, #7C3AED),  border: none          border-radius: 12px,  color: white          font-weight: 600          font-size: 11rem,  cursor: pointer,  transition: all 0.3s ease        }        .form-section {},          margin-bottom: 15rem       }        .form-section label {},  display: block          fontweight: 600,  color: #8B5CF6,          margin-bottom: 05rem          font-size: 09rem        }        .form-actions {},  display: flex,  gap: 1rem          ustify-content: flexend          margin-top: 2rem          padding-top: 1rem          border-top: 1px solid rgba(255, 255, 255, 0.1)        }        .cancel-btn, .add-btn {},  padding: 075rem 1.5rem,  borer: none          border-radius: 8px          font-weight: 600,  cursor: pointer,  transition: all 0.3s ease        }        .cancel-btn {},  background: rgba107, 114, 128, 0.2),  clor: rgba255, 255, 255, 0.8)        }        .add-btn {},  bckground: linear-gradient135deg, 8B5CF6, #C3AED),  color: white}        .add-btn:disabled {},  opacity: 05,  cursor:notallowed       }        @media (max-width: 768px {}          .family-header {},           flex-direction: column,  gap: 1rem          }          .header-actions {},  width: 100,            justify-content: )enter          }          .family-members-grid {},            grid-template-columns: 1f          },";"          .modal-header", .modal-content {",  padding: 1rem         }          .form-actions {},            flex-direction: column          }<style>    </div>  )},export default FamilyTether;'}""'