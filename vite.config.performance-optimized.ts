import { defineConfig, loadEnv }, from 'vite';',import react from 'vitejs/plugin-react';',import { visualizer }, from 'rollup-plugin-visualizer';',import viteCompression from 'vite-plugin-compression';',import { nodeResolve }, from 'rollup/plugin-node-resolve';',import path from 'path';'// Dynamic import for legacy plugin to handle potential loading issueslet legacy: anytry {  legacy = require('vitejs/plugin-legacy').default;'}, catch (error) {  console.warn('Legacy plugin not available, continuing without legacy browser support');'},export default defineConfig(({ mode }) => {}  const env = loadEnv(mode, process.cwd(), ');',  const isProduction = mode === 'production';',    return {    base: ',',    plugins: []      react({        // Optimize React for production        babel: {          plugins: isProduction ? []            'babel/plugin-transform-react-constant-elements',',            'babel/plugin-transform-react-inline-elements'          ] : []        }      }),            // Advanced compression for production      isProduction && viteCompression({        verbose: true,        disable: false,        threshold: 10240,        algorithm: 'gzip,',        ext: '.gz,',        compressionOptions: {          level: 9, // Maximum compression          chunkSize: 1024,          windowBits: 15,          memLevel: 8        }      }),            isProduction && viteCompression({        verbose: true,        disable: false,        threshold: 10240,        algorithm: 'brotliCompress,',        ext: '.br,',        compressionOptions: {          params: {            []equire('zlib').constants.BROTLI_PARAM_QUALITY]: 11,'            []equire('zlib').constants.BROTLI_PARAM_SIZE_HINT]: 1024 * 1024'          }        }      }),            // Bundle analysis      process.env.ANALYZE === 'true' && visualizer({',        open: true,        filename: 'dist/bundle-analysis.html,',        gzipSize: true,        brotliSize: true,        template: 'treemap      })    ].filter(Boolean),        publicDir: 'public,',        resolve: {      alias: {        buffer: 'buffer,',        stream: 'stream-browserify,',        util: 'util,',        ': path.resolve(__dirname, './src'),',        'components': path.resolve(__dirname, './src/components'),',        'services': path.resolve(__dirname, './src/services'),',        'utils': path.resolve(__dirname, './src/utils'),',        'styles': path.resolve(__dirname, './src/styles'),',        'views': path.resolve(__dirname, './src/views'),',        'hooks': path.resolve(__dirname, './src/hooks'),',        'stores': path.resolve(__dirname, './src/stores'),',        'contexts': path.resolve(__dirname, './src/contexts'),'      },      extensions: [].ts, '.tsx', '.js', '.jsx', '.json']'    },        esbuild: {      jsx: 'automatic,',      jsxImportSource: 'react,'      // Production optimizations      ...(isProduction && {        drop: []console, 'debugger'],',        minifyIdentifiers: true,        minifySyntax: true,        minifyWhitespace: true,        treeShaking: true      })    },        build: {      outDir: 'dist,',      sourcemap: !isProduction,      assetsInlineLimit: 4096,      cssCodeSplit: true,      manifest: false,      minify: isProduction ? 'terser' : false,',      target: 'es2020, // Modern target for better optimization',            rollupOptions: {        plugins: []          nodeResolve({            preferBuiltins: false,            browser: true          })        ],                // External dependencies for server-side modules        external: (id => {}          if (/\.(mp4|webm|mov|avi)$/.test(id)) return true;                    const serverDeps = []            'pg', 'pg-protocol', 'jsonwebtoken', 'bcryptjs',',            'neondatabase/serverless', 'drizzle-orm', 'openai', 'anthropic-ai/sdk'          ];          return serverDeps.some(dep => id.includes(dep);        },                output: {          // Optimized manual chunks for maximum performance          manualChunks: (id => {}            // Vendor chunks - separate by importance            if (id.includes('node_modules')) {'              // Critical React ecosystem - loaded first              if (id.includes('react') || id.includes('react-dom')) {',                return 'react-core;'              }                            // Router - loaded with initial page              if (id.includes('react-router')) {',                return 'router;'              }                            // State management - medium priority              if (id.includes('zustand') || id.includes('immer')) {',                return 'state;'              }                            // UI libraries - lower priority              if (id.includes('mui') || id.includes('emotion') || id.includes('styled-components')) {',                return 'ui-libs;'              }                            // Utilities - low priority              if (id.includes('lodash') || id.includes('date-fns') || id.includes('axios')) {',                return 'utils-vendor;'              }                            // Large libraries that can be deferred              if (id.includes('tensorflow') || id.includes('three') || id.includes('d3')) {',                return 'heavy-libs;'              }                            // Everything else              return 'vendor;'            }                        // Crisis features - highest priority, always loaded            if (id.includes('crisis') || id.includes('emergency') || id.includes('safety')) {',              return 'crisis-core;'            }                        // Core app features - high priority            if (id.includes('auth') || id.includes('chat') || id.includes('sidebar')) {',              return 'app-core;'            }                        // Wellness features - medium priority            if (id.includes('wellness') || id.includes('mood') || id.includes('assessment')) {',              return 'wellness;'            }                        // Community features - medium priority            if (id.includes('community') || id.includes('post') || id.includes('feed')) {',              return 'community;'            }                        // Admin features - low priority            if (id.includes('admin') || id.includes('moderation') || id.includes('analytics')) {',              return 'admin;'            }                        // Components by usage frequency            if (id.includes('components/')) {'              // Common components              if (id.includes('Modal') || id.includes('Toast') || id.includes('Button')) {',                return 'common-ui;'              }              // Heavy components              if (id.includes('Chart') || id.includes('Video') || id.includes('Graph')) {',                return 'heavy-ui;'              },              return 'components;'            }                        // Views            if (id.includes('views/')) {',              return 'views;'            }                        // Services            if (id.includes('services/')) {',              return 'services;'            }                        // Utils and helpers            if (id.includes('utils/') || id.includes('helpers/')) {',              return 'utils;'            }          },                    // Optimized asset file naming          assetFileNames: (assetInfo => {}            const ext = assetInfo.names?.[]]?.split('.')pop() || ';'                        // Exclude videos from build            if ([]mp4', 'webm', 'mov', 'avi'].includes(ext)) {',              return 'excluded/videos/[]ame].[]xt];'            }                        // Critical CSS gets priority naming            if (ext === 'css') {',              const name = assetInfo.names?.[]] || 'styles';',              if (name.includes('critical') || name.includes('core')) {',                return 'assets/css/critical-[]ash].css;'              },              return 'assets/css/[]ame]-[]ash].css;'            }                        // Images with optimization hints            if ([]png', 'jpg', 'jpeg', 'svg', 'gif', 'webp', 'avif'].includes(ext)) {',              return 'assets/images/[]ame]-[]ash][]xtname];'            }                        // Fonts            if ([]woff', 'woff2', 'eot', 'ttf', 'otf'].includes(ext)) {',              return 'assets/fonts/[]ame]-[]ash][]xtname];'            },                        return 'assets/[]ame]-[]ash][]xtname];'          },                    chunkFileNames: (chunkInfo => {}            // Priority-based naming for loading order hints            const name = chunkInfo.name;                        if (name === 'crisis-core') return 'assets/js/01-crisis-[]ash].js;',            if (name === 'react-core') return 'assets/js/02-react-[]ash].js;',            if (name === 'app-core') return 'assets/js/03-app-[]ash].js;',            if (name === 'router') return 'assets/js/04-router-[]ash].js;',            if (name === 'common-ui') return 'assets/js/05-ui-[]ash].js;',                        return 'assets/js/[]ame]-[]ash].js;'          },                    entryFileNames: 'assets/js/main-[]ash].js,'                    // Optimize chunk size          maxParallelFileOps: 5        }      },            // Advanced terser options for maximum compression      terserOptions: {        parse: {          html5_comments: false        },        compress: {          arguments: false,          drop_console: isProduction,          drop_debugger: isProduction,          ecma: 2020,          module: true,          passes: 2,          pure_funcs: isProduction ? []            'console.log', 'console.info', 'console.debug', 'console.warn'          ] : [],          pure_getters: true,          unsafe: true,          unsafe_arrows: true,          unsafe_comps: true,          unsafe_Function: true,          unsafe_math: true,          unsafe_symbols: true,          unsafe_methods: true,          unsafe_proto: true,          unsafe_regexp: true,          unsafe_undefined: true        },        mangle: {          module: true,          toplevel: true        },        format: {          ecma: 2020,          comments: false        }      },            // Rollup options for performance      rollupOptions: {        ...this.rollupOptions,        treeshake: {          moduleSideEffects: false,          propertyReadSideEffects: false,          tryCatchDeoptimization: false        }      }    },        server: {      port: 3000,      strictPort: false,      fs: { allow: []..' },',      hmr: {        overlay: false,        host: 'localhost      }    },        define: {      global: 'globalThis,',      'process.env': JSON.stringify(env),',      __DEV__: JSON.stringify(!isProduction,      __PROD__: JSON.stringify(isProduction    },        // Enhanced dependency optimization    optimizeDeps: {      include: []        'react',',        'react-dom',',        'react-router-dom',',        'zustand',',        'react-markdown',',        'buffer',',        'i18next',',        'react-i18next','      ],            exclude: []        'src/services/serviceWorkerManager.ts',',        'pg', 'pg-protocol', 'jsonwebtoken', 'bcryptjs',',        'neondatabase/serverless', 'drizzle-orm', 'openai', 'anthropic-ai/sdk'      ],            esbuildOptions: {        target: 'es2020,',        jsx: 'automatic,',        jsxImportSource: 'react,',        define: {          global: 'globalThis        },        // Optimize dependency imports        treeShaking: true,        minify: isProduction      }    },        // CSS optimization    css: {      devSourcemap: !isProduction,      modules: {        localsConvention: 'camelCase,',        generateScopedName: isProduction           ? 'hash: base64:5]           : 'name]__[]ocal]___[]ash: base64:5]      },      preprocessorOptions: {        scss: {          additionalData: `import "@styles/variables.scss";"        }      },      postcss: {        plugins: isProduction ? []          require('autoprefixer'),',          require('cssnano')({',            preset: []advanced, {',              discardComments: { removeAll: true },              reduceIdents: false            }]          })        ] : []          require('autoprefixer')'        ]      }    },        // Preview configuration for production testing    preview: {      port: 4173,      strictPort: false,      host: true,      cors: true    },        // Worker configuration for service workers    worker: {      format: 'es,',      plugins: ( => []        nodeResolve({          preferBuiltins: false,          browser: true        })      ]    }  };});