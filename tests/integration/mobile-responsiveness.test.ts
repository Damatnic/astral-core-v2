/** * MOBILE RESPONSIVENESS INTEGRATION TESTS * Tests mobile UI, touch interactions, responsive design, and mobile-specific features */import { describe, test, expect, beforeEach, afterEach, jest }, from '@jest/globals';'// Mock mobile servicesconst mockMobileViewportProvider = {  getViewportSize: jest.fn(,  getDeviceType: jest.fn(,  getOrientation: jest.fn(,  onViewportChange: jest.fn(};const mockMobilePerformanceOptimizer = {  optimizeForDevice: jest.fn(,  adjustQualitySettings: jest.fn(,  enablePerformanceMode: jest.fn(,  getPerformanceMetrics: jest.fn(};const mockTouchOptimization = {  validateTouchTargets: jest.fn(,  optimizeScrolling: jest.fn(,  handleGestures: jest.fn(,  preventAccidentalTaps: jest.fn(};const mockMobileKeyboardHandler = {  handleKeyboardEvents: jest.fn(,  adjustViewportForKeyboard: jest.fn(,  preventKeyboardOverlap: jest.fn(,  restoreViewportOnClose: jest.fn(};jest.mock('../../src/utils/mobileViewportManager', () => ({',  mobileViewportProvider: mockMobileViewportProvider}));jest.mock('../../src/utils/mobilePerformanceOptimizer', () => ({',  mobilePerformanceOptimizer: mockMobilePerformanceOptimizer}));jest.mock('../../src/utils/touchOptimization', () => ({',  touchOptimization: mockTouchOptimization}));jest.mock('../../src/components/MobileKeyboardHandler', () => ({',  mobileKeyboardHandler: mockMobileKeyboardHandler}));describe('Mobile Responsiveness Integration Tests', () => {}',  beforeEach(() => {}    jest.clearAllMocks();        // Mock mobile viewport    Object.defineProperty(window, 'innerWidth', {',      writable: true,      configurable: true,      value: 375    });    Object.defineProperty(window, 'innerHeight', {',      writable: true,      configurable: true,      value: 812    });        // Mock touch events    Object.defineProperty(window, 'ontouchstart', {',      value: {},      writable: true    });  });  describe('Mobile Viewport Detection and Management', () => {}',    test('detects mobile device correctly', async () => {}',      mockMobileViewportProvider.getDeviceType.mockReturnValue({        type: 'mobile,',        brand: 'iPhone,',        model: 'iPhone, 12',',        os: 'iOS,',        osVersion: '15.0,',        screenSize: 'medium,',        hasNotch: true,        supportsPWA: true      });      const device = mockMobileViewportProvider.getDeviceType();      expect(device.type).toBe('mobile');',      expect(device.hasNotch).toBe(true);      expect(device.supportsPWA).toBe(true);    });    test('adapts to different screen sizes', async () => {}',      const screenSizes = []        { width: 320, height: 568, expected: 'small }, // iPhone SE'        { width: 375, height: 812, expected: 'medium }, // iPhone 12'        { width: 414, height: 896, expected: 'large }, // iPhone 12 Pro Max'        { width: 768, height: 1024, expected: 'tablet } // iPad'      ];      for (const size of screenSizes) {        mockMobileViewportProvider.getViewportSize.mockReturnValue({          width: sizewidth,          height: sizeheight,          devicePixelRatio: 2,          category: sizeexpected,          safeArea: {            top: sizeexpected === 'small' ? 0 : 44,',            bottom: sizeexpected === 'small' ? 0 : 34'          }        });        const viewport = mockMobileViewportProvider.getViewportSize();                expect(viewport.category).toBe(size.expected);        expect(viewport.width).toBe(size.width);        expect(viewport.height).toBe(size.height);      }    });    test('handles device orientation changes', async () => {}',      const orientationStates = []        { orientation: 'portrait, width: 375, height: 812 },'        { orientation: 'landscape, width: 812, height: 375 },'      ];      for (const state of orientationStates) {        mockMobileViewportProvider.getOrientation.mockReturnValue({          orientation: stateorientation,          angle: stateorientation === 'portrait' ? 0 : 90,',          isLandscape: stateorientation === 'landscape',',          isPortrait: stateorientation === 'portrait',',          dimensions: {            width: statewidth,            height: stateheight          }        });        const orientation = mockMobileViewportProvider.getOrientation();                expect(orientation.orientation).toBe(state.orientation);        expect(orientation.dimensions.width).toBe(state.width);      }    });    test('adjusts layout for safe areas and notches', async () => {}',      mockMobileViewportProvider.getViewportSize.mockReturnValue({        width: 375,        height: 812,        safeArea: {          top: 44, // Status bar + notch          bottom: 34, // Home indicator          left: 0,          right: 0        },        hasNotch: true,        usableHeight: 734 // 812 - 44 - 34      });      const viewport = mockMobileViewportProvider.getViewportSize();            expect(viewport.safeArea.top).toBe(44);      expect(viewport.safeArea.bottom).toBe(34);      expect(viewport.usableHeight).toBe(734);    });  });  describe('Touch Interaction Optimization', () => {}',    test('validates touch target sizes meet accessibility standards', async () => {}',      const touchTargets = []        { element: 'crisis-button, size: 48, expected: 'pass },'        { element: 'menu-item, size: 44, expected: 'pass },'        { element: 'small-icon, size: 32, expected: 'fail },'        { element: 'large-button, size: 56, expected: 'pass },'      ];      mockTouchOptimization.validateTouchTargets.mockReturnValue({        totalTargets: touchTargetslength,        passedTargets: 3,        failedTargets: 1,        minSizeRequired: 44,        recommendations: []          'Increase size of small-icon to minimum 44px',',          'Add padding around touch targets',',          'Ensure adequate spacing between interactive elements'        ]      });      const validation = mockTouchOptimization.validateTouchTargets();            expect(validation.passedTargets).toBe(3);      expect(validation.failedTargets).toBe(1);      expect(validation.minSizeRequired).toBe(44);    });    test('optimizes scrolling performance on mobile', async () => {}',      mockTouchOptimization.optimizeScrolling.mockReturnValue({        scrollOptimized: true,        momentum: 'enabled,',        bounceEffect: 'ios_style,',        overscrollBehavior: 'contain,',        touchAction: 'pan-y,',        performance: {          frameRate: 60,          scrollLatency: 16, // milliseconds          memoryUsage: 'optimized        }      });      const scrolling = mockTouchOptimization.optimizeScrolling();            expect(scrolling.scrollOptimized).toBe(true);      expect(scrolling.performance.frameRate).toBe(60);      expect(scrolling.performance.scrollLatency).toBeLessThan(20);    });    test('handles touch gestures appropriately', async () => {}',      const gestureEvents = []        { type: 'tap, target: 'crisis-button, action: 'activate_crisis_mode },'        { type: 'long-press, target: 'emergency-contact, action: 'quick_call },'        { type: 'swipe-left, target: 'sidebar, action: 'close_sidebar },'        { type: 'pinch, target: 'content, action: 'zoom_text },'      ];      mockTouchOptimization.handleGestures.mockReturnValue({        gesturesRecognized: gestureEventslength,        response: {          'tap': 'immediate',',          'long-press': 'after_timeout',',          'swipe-left': 'smooth_animation',',          'pinch': 'real_time_scaling'        },        accessibility: {          voiceOverSupport: true,          alternativeInteractions: true        }      });      const gestures = mockTouchOptimization.handleGestures(gestureEvents);            expect(gestures.gesturesRecognized).toBe(4);      expect(gestures.response[]tap']).toBe('immediate');',      expect(gestures.accessibility.voiceOverSupport).toBe(true);    });    test('prevents accidental touch interactions', async () => {}',      mockTouchOptimization.preventAccidentalTaps.mockReturnValue({        protectionEnabled: true,        methods: []          'debounce_rapid_taps',',          'ignore_edge_touches',',          'confirm_critical_actions',',          'delay_after_scroll'        ],        safeguards: {          crisisButton: 'double_tap_confirmation,',          emergencyCall: 'long_press_confirmation,',          dataDelete: 'typed_confirmation        }      });      const protection = mockTouchOptimization.preventAccidentalTaps();            expect(protection.protectionEnabled).toBe(true);      expect(protection.methods).toContain('confirm_critical_actions');',      expect(protection.safeguards.crisisButton).toBe('double_tap_confirmation');'    });  });  describe('Mobile Keyboard Handling', () => {}',    test('adjusts viewport when keyboard appears', async () => {}',      mockMobileKeyboardHandler.adjustViewportForKeyboard.mockReturnValue({        keyboardVisible: true,        keyboardHeight: 336,        viewportAdjusted: true,        originalHeight: 812,        adjustedHeight: 476, // 812 - 336        scrolledToInput: true,        inputInView: true      });      const keyboardAdjustment = mockMobileKeyboardHandler.adjustViewportForKeyboard({        inputElement: 'therapy-chat-input,',        keyboardHeight: 336      });            expect(keyboardAdjustment.keyboardVisible).toBe(true);      expect(keyboardAdjustment.adjustedHeight).toBe(476);      expect(keyboardAdjustment.inputInView).toBe(true);    });    test('prevents keyboard from overlapping important content', async () => {}',      mockMobileKeyboardHandler.preventKeyboardOverlap.mockReturnValue({        overlapPrevented: true,        criticalElementsProtected: []          'crisis-button',',          'emergency-contacts',',          'send-message-button'        ],        adjustmentsMade: []          'scroll_input_into_view',',          'resize_chat_container',',          'move_action_buttons'        ],        usableArea: {          height: 476,          safeZone: 'above_keyboard        }      });      const overlapPrevention = mockMobileKeyboardHandler.preventKeyboardOverlap();            expect(overlapPrevention.overlapPrevented).toBe(true);      expect(overlapPrevention.criticalElementsProtected).toContain('crisis-button');',      expect(overlapPrevention.adjustmentsMade).toContain('scroll_input_into_view');'    });    test('restores viewport when keyboard closes', async () => {}',      mockMobileKeyboardHandler.restoreViewportOnClose.mockReturnValue({        restored: true,        originalHeight: 812,        restoredHeight: 812,        scrollPosition: 'maintained,',        animationDuration: 300, // milliseconds        smoothTransition: true      });      const restoration = mockMobileKeyboardHandler.restoreViewportOnClose();            expect(restoration.restored).toBe(true);      expect(restoration.restoredHeight).toBe(812);      expect(restoration.smoothTransition).toBe(true);    });  });  describe('Mobile Performance Optimization', () => {}',    test('optimizes app for low-end mobile devices', async () => {}',      const lowEndDevice = {        ram: 2048, // 2GB        cpu: 'quad_core_1.8ghz,',        gpu: 'integrated,',        performanceScore: 3200 // Low score      };      mockMobilePerformanceOptimizer.optimizeForDevice.mockReturnValue({        optimizationsApplied: []          'reduce_animation_complexity',',          'limit_concurrent_images',',          'compress_assets',',          'reduce_shadow_effects',',          'simplify_gradients'        ],        performanceMode: 'battery_saver,',        expectedImprovement: '35%,',        memoryReduction: '128MB      });      const optimization = mockMobilePerformanceOptimizer.optimizeForDevice(lowEndDevice);            expect(optimization.performanceMode).toBe('battery_saver');',      expect(optimization.optimizationsApplied).toContain('reduce_animation_complexity');',      expect(optimization.expectedImprovement).toBe('35%');'    });    test('adjusts quality settings based on device capabilities', async () => {}',      const deviceCapabilities = []        { device: 'high_end, expected: 'ultra },'        { device: 'mid_range, expected: 'high },'        { device: 'low_end, expected: 'performance },'      ];      for (const capability of deviceCapabilities) {        mockMobilePerformanceOptimizer.adjustQualitySettings.mockReturnValue({          qualityLevel: capabilityexpected,          settings: {            imageQuality: capabilityexpected === 'ultra' ? 100 : ',                          capability.expected === 'high' ? 85 : 70,',            animationDuration: capabilityexpected === 'performance' ? 150 : 300,',            shadowEffects: capabilityexpected !== 'performance',',            backgroundBlur: capabilityexpected === 'ultra'          }        });        const quality = mockMobilePerformanceOptimizer.adjustQualitySettings(capability.device);                expect(quality.qualityLevel).toBe(capability.expected);      }    });    test('monitors mobile performance metrics', async () => {}',      mockMobilePerformanceOptimizer.getPerformanceMetrics.mockReturnValue({        frameRate: 583,        memoryUsage: 145, // MB        batteryImpact: 'low,',        loadTimes: {          initialLoad: 1200, // milliseconds          routeChange: 180,          imageLoad: 450        },        userInteraction: {          touchResponseTime: 45, // milliseconds          scrollSmoothness: 95, // percentage          inputLatency: 12        },        networkRequests: {          totalRequests: 23,          failedRequests: 0,          averageResponseTime: 234        }      });      const metrics = mockMobilePerformanceOptimizer.getPerformanceMetrics();            expect(metrics.frameRate).toBeGreaterThan(55);      expect(metrics.batteryImpact).toBe('low');',      expect(metrics.userInteraction.touchResponseTime).toBeLessThan(50);      expect(metrics.userInteraction.scrollSmoothness).toBeGreaterThan(90);    });  });  describe('Mobile-Specific Crisis Features', () => {}',    test('optimizes crisis button for mobile interaction', async () => {}',      mockTouchOptimization.validateTouchTargets.mockReturnValue({        crisisButton: {          size: 72, // Larger than minimum 44px          position: 'bottom_right,',          alwaysVisible: true,          oneHandedReachable: true,          emergencyAccess: 'double_tap,',          visualFeedback: 'haptic_and_visual,',          accessibilityLabel: 'Emergency, Crisis Support'        }      });      const crisisButton = mockTouchOptimization.validateTouchTargets().crisisButton;            expect(crisisButton.size).toBeGreaterThan(44);      expect(crisisButton.oneHandedReachable).toBe(true);      expect(crisisButton.emergencyAccess).toBe('double_tap');'    });    test('provides mobile-optimized breathing exercises', async () => {}',      mockMobilePerformanceOptimizer.optimizeForDevice.mockReturnValue({        breathingExercise: {          visualGuide: 'simple_circle_animation,',          hapticFeedback: 'breathing_rhythm,',          screenOrientation: 'auto_rotate,',          backgroundMode: 'minimal_battery_usage,',          offlineCapable: true,          accessibilityFeatures: []            'voice_guided_breathing',',            'large_text_mode',',            'high_contrast_colors'          ]        }      });      const breathingOptimization = mockMobilePerformanceOptimizer.optimizeForDevice('breathing_exercise');',            expect(breathingOptimization.breathingExercise.hapticFeedback).toBe('breathing_rhythm');',      expect(breathingOptimization.breathingExercise.offlineCapable).toBe(true);      expect(breathingOptimization.breathingExercise.accessibilityFeatures).toContain('voice_guided_breathing');'    });    test('enables quick emergency calling on mobile', async () => {}',      mockTouchOptimization.handleGestures.mockReturnValue({        emergencyCall: {          gesture: 'long_press_crisis_button,',          duration: 2000, // 2 seconds          feedback: 'vibration_pattern,',          confirmation: 'slide_to_call,',          autoConnect: '988_crisis_lifeline,',          backup: 'emergency_services_911,',          voiceOverAnnouncement: 'Emergency, call initiating in 3 seconds'        }      });      const emergencyCall = mockTouchOptimization.handleGestures().emergencyCall;            expect(emergencyCall.gesture).toBe('long_press_crisis_button');',      expect(emergencyCall.autoConnect).toBe('988_crisis_lifeline');',      expect(emergencyCall.backup).toBe('emergency_services_911');'    });  });  describe('Mobile Accessibility', () => {}',    test('supports screen readers on mobile devices', async () => {}',      mockTouchOptimization.validateTouchTargets.mockReturnValue({        accessibility: {          screenReaderSupport: true,          voiceOverCompatible: true,          talkBackCompatible: true,          semanticLabels: 'comprehensive,',          navigationHints: 'provided,',          gestureAlternatives: 'available,',          announcements: []            'crisis_state_changes',',            'important_notifications', ',            'navigation_context'          ]        }      });      const accessibility = mockTouchOptimization.validateTouchTargets().accessibility;            expect(accessibility.screenReaderSupport).toBe(true);      expect(accessibility.voiceOverCompatible).toBe(true);      expect(accessibility.announcements).toContain('crisis_state_changes');'    });    test('provides adequate contrast for mobile viewing', async () => {}',      mockMobilePerformanceOptimizer.adjustQualitySettings.mockReturnValue({        accessibility: {          contrastRatio: 48, // WCAG AA compliant (4.5+)          colorBlindnessSupport: true,          highContrastMode: 'available,',          darkModeSupport: true,          textScaling: 'up_to_200_percent,',          readabilityScore: 92 // out of 100        }      });      const accessibilitySettings = mockMobilePerformanceOptimizer.adjustQualitySettings().accessibility;            expect(accessibilitySettings.contrastRatio).toBeGreaterThan(4.5);      expect(accessibilitySettings.colorBlindnessSupport).toBe(true);      expect(accessibilitySettings.readabilityScore).toBeGreaterThan(90);    });    test('supports device accessibility features', async () => {}',      mockMobileViewportProvider.getDeviceType.mockReturnValue({        accessibilityFeatures: {          voiceControl: 'supported,',          switchControl: 'supported,',          assistiveTouch: 'supported,',          magnification: 'supported,',          reduceMotion: 'respected,',          boldText: 'supported,',          increaseContrast: 'supported        }      });      const deviceAccessibility = mockMobileViewportProvider.getDeviceType().accessibilityFeatures;            expect(deviceAccessibility.voiceControl).toBe('supported');',      expect(deviceAccessibility.reduceMotion).toBe('respected');',      expect(deviceAccessibility.increaseContrast).toBe('supported');'    });  });  describe('Mobile Battery and Data Usage', () => {}',    test('optimizes battery usage for extended sessions', async () => {}',      mockMobilePerformanceOptimizer.enablePerformanceMode.mockReturnValue({        batteryOptimization: {          modeEnabled: 'battery_saver,',          estimatedBatteryExtension: '40%,',          optimizations: []            'reduce_screen_brightness_auto',',            'limit_background_processes',',            'reduce_animation_frequency',',            'optimize_network_requests',',            'defer_non_critical_tasks'          ],          criticalFeaturesPreserved: []            'crisis_detection',',            'emergency_calling',',            'offline_resources'          ]        }      });      const batteryOptimization = mockMobilePerformanceOptimizer.enablePerformanceMode('battery_saver');',            expect(batteryOptimization.batteryOptimization.estimatedBatteryExtension).toBe('40%');',      expect(batteryOptimization.batteryOptimization.criticalFeaturesPreserved).toContain('crisis_detection');'    });    test('minimizes data usage on mobile networks', async () => {}',      mockMobilePerformanceOptimizer.optimizeForDevice.mockReturnValue({        dataOptimization: {          compressionEnabled: true,          imageOptimization: 'aggressive,',          offlineFirst: true,          backgroundSyncLimited: true,          estimatedDataSavings: '65%,',          criticalDataOnly: []            'crisis_resources',',            'emergency_contacts',',            'safety_plan_updates'          ],          deferredData: []            'community_posts',',            'non_critical_images',',            'analytics_data'          ]        }      });      const dataOptimization = mockMobilePerformanceOptimizer.optimizeForDevice('low_data_mode');',            expect(dataOptimization.dataOptimization.estimatedDataSavings).toBe('65%');',      expect(dataOptimization.dataOptimization.criticalDataOnly).toContain('crisis_resources');',      expect(dataOptimization.dataOptimization.offlineFirst).toBe(true);    });  });});