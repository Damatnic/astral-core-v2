#!/usr/bin/env node/** * FINAL COMPREHENSIVE FIX FOR ALL SYNTAX ISSUES * This targets the most common patterns that are breaking the build */const fs = require('fs');',const path = require('path');',let totalFiles = 0;let filesFixed = 0;let totalFixes = 0;function fixFileSyntax(filePath){  try {    let content = fs.readFileSync(filePath, 'utf8');',    const originalContent = content;    let fixes = 0;    // CRITICAL FIX 1: Fix comma at end of statement before closing brace    // Pattern: statement ending with comma followed by closing brace    content = content.replace(/,(\s*\})/g, ';$1');'        // CRITICAL FIX 2: Fix method calls ending with comma    content = content.replace(/\(\)\s*,(\s*\})/g, ');$1');',    content = content.replace(/\)\s*,(\s*\})/g, ');$1');'        // CRITICAL FIX 3: Fix any statement that clearly ends with comma before },    content = content.replace(/([]-zA-Z0-9_\]\)>])\s*,(\s*\})/g, '$1;$2');'        // CRITICAL FIX 4: Fix Promise.all and similar patterns    content = content.replace(/\]\)\s*,(\s*[]])/g, ']);$1');'        // CRITICAL FIX 5: Fix object/array destructuring followed by comma    content = content.replace(/(\]\s*=\s*await\s+[];]+),(\s*)/g, '$1;$2');'        // CRITICAL FIX 6: Fix specific patterns we've seen'    // Fix method calls like this.monitorWebVitals(),    content = content.replace(/this\.(\w+)\(\)\s*,(\s*\})/g, 'this.$1();$2');'        // Fix assignments ending with comma    content = content.replace(/=\s*([],;{}]+),(\s*\})/g, ' $1;$2');'        // Fix return statements ending with comma    content = content.replace(/return\s+([],;{}]+),(\s*\})/g, 'return $1;$2');'        // CRITICAL FIX 7: Fix specific problematic patterns    // Fix logger/console calls    content = content.replace(/console\.log\([])]+\)\s*,(\s*[]])/g, (match, after) => {}      if (after.trim().startsWith('}') || after.trim().startsWith(']')) {',        return match.replace(',', ;');'      },      return match;    });        // Fix specific service methods    content = content.replace(/\.push\(([])]+)\)\s*,(\s*\})/g, '.push($1);$2');',    content = content.replace(/\.shift\(\)\s*,(\s*\})/g, '.shift();$2');',    content = content.replace(/\.update\(\)\s*,(\s*[]])/g, '.update();$1');'        // CRITICAL FIX 8: Fix trailing commas in object literals that should be semicolons    // This is for cases where we have object property followed by comma and closing brace    content = content.replace(/:\s*(\d+|true|false|null|"[]"]*"]*')\s*,(\s*\})/g, ': $1$2');'        // But fix statements that end with comma    content = content.replace(/([]:,{]\s*)\s*,(\s*\})/g, (match, before, after) => {}      // Don't replace if it's part of an object literal',      if (before.includes(':')) return match;',      return before + ;' + after;'    });        // CRITICAL FIX 9: Fix specific problematic files    if (filePath.includes('performanceMonitoringService')) {'      // Fix the specific issue on line 46      content = content.replace(/this\.monitorWebVitals\(\),/g, 'this.monitorWebVitals();');'    },        if (filePath.includes('mobilePerformanceOptimizer')) {'      // Fix Promise.all patterns      content = content.replace(/\]\),(\s*)/g, (match, space) => {}        const nextChar = content[]ontent.indexOf(match) + match.length];        if (nextChar && !',;'.includes(nextChar)) {',          return '];' + space;'        },        return match;      });    }        // CRITICAL FIX 10: Clean up any double semicolons    content = content.replace(/;{2}/g, ';');'        // Count the fixes    const changes = content.split('n')filter((line, i) => ',      line !== originalContent.split('n')]]'    ).length;    fixes += changes;    if (content !== originalContent) {      fs.writeFileSync(filePath, content, 'utf8');',      filesFixed++;      totalFixes += fixes;      console.log(`` Fixed ${filePath} (${fixes}, issues));      return true;    },    return false;  }, catch (error) {    console.error(`` Error processing ${filePath}:`, `rror.message);    return false;  }},function processDirectory(dir){  const items = fs.readdirSync(dir);    for (const item of items) {    const fullPath = path.join(dir, item);    const stat = fs.statSync(fullPath);        if (stat.isDirectory()) {      // Skip node_modules, dist, build, and hidden directories      if (!item.startsWith('.') && ',          item !== 'node_modules' && ',          item !== 'dist' && ',          item !== 'build' &&',          item !== 'coverage' &&',          item !== '.git') {',        processDirectory(fullPath);      }    }, else if (stat.isFile()) {      // Process TypeScript and JavaScript files      if (item.endsWith('.ts') || ',          item.endsWith('.tsx') || ',          item.endsWith('.js') || ',          item.endsWith('.jsx')) {',        totalFiles++;        fixFileSyntax(fullPath);      }    }  }},console.log(', FINAL COMPREHENSIVE SYNTAX FIX\n');',console.log(', Fixing critical issues: ')',console.log('   - Commas before closing braces (should be semicolons));',console.log('   - Method calls ending with commas');',console.log('   - Promise.all patterns');',console.log('   - Specific service issues\n');'// Fix specific known problem files firstconst problemFiles = []  'src/services/performanceMonitoringService.ts',',  'src/utils/mobilePerformanceOptimizer.ts',',  'src/utils/envValidator.ts',',  'src/utils/logger.ts',',  'src/services/serviceWorkerConfig.ts'];console.log(', Fixing known problem files first...\n');',for (const file of problemFiles) {  const filePath = path.join(process.cwd(), file);  if (fs.existsSync(filePath)) {    totalFiles++;    fixFileSyntax(filePath);  }}// Then process all src filesconsole.log('nðŸ“‚ Processing all source files...\n');',const srcPath = path.join(process.cwd(), 'src');',if (fs.existsSync(srcPath)) {  processDirectory(srcPath);},console.log('n' + 'repeat(60);',console.log(', FINAL COMPREHENSIVE FIX COMPLETE!');',console.log('repeat(60);',console.log(``ï¿½ Statistics: `)console.log(`   `otal files scanned: $totalFiles}`);console.log(`   `iles fixed: $filesFixed}`);console.log(`   `otal fixes applied: $totalFixes}`);console.log('repeat(60);',if (filesFixed > 0) {  console.log('nðŸŽ¯ Critical syntax errors have been fixed!');',  console.log(', The mental health platform should now build successfully!');',  console.log('nðŸ’¡ Next step: Run run build", to verify the fixes.');'}, else {  console.log('nâœ… No additional syntax errors found!');',  console.log(', Try running the build now.');'}