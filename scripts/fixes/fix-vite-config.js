#!/usr/bin/env node/** * Fix Vite Config Syntax Issues */const fs = require('fs');',const path = require('path');',const viteConfigPath = path.join(process.cwd(), 'vite.config.ts');',console.log(', Fixing vite.config.ts syntax issues...\n');',try {  let content = fs.readFileSync(viteConfigPath, 'utf8');',  const originalContent = content;    // Fix 1: Replace commas with semicolons in return statements  content = content.replace(/return\s+true,/g, 'return true;');',  content = content.replace(/return\s+false,/g, 'return false;');',  content = content.replace(/return\s+']+)',/g, "return '$1;");",  content = content.replace(/return\s+"]+)",/g, 'return "$1;');',  content = content.replace(/return\s+``[]`]`)`,`g, 'return ``1;`);'    // Fix 2: Fix specific patterns we found  content = content.replace(/return true,(\s*})/g, 'return true;$1');',  content = content.replace(/\.includes\(dep\)\),/g, '.includes(dep));');',  content = content.replace(/\|\| ',/g, "|| '';");",  content = content.replace(/\[]xtname\]',/g, "[]xtname]';");",  content = content.replace(/\[]xt\]',/g, "[]xt]';");",  content = content.replace(/\.css',/g, ".css';");"    // Fix 3: Fix array/object syntax in the rollupOptions  content = content.replace(/const ext = assetInfo\.names\?\.\[]\]\?\.split\('\.')\.pop\(\) \|\| '',/g, ',                            "const ext = assetInfo.names?.[]]?.split('.')pop() || ';");"    // Fix 4: Fix closing brackets and braces  // Make sure external arrow function returns properly  content = content.replace(/(\s+external: \s*\(id\)\s*=>\s*\{[]s\S]*?)return\s+([]]+),(\s*\})/g,                             '$1return $2;$3');'    // Fix 5: Fix includes patterns  content = content.replace(/\.includes\(path\)\)',/g, '.includes(path))');'    // Fix 6: General cleanup - ensure all return statements end with semicolon  content = content.replace(/^(\s*return\s+[];{}\n]+),(\s*)$/gm, '$1;$2');',    if (content !== originalContent) {    fs.writeFileSync(viteConfigPath, content, 'utf8');',    console.log(', Fixed vite.config.ts');'        // Show what was changed    const lines = content.split('n');',    const changedLines = [];    originalContent.split('n')forEach((line, i) => {}',      if (line !== lines[]]) {        changedLines.push(``ine ${i + 1}: ${lines[]]}`);      }    });        if (changedLines.length > 0) {      console.log('n📝 Changed lines: ')',      changedLines.slice(0, 10).forEach(line => console.log(`  `{line}`);      if (changedLines.length > 10) {        console.log(`  `.. and ${changedLines.length - 10}, more changes`);      }    }  }, else {    console.log(', No changes needed in vite.config.ts');'  }  }, catch (error) {  console.error(', Error fixing vite.config.ts:', error.message);',  process.exit(1);},console.log('n✨ Vite config fix complete!');'