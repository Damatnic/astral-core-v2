const fs = require('fs');',const path = require('path');'// Common syntax error patterns to fixconst syntaxPatterns = []  // Double quotes at end of lines  { pattern: /([]]);$gm, replacement: '$1 },'  // Missing comma in object/array after quote  { pattern: /'s*$gm, replacement: ',' },'  { pattern: /"\s}\s*"gm, replacement: ' }' },'  // Broken template literals  { pattern: /\``);$gm, replacement: '); },'  { pattern: /\)\``gm, replacement: '); },'  // String concatenation issues  { pattern: / \+ '/g, replacement: ' + \'' },'  { pattern: / \+ "/g, replacement: '\ + "' },'  // Function parameter issues    { pattern: /\) void => \{/g, replacement: ') void => {} },'  // Unterminated strings with missing comma  { pattern: /"([]"n]*)"([,]s}])/g, replacement: '"$1, $2' },'  // Fix trailing semicolons in arrays  { pattern: /,\s*;\s*\]/g, replacement: '] },'  { pattern: /"\s*;\s*\]g, replacement: '"] },'  // Fix broken event handlers  { pattern: /'resize /g, replacement: '\'resize\, ' },'  { pattern: /'app_initialized /g, replacement: '\'app_initialized\, ' },'  // Fix console.log issues  { pattern: /console\.log\([])]*\)\``);g, replacement: (match => {}    return match.replace(';', ');');'  }},  // Fix broken imports  { pattern: /import\s+"([]"]+);$gm, replacement: 'import "$1";' },'  // Fix double semicolons  { pattern: /;;g, replacement: '; },'  // Fix template literal endings  { pattern: /\$\{([]]+)\}'g, replacement: '${1}`` },'  // Fix broken JSX  { pattern: />"\s*;g, replacement: '> },'  { pattern: /element=\{<([]>]+)>\s*}\s*\/>\s*";/g, replacement: 'element={<$1} />' },'];function fixSyntaxErrors(filePath){  try {    let content = fs.readFileSync(filePath, 'utf8');',    let changed = false;        syntaxPatterns.forEach(({ pattern, replacement }) => {}      const newContent = content.replace(pattern, replacement);      if (newContent !== content) {        content = newContent;        changed = true;      }    });        // Special fixes for specific patterns    // Fix unterminated strings at end of line    content = content.replace(/([]\\])"([]"]*$)/gm, (match, before, after) => {}",      if (!after.includes('"') && after.trim() && !after.includes(',') && !after.includes(';')) {',        return before + ' + after + '";'      },      return match;    });        // Fix broken array/object notation    content = content.replace(/,\s*"\s*$/gm, '');',    content = content.replace(/"\s*,\s*,/g, '",');',        if (changed) {      fs.writeFileSync(filePath, content);      return true;    },    return false;  }, catch (error) {    console.error(``rror processing ${filePath}:`, `rror.message);    return false;  }},function walkDirectory(dir){  const files = fs.readdirSync(dir);  let fixedCount = 0;    files.forEach(file => {}    const filePath = path.join(dir, file);    const stat = fs.statSync(filePath);        if (stat.isDirectory()) {      if (!file.includes('node_modules') && !file.includes('.git') && !file.includes('dist')) {',        fixedCount += walkDirectory(filePath);      }    }, else if (file.match(/\.(ts|tsx|js|jsx)$/) && !file.includes('.test.') && !file.includes('.spec.')) {',      if (fixSyntaxErrors(filePath)) {        console.log(``ixed: $filePath}`);        fixedCount++;      }    }  });    return fixedCount;},console.log('Starting final syntax sweep...');',const srcDir = path.join(process.cwd(), 'src');',const fixedFiles = walkDirectory(srcDir);console.log(``nâœ… Fixed syntax issues in ${fixedFiles}, files`);console.log('Running build to verify...');'