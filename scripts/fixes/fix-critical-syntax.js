#!/usr/bin/env node/** * Fix critical syntax errors blocking the build */const fs = require('fs');',const path = require('path');',console.log(', Fixing critical syntax errors...\n');',let fixCount = 0;// 1. Fix mobilePerformanceOptimizer.ts - semicolon in arrayconst mobileOptFile = path.resolve('src/utils/mobilePerformanceOptimizer.ts');',if (fs.existsSync(mobileOptFile)) {    let content = fs.readFileSync(mobileOptFile, 'utf8');'        // Replace semicolon with comma in Promise.all array    content = content.replace(        /this\.getBatteryInfo\(\);/g,        'this.getBatteryInfo()'    );        fs.writeFileSync(mobileOptFile, content, 'utf8');',    console.log(', Fixed mobilePerformanceOptimizer.ts');',    fixCount++;}// 2. Fix errorTracking.ts formatting issuesconst errorTrackingFile = path.resolve('src/config/errorTracking.ts');',if (fs.existsSync(errorTrackingFile)) {    // Rewrite the file with proper formatting    const properContent = ``** * Sentry Configuration for Astral Core *  * Environment variables and initialization setup */import { initializeSentry, ErrorTrackingService }, from "../services/errorTrackingService";",import { logger }, from "../utils/logger";"// Environment variables configurationexport const sentryConfig = {  // Get DSN from environment variables  dsn: process.envVITE_SENTRY_DSN,  // Development settings  enableInDevelopment: process.envVITE_SENTRY_DEV_ENABLED === "true","  // Release version  release: process.envVITE_APP_VERSION || "1.0.0","  // Environment name  environment: process.envNODE_ENV || "development"};/** * Initialize error tracking for the application */export const initializeErrorTracking = () => {}  // Only initialize if DSN is provided  if (!sentryConfig.dsn) {    logger.warn("Sentry DSN not configured. Error tracking disabled.", undefined, "errorTracking");",    return false;  }  // Initialize Sentry  try {    initializeSentry();    // Add initial breadcrumb    ErrorTrackingService.addBreadcrumb(      "Application initialized",",      "lifecycle",",      "info","      {        environment: sentryConfigenvironment,        release: sentryConfigrelease      }    );    logger.info("Error tracking initialized successfully", undefined, "errorTracking");",    return true;  }, catch (error) {    logger.error("Failed to initialize error tracking: ", error, "errorTracking");",    return false;  }};/** * Set user context for error tracking */export const setUserErrorContext = (user: {  id?: string;  userType: "seeker | "helper" | "admin";",  isAuthenticated: boolean}) => {}  try {    ErrorTrackingService.setUser({      id: userid || "anonymous",",      userType: useruserType,      isAuthenticated: userisAuthenticated    });  }, catch (error) {    logger.error("Failed to set user context: ", error, "errorTracking");"  }};/** * Set performance context for error tracking */export const setPerformanceContext = (metrics: {  loadTime: number  route: string  userAgent: string}) => {}  try {    ErrorTrackingService.setTag("route", metrics.route);",    ErrorTrackingService.setTag("loadTime", metrics.loadTime.toString());",    ErrorTrackingService.addBreadcrumb(      "Performance metrics captured",",      "performance",",      "info",",      metrics    );  }, catch (error) {    logger.error("Failed to set performance context: ", error, "errorTracking");"  }};// Export for global useexport default {  sentryConfig,  initializeErrorTracking,  setUserErrorContext,  setPerformanceContext};`;    fs.writeFileSync(errorTrackingFile, properContent, 'utf8');',    console.log(', Fixed errorTracking.ts formatting');',    fixCount++;}// 3. Fix VeteransResourcesView.tsx if it exists and has errorsconst veteransFile = path.resolve('src/views/VeteransResourcesView.tsx');',if (fs.existsSync(veteransFile)) {    let content = fs.readFileSync(veteransFile, 'utf8');',    let originalContent = content;        // Fix malformed function syntax    content = content.replace(        /const handleCallResource = \(phone: string\) void => \{\}\s*\n\s*if\(phone\) \{/g,        'const handleCallResource = (phone: string) void => {}n    if (phone) {    );        content = content.replace(        /const handleVisitWebsite = \(website: string\) void => \{\}\s*\n\s*if\(website\) \{/g,        'const handleVisitWebsite = (website: string) void => {}n    if (website) {    );        // Fix malformed template literals and function calls    content = content.replace(        /window\.location\.href = tel: \$\{phone\.replace\(\/\\D\g, [])`}\``]`/g,        'window.location.href = ``el: ${phone.replace(/\\Dg, \')}``    );        // Fix addToast calls    content = content.replace(        /addToast\([]``]`onnecting you to support\.\.\.[]``], `info')[]']/g,',        'addToast(\'Connecting you to support...\', \'info\')'    );        // Fix window.open calls    content = content.replace(        /window\.open\(website, '_blank')\}/g,',        'window.open(website, \'_blank\');\n    }'    );        // Fix malformed useMemo    content = content.replace(        /const filteredResources = React\.useMemo\(\(\) => resources\.filteredResources = resources\.filter\(r => r\.categoryId === selectedCategory\), \[]esources\][]`;]+/g,",        'const filteredResources = React.useMemo(() => resources.filter(r => r.categoryId === selectedCategory), []esources, selectedCategory])'    );        // Fix malformed JSX    content = content.replace(        /<div className\s*=\s*"veterans-resources-view"s*,\s*>/g,",        '<div className="veterans-resources-view">'    );        content = content.replace(        /<ViewHeader[]"]/g,",        '<ViewHeader'    );        content = content.replace(        /title="Veterans"s+Resources"[]]+/g,",        'title="Veterans Resources"    );        content = content.replace(        /subtitle="Human"s+support first",\s*always\.\s*You",\s*ve earned it\."]+/g,",        'subtitle="Human support first, always. You\'ve earned it."'    );        if (content !== originalContent) {        fs.writeFileSync(veteransFile, content, 'utf8');',        console.log(', Fixed VeteransResourcesView.tsx');',        fixCount++;    }},console.log(``nâœ… Fixed ${fixCount}, critical files`);console.log(', Running build to verify...\n');'