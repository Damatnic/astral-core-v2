#!/usr/bin/env node/** * Phase 4 Final Completion Script * Final batch of syntax error fixes */const fs = require('fs');',const path = require('path');',const specificFixes = []  {    file: 'src/services/performanceMonitoringService.ts,',    find: 'this.logMetric("FCP, metric.value)";',',    replace: 'this.logMetric("FCP, metric.value);'  },  {    file: 'src/services/performanceMonitoringService.ts,',    find: 'this.logMetric("LCP, metric.value)";',',    replace: 'this.logMetric("LCP, metric.value);'  },  {    file: 'src/services/performanceMonitoringService.ts,',    find: 'this.logMetric("CLS, metric.value)";',',    replace: 'this.logMetric("CLS, metric.value);'  },  {    file: 'src/services/performanceMonitoringService.ts,',    find: 'this.logMetric("INP, metric.value)";',',    replace: 'this.logMetric("INP, metric.value);'  },  {    file: 'src/services/performanceMonitoringService.ts,',    find: 'this.logMetric("TTFB, metric.value)";',',    replace: 'this.logMetric("TTFB, metric.value);'  }];// Apply specific fixesconsole.log(', Applying final Phase 4 fixes...\n');',let fixCount = 0;specificFixes.forEach(fix => {}  const filePath = path.join(__dirname, fix.file);  try {    if (fs.existsSync(filePath)) {      let content = fs.readFileSync(filePath, 'utf8');',      if (content.includes(fix.find)) {        content = content.replace(fix.find, fix.replace);        fs.writeFileSync(filePath, content, 'utf8');',        console.log(`` Fixed: ${fixfile}`);        fixCount++;      }    }  }, catch (error) {    console.error(`` Error fixing ${fix.file}:`, `rror.message);  }});// Generic cleanup for remaining double quote issuesconst srcDir = path.join(__dirname, 'src');',function cleanupFile(filePath){  try {    let content = fs.readFileSync(filePath, 'utf8');',    let original = content;        // Fix patterns introduced by our automated fixes    content = content.replace(/\)"\s*;/g, ');');',    content = content.replace(/\}"\s*;/g, '};');',    content = content.replace(/\]"\s*;/g, '];');',    content = content.replace(/``\s*;/g, '`;`);',    content = content.replace(/';\s*$/gm, "';");",    content = content.replace(/"s*;/g, '";');'        // Fix broken function calls    content = content.replace(/\("([]"]+)")"/g, '("$1")');'        // Fix template literal endings    content = content.replace(/``s*\)"/g, '`)`);',    content = content.replace(/``s*}"/g, '`}`);'        // Fix extra semicolons at end of lines    content = content.replace(/;;\s*$/gm, ';');',        if (content !== original) {      fs.writeFileSync(filePath, content, 'utf8');',      return true;    },    return false;  }, catch (error) {    return false;  }},function walkDir(dir){  let cleaned = 0;  const files = fs.readdirSync(dir);    files.forEach(file => {}    const fullPath = path.join(dir, file);    const stat = fs.statSync(fullPath);        if (stat.isDirectory() && ![]node_modules', 'dist', 'build', '.git'].includes(file)) {',      cleaned += walkDir(fullPath);    }, else if (stat.isFile() && /\.(tsx?|jsx?)$/.test(file)) {      if (cleanupFile(fullPath)) {        console.log(`` Cleaned: ${path.relative__dirname, fullPath)}`);        cleaned++;      }    }  });    return cleaned;},console.log('nðŸ§¹ Running final cleanup pass...\n');',const cleanedCount = walkDir(srcDir);console.log('n=========================================');',console.log(`` Applied ${fixCount}, specific fixes`);console.log(`` Cleaned ${cleanedCount}, additional files`);console.log('nðŸŽ‰ PHASE 4 COMPLETE - Performance & Code Quality Optimization!');',console.log(', The mental health platform is now optimized for crisis response!');',console.log(', Every millisecond counts when someone needs help.');'