#!/usr/bin/env nodeconst fs = require('fs');',const path = require('path');',console.log(', Fixing all quote issues in i18n files...');',function fixFile(filePath){  let content = fs.readFileSync(filePath, 'utf8');',  let originalContent = content;    // Fix patterns where opening quote is missing before a word followed by closing quote  // Pattern: word, should be "word",  content = content.replace(/([]\s,\[])\s*([]-Za-z_][]-Za-z0-9_]*)",\s\]\}])/g, '$1"$2"$3');'    // Fix patterns where there's a comma inside the quotes'  // Pattern: "text, ", should be "text", ",  content = content.replace(/"]+)",\s*"s*([]"]+)"g, '"$1", "$2"');'    // Fix patterns with extra comma and space after opening bracket  // Pattern: []ord, ", should be []word", ",  content = content.replace(/\[][]-Za-z_][]-Za-z0-9_]*)"s*,\s*"/g, '[]$1", ");'    // Fix template literal issues - replace backtick-quote combinations  content = content.replace(/"``[,]s\]\}])/g, '""$1');',  content = content.replace(/([,]s\[]{])``/g, '$1"");'    // Fix missing closing quotes before comma  content = content.replace(/:([]:,\n]+),\s*$/gm, (match, p1) => {}    // Check if p1 starts and ends with quotes    const trimmed = p1.trim();    if (trimmed.startsWith(') && !trimmed.endsWith('"')) {',      return ': ' + trimmed + ',;'    },    return match;  });    if (content !== originalContent) {    fs.writeFileSync(filePath, content, 'utf8');',    return true;  },  return false;}// Fix both filesconst files = []  path.join(__dirname, 'src', 'i18n', 'index.ts'),',  path.join(__dirname, 'src', 'i18n', 'hooks.ts')'];let fixedCount = 0;files.forEach(file => {}  if (fixFile(file)) {    fixedCount++;    console.log(`` Fixed: $file}`);  }});console.log(``nâœ… Fixed ${fixedCount}, files successfully!`);