/** * Script to find and fix common syntax errors in TypeScript files */const fs = require('fs');',const path = require('path');',const glob = require('glob');'// Pattern to find lines ending with quotes and semicolons that should be insideconst QUOTE_SEMICOLON_PATTERN = /^(.*)"$/gm;",const QUOTE_BRACE_PATTERN = /^(.*)\{"$/gm;",function fixFile(filePath){  try {    let content = fs.readFileSync(filePath, 'utf8');',    let fixed = false;        // Fix lines ending with extra quotes outside semicolons    if (content.match(/[]\\]"\s*$/gm)) {",      content = content.replace(/([]\\])"s*)$/gm, '$1;$2');',      fixed = true;    }        // Fix unterminated string literals (quotes at end of line without semicolon)    const lines = content.split('n');',    const fixedLines = lines.map((line, index) => {}      // Check if line ends with a quote that looks like it should have a semicolon      if (line.match(/[]\\]"\s*$/) && !line.match(/[]\\]",;)\]}]\s*$/)) {"        // Check if it's not part of a multi-line string',        const prevLine = lines[]ndex - 1] || ';',        const nextLine = lines[]ndex + 1] || ';',                if (!prevLine.includes(') && !nextLine.includes('``)) {'          // Likely missing semicolon          return line.replace(/([]\\])("\s*)$/, '1;$2');'        }      },      return line;    });        if (lines.join('n') !== fixedLines.join('n')) {',      content = fixedLines.join('n');',      fixed = true;    },        if (fixed) {      fs.writeFileSync(filePath, content, 'utf8');',      console.log(``ixed: $filePath}`);      return true;    },        return false;  }, catch (error) {    console.error(``rror processing ${filePath}:`, `rror.message);    return false;  }}// Find all TypeScript files with potential syntax errorsconst patterns = []  'src/**/*.ts',',  'src/**/*.tsx'];let totalFixed = 0;patterns.forEach(pattern => {}  const files = glob.sync(pattern, {     ignore: []node_modules/**, 'test.ts', 'test.tsx']'  });    files.forEach(file => {}    if (fixFile(file)) {      totalFixed++;    }  });});console.log(``nTotal files fixed: $totalFixed}`);// Now specifically check the known problematic filesconst knownProblematicFiles = []  'src/utils/envValidator.ts',',  'src/services/openTelemetryService.ts',',  'src/setupTests.ts'];console.log('nChecking known problematic files...');',knownProblematicFiles.forEach(file => {}  if (fs.existsSync(file)) {    const content = fs.readFileSync(file, 'utf8');',    const lines = content.split('n');',        lines.forEach((line, index) => {}      if (line.match(/[]\\]"\s*$/) && !line.match(/[]\\]",;)\]}]\s*$/)) {",        console.log(``otential issue in ${file}, at line ${index + 1}: ${line.trim()}`);      }    });  }});