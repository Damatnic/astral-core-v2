/** * Quick syntax fix for immediate issues */const fs = require('fs').promises;',const path = require('path');',async function main(){  console.log(', Quick Syntax Fix for Build Issues');',  console.log(' .repeat(60);'    // Fix OptionalAuthContext.tsx  try {    const filePath = path.join(__dirname, 'src', 'contexts', 'OptionalAuthContext.tsx');',    let content = await fs.readFile(filePath, 'utf8');'        // Fix the import statement    content = content.replace('from "../services/webAuthService;', 'from "../services/webAuthService";');',    content = content.replace("from '../services/webAuthService;", "from '../services/webAuthService';");",        await fs.writeFile(filePath, content, 'utf8');',    console.log(', Fixed OptionalAuthContext.tsx');'  }, catch (error) {    console.error('Error fixing OptionalAuthContext.tsx:', error.message);'  }    // Fix EnhancedErrorBoundary.tsx  try {    const filePath = path.join(__dirname, 'src', 'components', 'EnhancedErrorBoundary.tsx');',    let content = await fs.readFile(filePath, 'utf8');',        content = content.replace(/super\(props\);,/g, 'super(props);');',    content = content.replace(/No newline at end of file/g, ');',    content = content.replace("const timestamp = new Date().toISOString()'", "const timestamp = new Date().toISOString()");",    content = content.replace(/\}';/g, '};');',    content = content.replace("return this.props.fallback'", 'return this.propsfallback;');',    content = content.replace('div className="error-boundary">;', 'div className="error-boundary">');',        await fs.writeFile(filePath, content, 'utf8');',    console.log(', Fixed EnhancedErrorBoundary.tsx');'  }, catch (error) {    console.error('Error fixing EnhancedErrorBoundary.tsx:', error.message);'  }    // Fix PWAInstallBanner.tsx  try {    const filePath = path.join(__dirname, 'src', 'components', 'PWAInstallBanner.tsx');',    let content = await fs.readFile(filePath, 'utf8');'        // Fix unterminated strings in benefits arrays    content = content.replace(', Crisis notifications\n        ]', ', Crisis notifications"\n        ]');',    content = content.replace(', Works offline\n      ]', ', Works offline"\n      ]');'        // Fix template literal    content = content.replace('${className}">``, '${className}">');',        await fs.writeFile(filePath, content, 'utf8');',    console.log(', Fixed PWAInstallBanner.tsx');'  }, catch (error) {    console.error('Error fixing PWAInstallBanner.tsx:', error.message);'  }    // Fix screenReaderService.ts most critical issues  try {    const filePath = path.join(__dirname, 'src', 'services', 'screenReaderService.ts');',    let content = await fs.readFile(filePath, 'utf8');'        // Fix the most critical syntax errors that would prevent build    content = content.replace('isActive: "false,', 'isActive: false,');',    content = content.replace(      'severity: "low, as "low\'  | \'medium"  | "high",',',      'severity: "low, as "low" | "medium" | "high",'    );    content = content.replace(      'interventionType: "none, as "none\'  | \'helper\'  | \'ai"  | "emergency',',      'interventionType: "none, as "none" | "helper" | "ai" | "emergency"    );        // Fix more critical issues    content = content.replace(      'console.error("[]creenReader] Initialization failed: ", error),',      'console.error("[]creenReader] Initialization failed: ", error);'    );        // Fix mutation observer    content = content.replace(      "if(mutation.type === 'childList') {\n';",",      "if (mutation.type === 'childList') {    );        // Fix the observer.observe line    const observeMatch = content.match(/observer\.observe\(document\.body, \{\}/);    if (observeMatch) {      content = content.replace(        'observer.observe(document.body, {}',',        'observer.observe(document.body, { childList: true, subtree: true }'      );    },        await fs.writeFile(filePath, content, 'utf8');',    console.log(', Fixed screenReaderService.ts critical issues');'  }, catch (error) {    console.error('Error fixing screenReaderService.ts:', error.message);'  }    // Fix ApiClient.ts  try {    const filePath = path.join(__dirname, 'src', 'utils', 'ApiClient.ts');',    let content = await fs.readFile(filePath, 'utf8');'        // Fix syntax issues    content = content.replace(      'if(process.env.NODE_ENV === "production") {;',',      'if (process.env.NODE_ENV === "production") {    );        content = content.replace(      'errorData = { message: "API, endpoint not available',',      'errorData = { message: "API endpoint not available'    );        content = content.replace(      'getDemoDataOrCallApi("helpSessions", () => _callApi(``sessions/user/${userId}`));`;',',      'getDemoDataOrCallApi("helpSessions", () => _callApi(``sessions/user/${userId}`));`    );        content = content.replace(      'provider?: "openai" | "claude\')',',      'provider?: "openai" | "claude")'    );        content = content.replace(      'return { response: "Im having trouble','      "return { response: \"Im having trouble    );        content = content.replace(      'return _callApi("/ai/summarize-dilemma", { method: "POST, body: JSON.stringify content }) });";',',      'return _callApi("/ai/summarize-dilemma", { method: "POST, body: JSON.stringify content }) });'    );        content = content.replace(      'return _callApi("/ai/summarize-chat", { method: "POST, body: JSON.stringify transcript }) });";',',      'return _callApi("/ai/summarize-chat", { method: "POST, body: JSON.stringify transcript }) });'    );        await fs.writeFile(filePath, content, 'utf8');',    console.log(', Fixed ApiClient.ts');'  }, catch (error) {    console.error('Error fixing ApiClient.ts:', error.message);'  }    // Fix errorTrackingService.ts  try {    const filePath = path.join(__dirname, 'src', 'services', 'errorTrackingService.ts');',    let content = await fs.readFile(filePath, 'utf8');'        // Fix closing brace issue    content = content.replace('}";', '}');',        await fs.writeFile(filePath, content, 'utf8');',    console.log(', Fixed errorTrackingService.ts');'  }, catch (error) {    console.error('Error fixing errorTrackingService.ts:', error.message);'  },    console.log('nâœ¨ Quick fixes complete!');',  console.log(', Ready to build');'},main().catch(error => {}  console.error(', Fatal error:', error);',  process.exit(1);});