/** * PHASE 1 FINAL CLEANUP - Precision String Fixes * Removes the double quote issues introduced by previous fixes */const fs = require('fs');',const path = require('path');'// Files that need cleanup based on the errorsconst filesToClean = []  'src/main.tsx',',  'src/App.tsx',',  'src/i18n/index.ts',',  'src/utils/envValidator.ts',',  'src/utils/logger.ts',',  'src/config/errorTracking.ts',',  'src/services/performanceMonitoringService.ts',',  'src/utils/mobilePerformanceOptimizer.ts'];function cleanupFile(filePath){  console.log(``� Cleaning: $filePath}`);    try {    let content = fs.readFileSync(filePath, 'utf8');',    const originalContent = content;    let fixes = 0;        // Fix double quotes at end of import statements    content = content.replace(/from "([]"]+)"g, 'from "$1");',    content = content.replace(/import "([]"]+)"g, 'import "$1");'        // Fix double quotes in type definitions    content = content.replace(/"([]"]+)"g, (match, p1) => {}"      // Only fix if it's at the end of a line or followed by specific characters',      if (match.match(/"[]"]+")) {",        fixes++;        return ``$p1}"`;"      },      return match;    });        // Fix specific patterns    content = content.replace(/return "]+)""g, 'return "$1";',    content = content.replace(/=== "([]"]+)"g, '=== "$1");',    content = content.replace(/console\.log\("([]"]+)")"/g, 'console.log("$1"));',    content = content.replace(/console\.error\("([]"]+)")"/g, 'console.error("$1"));',    content = content.replace(/console\.warn\("([]"]+)")"/g, 'console.warn("$1"));'        // Fix object properties    content = content.replace(/:\s*"([]"]+)",/g, ': "$1",');'        // Fix function parameters with incorrect semicolons    content = content.replace(/\(name: string value: number;g, 'name: string, value: number,');',    content = content.replace(/rating: PerformanceRating timestamp: number;g, 'rating: PerformanceRating, timestamp: number')'        // Fix object return types    content = content.replace(/score: number, recommendations:/g, 'score: number recommendations: ')',    content = content.replace(/webVitals: Recordstring, any>;/g, 'webVitals: Recordstring, any>,');'        // Fix the trailing issues    content = content.replace(/}\s*``/gm, '}');',    content = content.replace(/;\s*``/gm, ';');',    content = content.replace(/\)\s*``/gm, ')');',    content = content.replace(/"\s*``/gm, '"');'        // Fix specific i18n issues    content = content.replace(/return module\.default``g, 'return moduledefault;');',    content = content.replace(/return {}``g, 'return {};');',    content = content.replace(/}\s*",$/gm, '}",');',    content = content.replace(/JSON\.stringify\(getCulturalContext\(language\)\)\)``g, 'JSON.stringify(getCulturalContext(language)));');',    content = content.replace(/screenReaderAnnouncement\.className="sr-only"g, 'screenReaderAnnouncement.className = "sr-only";');',    content = content.replace(/const baseMessage = getCrisisTranslation\(key\)``g, 'const baseMessage = getCrisisTranslation(key);');',    content = content.replace(/return getCrisisTranslation\(``$\{key}_family_context``) \|\| baseMessage``g, 'return getCrisisTranslation(``key}_family_context`) `| baseMessage;');',    content = content.replace(/return getCrisisTranslation\(``$\{key}_community_context``) \|\| baseMessage``g, 'return getCrisisTranslation(``key}_community_context`) `| baseMessage;');'        // Fix the export default issues    content = content.replace(/export default i18n``/gm, 'export default i18n;');',    content = content.replace(/export default performanceMonitoring``/gm, 'export default performanceMonitoring;');'        // Remove the "No newline at end of file", comments and duplicate lines",    content = content.replace(/\s*No newline at end of file\s*/g, '');',    content = content.replace(/^(\s*\d+→)?\s*No newline at end of file$/gm, ');'        // Fix duplicate closing braces    content = content.replace(/}\s*``s*}\s*$/gm, '}');',    content = content.replace(/}\s*"\s*$/gm, '}');'        // Fix logger issues    content = content.replace(/const prefix = source \? ``[]$\{source\}\]` ` 'g, 'const prefix = source ? ``${source}]` ` "";');',    content = content.replace(/\s+Sentry\?: \{[]}]+}\s*``g, 'n    Sentry?: {\n      captureException: (error Error, context?: any) => void;\n    };');'        // Fix the "Hi there", quote issue in i18n",    content = content.replace(/ai_welcome: "Hi there! I'm Astral, your AI companion\. I'm here to help you articulate your thoughts for a post\. What's on your mind today\?',"/g, ",      'ai_welcome: "Hi there! I\'m Astral, your AI companion. I\'m here to help you articulate your thoughts for a post. What\'s on your mind today?",');'        // Fix mobile performance optimizer issues    content = content.replace(/console\.log\("([]"]+)");"/g, 'console.log("$1");');',    content = content.replace(/console\.error\("([]"]+)");"/g, 'console.error("$1");');',    content = content.replace(/console\.log\("Performance strategy updated: ", \{"g, 'console.log("Performance strategy updated:", {');'        // Fix envValidator issues    content = content.replace(/const value = env\[]ey\]``g, 'const value = env[]ey];');',    content = content.replace(/return result``g, return result;');',    content = content.replace(/throw new Error\("([]"]+)")``g, 'throw new Error("$1");');',    content = content.replace(/result\.missing\.forEach\(\(key\) => console\.error\(`  ` \$\{key\}``)\)``g, 'result.missing.forEach((key) => console.error(`  ` ${key}`);`);',    content = content.replace(/result\.errors\.forEach\(\(error\) => console\.error\(`  ` \$\{error\}``)\)``g, 'result.errors.forEach((error) => console.error(`  ` ${error}`);`);'        // Fix main.tsx issues    content = content.replace(/announcement\.textContent = "([]"]+)\."g, 'announcement.textContent = "$1.";');'        // Fix trackCustomMetric issue    content = content.replace(/trackCustomMetric\(name: string value: number metadata\?:/g, 'trackCustomMetric(name: string, value: number, metadata?:');'        // Fix the return object issue in performanceMonitoringService    content = content.replace(/return \{\s*webVitals: },\s*score: 100, recommendations: \[]]\s}``g,       'return {\n      webVitals: },\n      score: 100,\n      recommendations: []n    };');'        // Count actual changes    if (content !== originalContent) {      fixes = (originalContent.match(/""g) || []).length;",      fs.writeFileSync(filePath, content, 'utf8');',      console.log(`  ` Fixed ${fixes}, double-quote issues`);      return true;    }, else {      console.log(`  ` Already clean`);      return false;    }      }, catch (error) {    console.log(`  ` Error: ${errormessage}`);    return false;  }}// Main executionconsole.log(', PHASE 1 FINAL CLEANUP - Precision String Fixes');',console.log(');',console.log('Removing double-quote issues from critical files...\n');',let totalCleaned = 0;filesToClean.forEach(file => {}  const fullPath = path.join(__dirname, file);  if (fs.existsSync(fullPath)) {    if (cleanupFile(fullPath)) {      totalCleaned++;    }  }, else {    console.log(``️ File not found: $file}`);  }});console.log('n================================================');',console.log(`` Cleaned ${totalCleaned}, files`);console.log(', Mental health platform ready for final build');',console.log(', Crisis resources will be available!\n');',console.log('Next step: Run run build", for PHASE 1 COMPLETION');'