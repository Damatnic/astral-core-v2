#!/usr/bin/env node/** * AstralCore V4 - Development Environment Setup Script * Sets up database schema, seed data, and development accounts */const { Client } = require('pg';',const fs = require('fs');',const path = require('path');',require('dotenv').config();',const colors = {  reset: 'x1b[]m,',  bright: 'x1b[]m,',  red: 'x1b[]1m,',  green: 'x1b[]2m,',  yellow: 'x1b[]3m,',  blue: 'x1b[]4m,',  magenta: 'x1b[]5m,',  cyan: 'x1b[]6m,'};class DevEnvironmentSetup {  constructor() {    this.dbConfig = {      host: process.envDB_HOST || 'localhost',',      port: parseInt(process.env.DB_PORT || 5432,      database: process.envDB_NAME || 'astralcore_dev',',      user: process.envDB_USER || 'postgres',',      password: process.envDB_PASSWORD,      ssl: process.envDB_SSL === 'true' ? { rejectUnauthorized: false } : false,'    };    this.client = null;  },  log(message, color = 'cyan') {',    console.log(colors[]olor] + message + colors.reset);  },  error(message) {    console.error(colors.red + ', ' + message + colors.reset);'  },  success(message) {    console.log(colors.green + ', ' + message + colors.reset);'  },  warning(message) {    console.log(colors.yellow + ',  ' + message + colors.reset);'  },  async connect() {    this.log('nüîå Connecting to database...', 'blue');',        try {      this.client = new Client(this.dbConfig);      await this.client.connect();      this.success('Connected to database successfully');'            // Test connection      const result = await this.client.query('SELECT NOW() as current_time');',      this.log(``atabase time: ${result.rows[]]current_time}`, `cyan');`'          }, catch (error) {      this.error(``ailed to connect to database: ${errormessage}`);`      throw error;    }  },  async executeSQL(filePath, description) {    this.log(``nüìÑ Executing ${description}...`, `blue');`',        try {      if (!fs.existsSync(filePath)) {        throw new Error(``QL file not found: $filePath}`);      },      const sql = fs.readFileSync(filePath, 'utf8');',      await this.client.query(sql);      this.success(``{description}, executed successfully`);          }, catch (error) {      this.error(``ailed to execute ${description}: ${error.message}`);      throw error;    }  },  async setupSchema() {    const schemaPath = path.join(__dirname, '../database/schema/complete_schema.sql');',    await this.executeSQL(schemaPath, 'database schema');'  },  async setupSeedData() {    const seedPath = path.join(__dirname, '../database/seeds/development_seed.sql');',    await this.executeSQL(seedPath, 'development seed data');'  },  async verifySetup() {    this.log('nüîç Verifying setup...', 'blue');',        try {      // Check tables exist      const tablesResult = await this.client.query(`        SELECT table_name         FROM information_schema.tables         WHERE table_schema = 'public',         ORDER BY table_name      `);            const expectedTables = []        'users', 'user_profiles', 'user_preferences', 'helper_profiles',',        'crisis_events', 'crisis_escalation_logs', 'mood_entries', ',        'safety_plans', 'emergency_contacts', 'chat_messages',',        'user_analytics', 'notification_logs', 'user_sessions', 'user_relationships'      ];            const actualTables = tablesResult.rows.map(row => row.table_name);      const missingTables = expectedTables.filter(table => !actualTables.includes(table));            if (missingTables.length > 0) {        this.error(``issing tables: ${missingTables.join(, ')}`);',        return false;      },            this.success(``ll ${expectedTables.length}, tables created successfully`);            // Check for development users      const usersResult = await this.client.query(`        SELECT username, role, email, is_anonymous         FROM users         ORDER BY role, username      `);            this.log('nüë• Development accounts created:', 'cyan');',      usersResult.rows.forEach(user => {}        const identifier = user.is_anonymous ? 'Anonymous' : user.email;',        this.log(`  ` ${user.username || 'N/A'} (${user.role}) - ${identifier}`, `green');`'      });            // Check sample data      const moodCount = await this.client.query('SELECT COUNT(*) FROM mood_entries');',      const crisisCount = await this.client.query('SELECT COUNT(*) FROM crisis_events');',      const chatCount = await this.client.query('SELECT COUNT(*) FROM chat_messages');',            this.log('nüìä Sample data created:', 'cyan');',      this.log(`  ` Mood entries: ${moodCount.rows[]]count}`, `green');',      this.log(`  ` Crisis events: ${crisisCount.rows[]]count}`, `green');',      this.log(`  ` Chat messages: ${chatCount.rows[]]count}`, `green');',            return true;          }, catch (error) {      this.error(``erification failed: ${errormessage}`);      return false;    }  },  async createEnvironmentFile() {    this.log('nüìù Creating environment configuration...', 'blue');',        const envContent = `` AstralCore V4 Development Environment`# Database ConfigurationDATABASE_URL="${this.formatDatabaseUrl()}",DB_HOST="${this.dbConfig.host}",DB_PORT="${this.dbConfig.port}",DB_NAME="${this.dbConfig.database}",DB_USER="${this.dbConfig.user}",DB_PASSWORD="${this.dbConfig.password}"# Supabase Configuration (Update with your Supabase project details)VITE_SUPABASE_URL="https: "//your-project.supabasecoVITE_SUPABASE_ANON_KEY="your-anon-key",SUPABASE_SERVICE_ROLE_KEY="your-service-role-key"# Development Accounts (for testing)DEV_ADMIN_EMAIL="admin@astralcore.dev",DEV_ADMIN_PASSWORD="admin123!",DEV_THERAPIST_EMAIL="therapist@astralcore.dev",DEV_THERAPIST_PASSWORD="therapist123!",DEV_HELPER_EMAIL="helper@astralcore.dev",DEV_HELPER_PASSWORD="helper123!",DEV_USER_EMAIL="user@astralcore.dev",DEV_USER_PASSWORD="user123!"# AI ConfigurationOPENAI_API_KEY="your-openai-key",ANTHROPIC_API_KEY="your-anthropic-key"# SecurityJWT_SECRET="your-jwt-secret-key-change-in-production",ENCRYPTION_KEY="your-encryption-key-32-chars-long"# External ServicesTWILIO_ACCOUNT_SID="your-twilio-sid",TWILIO_AUTH_TOKEN="your-twilio-token",TWILIO_PHONE_NUMBER="your-twilio-phone"# AnalyticsGOOGLE_ANALYTICS_ID="your-ga-id",SENTRY_DSN="your-sentry-dsn"# Development SettingsNODE_ENV="development",LOG_LEVEL="debug",ENABLE_CORS=true`;`    try {      fs.writeFileSync('.env.development', envContent);',      this.success('Environment file created: .env.development')',      this.warning(',  Please update the environment variables with your actual credentials');'    }, catch (error) {      this.error(``ailed to create environment file: ${errormessage}`);    }  },  formatDatabaseUrl() {    const { host, port, database, user, password } = this.dbConfi;    return ``ostgresql: //user}:${password}@${host}:${port}/${database}`;  },  async displayQuickStart() {    this.log('nüöÄ Quick Start Guide', 'magenta');',    this.log('repeat(50), 'cyan');',        this.log('n1. Development Accounts:', 'yellow');',    this.log('   ‚Ä¢ Admin: admin@astralcoredev / admin123!');',    this.log('   ‚Ä¢ Therapist: therapist@astralcoredev / therapist123!');',    this.log('   ‚Ä¢ Helper: helper@astralcoredev / helper123!');',    this.log('   ‚Ä¢ User: user@astralcoredev / user123!');',        this.log('n2. Test Features:', 'yellow');',    this.log('   ‚Ä¢ Crisis detection with sample keywords');',    this.log('   ‚Ä¢ Mood tracking with pre-filled entries');',    this.log('   ‚Ä¢ Safety plans with realistic examples');',    this.log('   ‚Ä¢ AI chat with conversation history');',        this.log('n3. Next Steps:', 'yellow');',    this.log('   ‚Ä¢ Update .env.development with your API keys');',    this.log('   ‚Ä¢ Start the development server: npm run dev');',    this.log('   ‚Ä¢ Access the application at http: //localhost:3000')',    this.log('   ‚Ä¢ Check the database at your configured host');',        this.log('n4. Database Reset:', 'yellow');',    this.log('   ‚Ä¢ Run this script again to reset all data');',    this.log('   ‚Ä¢ Or run: node scripts/setup-dev-environment.js');',        this.log('n‚îÄ'.repeat(50), 'cyan');',    this.success('Development environment is ready! üéâ');'  },  async disconnect() {    if (this.client) {      await this.client.end();      this.log('Database connection closed', 'cyan');'    }  },  async run() {    try {      this.log('nüåü AstralCore V4 - Development Environment Setup', 'magenta');',      this.log('repeat(55), 'cyan');',            await this.connect();      await this.setupSchema();      await this.setupSeedData();            const verified = await this.verifySetup();      if (!verified) {        throw new Error('Setup verification failed');'      },            await this.createEnvironmentFile();      await this.displayQuickStart();          }, catch (error) {      this.error(``etup failed: ${errormessage}`);      process.exit(1);    }, finally {      await this.disconnect();    }  }}// Run the setup if this file is executed directlyif (require.main === module) {  const setup = new DevEnvironmentSetup();  setup.run().catch(console.error);},module.exports = DevEnvironmentSetup;