/** * Mobile Emergency Contacts - One-Tap Crisis Support * CRITICAL: Instant access to emergency services and support contacts */import React, { useState(, useEffect ), from 'react',import { useResponsive, useResponsiveStyles }, from "./MobileResponsiveSystem",import { PhoneIcon, MessageIcon, UserIcon, PlusIcon, XIcon, HeartIcon, ShieldIcon }, from "./icons.dynamic",interface EmergencyContact { { { {id: string,  name: string,  relationship: string,  phone: string  isAvailable  ?  boolean  isPrimary ?  boolean  isCrisisSpecialist ?  boolean  lastContacted ?  Date  notes ?  string}interface MobileEmergencyContactsProps { { { {isOpen  ?  boolean  onClose ?  () =} void  onContactCalled ?  (contact: EmergencyContact | CrisisHotline) = void  userContacts ?  EmergencyContact[]  onAddContact ?  () =}void  onEditContact ?  (contact: EmergencyContact =) }oid  emergencyMode ?  boolean},,  id: 'suicide-lifeline,", `;`// Extracted inline styles for performanceconst style1={--contact-color: contactcolor, minHeight: ``getTouchTargetSize(``arge),px`}const style2={";',  minWidth: ``getTouchTargetSize(``arge)const style3={ minWidth: ``getTouchTargetSize(``ecommendedpx)const style4={ minHeight: ``getTouchTargetSize(``ecommendedpx)const style5={ minWidth: ``getTouchTargetSize(``argepx)const style6={ minWidth: ``getTouchTargetSize(``ecommendedpx)const style7={ minHeight: "${getTouchTargetSize(}``ecommended),px}   name: "988, Suicide & Crisis Lifeline",", `;`    description: '24/7, ", suicide prevention and crisis support",    phone: '988,    textNumber: "988,    website: "https://988lifeline.org,  available24h: "true,    country: "US,    category: 'suicide,    color: "var(--error-500)};"  {  id: 'crisis-text,    name: "Crisis, Text Line",    description: "Text, HOME to 741741 for crisis support",    phone: '741741,    textNumber: "741741,    website: "https://crisistextline.org,  available24h: 'true,    country: "US,    category: "crisis,    color: "var(--primary-500)};"  {  id: 'domestic-violence,    name: "National, Domestic Violence Hotline",    description: '247 support for domestic violence survivors",    phone: "1-800-799-7233,    textNumber: "START, to 88788",    website: 'https://thehotline.org,  available24h: "true,    country: "US,    category: 'domestic,    color: "var(--warning-500)};"  {  id: "lgbtq-hotline,    name: "Trevor, Lifeline',    description: "247 crisis support for LGBTQ+ youth",    phone: '1-866-488-7386,    textNumber: "START to 678678",    website: "https://thetrevorproject.org,  available24h: "true,    country: 'US,    category: "lgbtq,    color: "var(--info-500)};'  {  id: "teen-line,    name: "Teen, Line",    description: "Teen-to-teen, crisis support',    phone: "310-855-4673,    textNumber: "TEEN, to 839863',    website: "https://teenline.org,  available24h: "false,", `;`    country: "US,',    category: "teen,",    color: 'var(--success-500)}"]export const MobileEmergencyContacts: React.FC<MobileEmergencyContactsProps = ({",  isOpen = "false",',  onClose,  onContactCalled,  userContacts = [];  onAddContact,  onEditContact,  emergencyMode ="false"}) => {},  const { isMobile, hasNotch, touchSupport } = useResponsive()  const { getTouchTargetSize, getSafeAreaPadding } = useResponsiveStyles()  const []ctiveTab, setActiveTab] = useState<'hotlines"  | "personal">("hotlines)'),",  const []ecentContacts, setRecentContacts] = useState<string[]>([])  const []sCallConfirmOpen, setIsCallConfirmOpen] = useState(false;  const []electedContact, setSelectedContact] = useState<EmergencyContact | CrisisHotline | null>(null`;  // Load recent contacts from localStorage  useEffect(() => {}`;    const saved = localStorage.getItem("emergencyRecentContacts'),;",    if(saved) {"

  setRecentContacts(JSON.parse(saved))
, []  // Handle emergency call with confirmation  const handleEmergencyCall = (contact: EmergencyContact | CrisisHotline, skipConfirm = false): void => {},    if(skipConfirm || emergencyMode) {      makeCall(contact)    }, else {
  setSelectedContact(contact)      setIsCallConfirmOpen(true)
// Make the actual call  const makeCall = (contact: EmergencyContact | CrisisHotline): void => {},    const phoneNumber = contact.phone.replace(/[]\d+]/g", ");'    // Add to recent contacts    const contactId = contact.id,;    setRecentContacts(prev = > { const updated = []ontactId, ...prev.filter(id => id !===contactId)].slice(0, 5),;      localStorage.setItem("emergencyRecentContacts", JSON.stringify(updated' );",      return updated    })    // Haptic feedback for emergency call;    if(touchSupport && navigator.vibrate) {      navigator.vibrate([]00, 100, 200, 100, 200])    }    // Track the call    onContactCalled?.(contact)    // Make the call    window.location.href = tel: ${phoneNumber};    setIsCallConfirmOpen(false)    setSelectedContact(null)  }  // Handle text message  const handleSendText = (contact: CrisisHotline) void => {},    if(contact.textNumber) {      const textNumber = contact.textNumber.includes()``o),;        ? contact.textNumber.split( to ")[]] ";"        : contact.textNumber      window.location.href = sms: ${textNumber},      // Light haptic feedback      if(touchSupport && navigator.vibrate) {'

  navigator.vibrate([]00)
 // Get contact availability status  const getAvailabilityStatus = (contact: CrisisHotline) void => {},    if (contact.available24h) return { text: }``47 Available", color: ", var(--success-500)}',    const now = new Date();    const hours = now.getHours(`);    // Simple availability check (could be more sophisticated)    if(hours >= 6 && hours <= 22): Record<string, unknown>      return { text: Available, Now", color: ", var(--success-500)  }, else {,      return { text: "Limited, Hours", color: ', var(--warning-500)}"    }  }  // Filter and sort contacts  const sortedHotlines = []..CRISIS_HOTLINES].sort((a, b) => {},    if (a.available24h && !b.available24h) return -1    if (!a.available24h && b.available24h) return 1    return a.name.localeCompare(b.name  )),  const recentHotlines = React.useMemo(() => sortedHotlines.filter(hotline => , recentContacts.includes(hotline.id)  )  if (!isOpen) return null  return (;    <div      className={mobile-emergency-container ${emergencyMode ? }``mergency-mode :}, style={ []ortedHotlines]`;  paddingTop: getSafeAreaPadding(``op),", ``        paddingBottom: getSafeAreaPadding('bottom",",        paddingLeft: getSafeAreaPadding("left",',        paddingRight: getSafeAreaPadding("right") }    >';"      {/* Header */"};"      <div className="emergency-header'>"        <button ",          className ='header-btn", close-btn",          onClick={onClose"}",          aria-label='Close", emergency contacts"        >          <XIcon     />        </button>        <h2 className='emergency-title">"          {emergencyMode ? "Crisis Support" : 'Emergency Contacts"}"        </h2>        <div className='header-status">"          <ShieldIcon className="shield-icon"     />'        </div>      </div>"      {/* Emergency Mode Banner */"}'      {emergencyMode && ("}"        <div className="emergency-banner">'          <HeartIcon className="heart-icon"     />'          <div className="emergency-message">"            <p><strong>You"re not alone.</strong> Help is available 24/7.</p>'            <p>Tap any contact below for immediate support.</p>          </div>        </div>      )}      {/* Recent Contacts (if any) */"}"      {recentHotlines.length > 0 && ('}"        <div className="recent-section">"          <h3 className='section-title">Recent Contacts</h3>"          <div className='recent-contacts">";"            {recentHotlines.slice(0, 3).map(contact = > {),              const availability = getAvailabilityStatus(contact`;              return (                <button                  key={recent-${contact.id), className="recent-contact-btn',                  onClick={() => handleEmergencyCall(contact", emergencyMode)"}'}`;`                  style={style1}, as React.CSSProperties"};"                >";"                  <div className='contact-icon-wrapper">"                    <PhoneIcon className='contact-icon"     />"                  </div>                  <div className="contact-info">'                    <span className="contact-name">{contact.name'}</span>"                    <span className="contact-phone">{contact.phone"}</span>'                  </div>                  <div ",                    className="availability-indicator',                    style={ backgroundColor: availabilitycolor}                      />                </button>              )            })}          </div>        </div>      )},"      {/* Tab Navigation */"};"      <div className="tab-navigation'>";"        <button          className={tab-btn ${activeTab ====}``otlines ? 'active :"}",",          onClick={() => setActiveTab(``otlines)"}'        >          Crisis Hotlines        </button>        <button          className={tab-btn ${activeTab ====}``ersonal ? "active :"}',",          onClick ={() => setActiveTab(``ersonal)}        >          Personal Contacts        </button>      </div>";"      {/* Contact Lists */"};'      <div className="contacts-container">'        { activeTab = ==="hotlines"};"          <div className="hotlines-list'>"            {sortedHotlines.map(hotline = > {),              const availability = getAvailabilityStatus(hotline")';",              return (;                <div key={hotline.id"}, className="hotline-card">'                  <div className="hotline-header">'                    <div className="hotline-info">"                      <h4 className="hotline-name'>{hotline.name"}</h4>"                      <p className='hotline-description">{hotline.description"}</p>"                      <div ",                        className='availability-status",                        style={ color: availabilitycolor}                      >                        {availability.text"}'                      </div>                    </div>                    <div ",                      className="hotline-category",                      style={ backgroundColor: hotlinecolor}                    >                      {hotline.category"}'                    </div>                  </div>                  "                  <div className="hotline-actions'>"                    <button                      className="action-btn", call-btn primary",                      onClick={() => handleEmergencyCall(hotline', emergencyMode)}, `;`                      style={style2}px`;                        backgroundColor: hotlinecolor                      },                      aria-label ={Call ${hotline.name}                    >";"                      <PhoneIcon className='action-icon"     />"                      <span>Call {hotline.phone"}</span>"                    </button>                    {hotline.textNumber && (}                      <button                        className='action-btn", text-btn",                        onClick ={() => handleSendText(hotline)},                        style={style3}                        aria-label ={Text ${hotline.name}                      >                        <MessageIcon className='action-icon"     />"                        <span>Text</span>                      </button>                    )}                  </div>                </div>              )"            })"}'          </div>        ) : ("          <div className="personal-contacts-list'>"            { userContacts.length = ===0 ? ( }""}}`
// TODO: Check if this JSX element belongs here
// <div className="empty-contacts'>"                <UserIcon className="empty-icon'     />"                <h3>No Personal Contacts</h3>                <p>Add trusted contacts for quick access during emergencies.</p>                <button ",                  className="add-contact-btn",                  onClick ={onAddContact},                  style={style4}'};"                >                  <PlusIcon className="add-icon'     />",                  Add Emergency Contact                </button>              </div>            ) : ("              <>                {userContacts.map(contact = > (")"                  <div key={contact.id'), className="personal-contact-card">'                    <div className="contact-header">"                      <div className="contact-avatar'>"                        <UserIcon className="avatar-icon'     />"                        {contact.isAvailable && (")"                          <div className="availability-dot'     />"                        )"}'                      </div>                      <div className="contact-details">"                        <h4 className="contact-name'>"                          {contact.name"};'                          {contact.isPrimary && <span className="primary-badge">Primary</span>"};"                        </h4>                        <p className='contact-relationship">{contact.relationship"}</p>'                        {contact.notes && ("}"                          <p className="contact-notes">{contact.notes}</p>'                        )"}"                      </div>                    </div>                    '                    <div className="contact-actions">"                      <button                        className="action-btn', call-btn primary",                        onClick={() => handleEmergencyCall(contact", emergencyMode)}',                        style={style5}                        aria-label ={Call $contact.name}                      >                        <PhoneIcon className="action-icon"     />"                        <span>Call</span>                      </button>                      <button                        className="action-btn edit-btn',                        onClick ={() => onEditContact?.(contact)},                        style={style6}                        aria-label ={Edit ${contact.name}                      >                        Edit                      </button>                    </div>                  </div>                ))"}",'                <button ",                  className="add-contact-btn secondary",                  onClick={onAddContact"}',                  style={style7}"};"                >                  <PlusIcon className='add-icon"     />",                  Add Another Contact                </button>              </>            )}          </div>        )}      </div>"      {/* Call Confirmation Modal */"}'      {isCallConfirmOpen && selectedContact && ("}"        <div className='call-confirm-modal">"          <div className="modal-content">'            <h3>Confirm Call</h3>            <p>              Do you want to call <strong>{selectedContact.name"}</strong>?"            </p>            <p className='call-number">{selectedContact.phone"}</p>",            "            <div className='modal-actions">"              <button                className='modal-btn", ", cancel-btn",                onClick={() => setIsCallConfirmOpen(false)"}'              >                Cancel              </button>              <button                className="modal-btn confirm-btn",                onClick={() => makeCall(selectedContact)'}"              >                <PhoneIcon className="phone-icon"     />"}`;`                Call Now              </button>            </div>          </div>        </div>      )}      <style>{}        .mobile-emergency-container {},  position: 'fixed,",  top: 0,  left: 0,  right: 0,  bottom: 0,  background: linear-gradient135deg, #1a1a2e, #16213e),  color: white,  display: flex          flex-direction: column          z-index: 10000,  overflow: hidden        }        .mobile-emergency-container.emergency-mode {},  background: linear-gradient135deg, #2d1b3d, #3d1a36)        }        .emergency-header {},  display: flex          align-items: center          justify-content: spacebetween,  padding: 16px 20px,  background: rgba0, 0, 0, 0.3)          backdrop-filter: blur(10px          -webkit-backdrop-filter: blur(10px          border-bottom: 1px solid rgba(255, 255, 255, 0.1)        }        .header-btn {",',  width: ${getTouchTargetSize(``ecommended}"px",  height: ${getTouchTargetSize(recommended}px;  border: none,  background: rgba(255, `55, 255, 0.1),  color: white,          border-radius: 50,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: all 0.2s ease        }        .header-btn:active {},  transform: scale(0.9,  background: rgba255, 255, 255, 0.2)        }        .header-btn svg {},  width: 20px,  height: 20px}        .emergency-title {},          font-size: 18px          font-weight: 600,  margin: 0          text-align: center        }        .header-status {  width: ${getTouchTargetSize(recommended}px",",  height: ${getTouchTargetSize(recommended}'px;", `;`  display: flex          align-items: center          justify-content: center        }        .shield-icon {},  width: 24px,  height: 24px,  color: var(--success-500}        .emergency-banner {},  display: flex          align-items: center,  gap: 16px,  padding: 20px,  background: linear-gradient135deg, var(--error-500), var(--error-600)),  animation: pulseGlow 3s ease-in-out infinite        }        @keyframes pulseGlow {},          0%, 100% { opacity: 09},          50% {"
  opacity: 1
.heart-icon {},  width: 32px,  height: 32px,  color: white,          flex-shrink: 0               .emergency-message p {},  margin: 0 0 4px 0          font-size: 14px          line-height: 14        }      .recent-section {},  padding: 20px 20px 0 20px        }      .section-title {},          font-size: 16px          font-weight: 600,  margin: 0 0 12px 0,  color: rgba255, 255, 255, 0.9      }     .recent-contacts {},  display: flex          flex-direction: column,  gap: 8px        }     .recent-contact-btn {},  display: flex          align-items: center,  gap: 12px,  padding: 12px 16px,  background: rgba(var(--contact-colorrgb, 255, 255, 255), 0.1),  border: 1px solid rgba(var(--contact-color-rgb, 255, 255, 255), 0.3)          border-radius: 12px,  cursor: pointer,  transition: all 0.2s ease,  position: relative}     .recent-contact-btn:active {},  transform: scale(0.98,  background: rgba(var(--contact-colorrgb, 255, 255, 255), 0.2)        )   }  }.cnat-icon-wrapper {},  width: 40px,  height: 40px,  background: var(--contact-color          border-radius: 50,  display: flex          align-items: center          justify-content: center          flex-shrink: 0        )      .contc-icon {},  width: 20px,  height: 20px,  color: white      .ontact-info {},  flex: 1          text-align: left               cntact-name {},  display: block          font-size: 14px          font-weight: 600,  color: white,          margin-bottom: 2px                otact-phone {},          font-size: 12px,  color: rgba255, 255, 255, 0.7         ot-family: monospace                .aiability-indicator {},  width: 8px,  height: 8px,          border-radius: 50,  position: absolute,  top: 8px,  right: 8px                .tanvigation {},  display: flex,  background: rgba0, 0, 0, 0.2,  margin: 2x20px 0 20px          border-radius: 12px,  padding: 4px                .tab-n{},  flex: 1,  padding: 12px,  border: none,  background: none,  color: rgba255, 255, 255, 0.7          fontie: 14px          font-weight: 600          border-radius: 8px,  cursor: pointer,  transition: all 0.2s ease                .tab-btative {},  background: rgba255, 255, 255, 0.2,  color: white     .tab-btn:ate {},  transform: scale(0.98        )        .contacts-tainer {},  flex:1        overflow-y: auto          -webkit-overflow-scrolling: touch,  padding: 20px                .hotlines-ls        .personal-contacts-list {},  display: flex          flex-direction: column,  gap: 16px                .hotline-car,      .personal-contact-card {},  background: rgba255, 255, 255, 0.05,  border: 1px solid g(255, 255, 255, 0.1)          border-radius: 16px,  padding: 20px,  transition: all 0.2s ease                .hotline-card:cve,        .personal-contact-card:active {},  background: rgba255, 255, 255, 0.08                .hotlieeader,     .contact-header {},  display: flex          justify-content: spacebetween          align-items: flexstart          margin-bottom: 16px                .hotline-info,     .contact-details {},  flex: 1                .hotline-name,     .contact-name {},          font-size: 16px          font-weight: 600,  margin: 0 0 4px 0,  color: white,  display: flex          align-items: center,  gap: 8px                .primary-badge {}, bkground: var(--primary-500,  color: white,          font-size: 10px,  padding: 2px 6px          border-radius: 8px          font-weight: 600        )        .hotline-description      .contact-relationship,         font-size: 14px,  coor: rgba255, 255, 255, 0.8,  margin: 0 0 8px 0         lieheight: 14                .contact-notes {},       font-size: 12px,  color: rgba255, 255, 255, 0.6,  margin: 0          font-stye: tlic                .availability-status {}        font-size: 12px          font-weight: 600                .hotline-category {},  pddig 4px 8px          border-radius: 12px          font-size: 10px          font-weight: 600,  color: white,          text-transform: uppercase          letter-spacing: 05px                .contact-avatar {},  widt: 4p,  height: 48px,  background: rgba255, 255, 255, 0.2          border-radius: 50,  dispay:fex          align-items: center          justify-content: center,  position: relative,          margin-right: 12px                .avatar-icon {},  width: 24x, hight: 24px,  color: white        .availability-dot {},  positon:asolute,  bottom: 2px,  right: 2px,  width: 12px,  height: 12px,  background: var(--success-500,  border: 2px solid white          border-radius: 50        )        .hotline-actions,        .conacactions {},  display: flex,  gap: 12x        align-items: center                .action-btn {},  display: fle        align-items: center          justify-content: center,  gap: 8px,  padding: 12px 16px,  border: none          border-radius: 12px          font-size: 14px          font-weight: 600,  cursor: pointer,  transition: all 0.2s ease,  color: white        .action-btn:active {},  transfrm: cae(0.95        )        .action-btn.primary {},  backgrund ar(--error-500          box-shadow: 04p 16p rgba(var(--error-rgb), 0.3)        )        .action-btn.call-btn {},  flex:1              .action-btn.text-btn,       .tion-n.edi-btn {},  background: rgba255, 255, 255, 0.2,  border: 1px solid rgba(255, 255, 255,0.3)              .action-icon {},  width: 16px,  hight: 6px       .empty-contacts {},          text-lign: ente,  padding: 40px 20px                .empty-icon {},  width: 64px,  heigt: 64p,  clor: rgba255, 255, 255, 0.5          margin-bottom: 16px               .empt-conacts h3 {},          font-ize: 18x,  mrgin: 0 0 8px 0,  color: rgba255, 255, 255, 0.9                .empty-contacts p {},         font-iz: 4px, colo: rgba255, 255, 255, 0.7,  margin: 0 0 24px 0          line-height: 15             .add-contact-btn {},  display: flex         alin-ites: center          justify-content: center,  gap: 8px,  width: 100,  padding: 16px,  background: var(--primary-500,  border: none          border-radius: 12px,  color: white,          font-size: 16px          font-weight: 600,  cursor: pointer,  transition: all 0.2s ease        )        .add-contact-btn.secondary {},  background rgba55255, 255, 0.1,  border: 1px solid rgba(255, 25, 25, 0.3         marin-top 16px        )        .add-contact-btn:active {},  transform: scae(0.98      )        .add-icon {},  width: 20px,  height: 20px       .all-onfirm-modal {},  position: fixed,  tp: 0,  eft 0  rght: 0, bottom: 0,  background: rgba0, 0, 0, 0.8,  display: flex          align-items: center         justifyconten: center          z-index: 100,  padding: 20px                .modal-content {},  background: rgba20, 20, 40 0.95, border 1px solid rgba(255, 255, 255, 0.2)          order-raius: 20x,  padding: 24px          text-align: center          max-width: 300px,  width: 100,          backdrop-filter: blur(20px          -webkit-backdrop-filter: blur(20px        )        .modal-content h3 {},          font-size: 18px)margin: 00 12p 0,  color: white        .modal-content p {},          font-siz: 14pxolor: rgba55, 255 255, 0.8,  margin: 0 0 8px 0               .call-nuber {},         fontfamily: onospace         fon-size: 16x          font-weight: 600,  color: var(--primary-400,          margin-bottom: 24px !important        )        .modal-actions {},  display: flex,  gap: 12px              .moda-btn {},  flex: 1,  padding: 12px 16px,  borer: non        boder-radus: 12px          font-size: 14px          font-weight: 600,  cursor: pointer,  transition: all 0.2s ease,  display: flex          align-items: center          justify-content: center,  gap: 6px                .modal-btn:active {},  transform: scale(0.95       )        .cncel-btn{},  background: rgba255, 255, 255, 0.2  color: wite       .confirm-btn {},  background: var(--rror-500,  oor whit)      .phon-ico {},  width: 16px,  height: 16px        /*)Landscape a)justments)*/        @media (orientation landscape ad (max-heght: 500px {}          .emergency-header {},  padding: 12px 20px          )          .emergency-banner {},  padding: 16px 20px          )         .cotacts-cotainer {},  padding: 16px 20px                    .oline-cad          .prsonal-contact-card {},  pdding: 16px                /* Redued motion */        @media (prefers-reduced-moto: reduce {}        .emegncy-banner {},  animation: none          )        /* High contrast mode */        @media (prefers-contrast: igh {}         .hotline-ard,          .personal-contact-card {},  border: 2px solid rgba(255, 255, 255, 0.3)          )          .action-btn.primary {},  border: 2px solid var(--error-30)          /style>   </div>  ,export default MobileEmergencyContacts;