// Mentorship Program - Connect users with peer mentors for personalized supportimport React, { useState(, useEffect, useCallback }, from react",import { ', ArrowRight }, from ', lucide-react',import { communityService }, from "../../services/communityService",interface Mentor { { { {}  id: string,  name: string,  avatar ? : string,  title: string,  bio: string,  specializations: string[]  approaches: string[]  languages: string[]  location: string,  timezone: string,  availability: {},  days: string[]  timeSlots: string[]  },  experience: {},    yearsOfRecovery ? : number,  yearsOfMentoring: number,  peopleHelped: number,  areasOfExpertise: string[]  personalJourney: string  },  credentials: {},  certifications: string[]  training: string[]    education ? : string[]  },  stats: {},  rating: number,  reviewCount: number,  responseTime: number, // hours,  completionRate: number // percentage,  activeConnections: number,', `;`  successStories: "number }",  communicationMethods: ('chat  | ", voice"  | "video"  | 'email")[],",  mentoringStyle: string,  isVerified: boolean,  isActive: boolean,  lastActive: Date,  joinedAt: Date,  maxMentees: number,  currentMentees: number  pricing ? : {},  isFree: boolean    hourlyRate?: number    packageOptions?: MentoringPackage[]  }},interface MentoringPackage { { { {}  id: string,  name: string,  description: string,  duration: number, // weeks,  sessionsIncluded: number,  price: number,  features: string[]},interface MentorshipRequest { { { {}  id: string,  menteeId: string,  mentorId: string,',  type: "one-time  | ", ongoing"  | ", package',  goals: string[]  challenges: string[]  preferredCommunication: string[]  availableTimes: string[]  timeCommitment: string,  experience: string,  expectations: "string,",  status: 'pending  | ", accepted"  | "declined"  | 'active"  | ", completed,',",  createdAt: Date  startDate ? : Date  endDate?: Date  packageId?: string},interface MentorshipSession { { { {}  id: string,  mentorshipId: string,  scheduledAt: Date,  duration: number // minutes,  type: "chat  | ", voice"  | ', video",  agenda ? : string,  status: "scheduled  | ', completed"  | "cancelled"  | ", no-show',  notes ? : string  actionItems?: string[]  rating?: number  feedback?: string},interface MentorReview { { { {}  id: string,  mentorId: string,  menteeId: string,  menteeName: string,  rating: number,  title: string,  content: string,  helpfulAreas: string[]  recommendedFor: string[]  isAnonymous: boolean,  createdAt: Date,  helpfulVotes: number},interface MentorshipGoal { { { {}  id: string,  title: string,  description: string,  category: string  targetDate?: Date,  status: "not-started  | ", in-progress'  | "completed"  | ", paused,",',  progress: number // 0-100,  milestones: Milestone[]},interface Milestone { { { {}  id: string,  title: string,  description: string,  targetDate ? : Date  completedAt?: Date,  isCompleted: boolean},export const MentorshipProgram: ReactFC = () => {},  const []entors, setMentors] = useState<Mentor[]>([])  const []electedMentor, setSelectedMentor] = useState<Mentor | null>(null)  const []earchQuery, setSearchQuery] = useState(")"),;',  const []ilters", setFilters] = useState({",  specialization: "all,",    availability: 'all,",    rating: 0,    location: "all,',    pricing: "all,",    communication: "all  })",  const []ortBy', setSortBy] = useState<", rating"  | 'experience"  | "response-time"  | "recent'>("rating)")',  const []ctiveView", setActiveView] = useState<", discover"  | "my-mentors'  | "mentor-detail"  | 'request">("discover)")",  const []howRequestModal', setShowRequestModal] = useState(false),;",  const []urrentUser] = useState({  id: "user-123,',    name: "SupportSeeker,",  isMentor: false,    activeMentorships: 2,    completedMentorships: 5  })  const []entorshipRequest", setMentorshipRequest] = useState({",  type: 'ongoing,",  goals: [ ]s string[],    challenges: [ ]s string[],    preferredCommunication: [ ]s string[],    availableTimes: [ ]s string[],    timeCommitment: , ",',    experience: ",",  expectations: ",",  '});"  // Initialize mock data  useEffect(() => {},    const mockMentors: Mentor[ ] []      {  id: mentor-1,",        name: 'Sarah, Chen",        title: "Anxiety, Recovery Mentor",        bio: "After, overcoming severe anxiety and panic disorder, I now help others navigate their journey to recovery. I believe in practical, evidence-based approaches combined with compassionate support.',        specializations: []nxiety Disorders", ", Panic Attacks', ", Social Anxiety, "Workplace Stress]",        approaches: []BT techniques", ', Mindfulness", ", Gradual exposure, 'Lifestyle changes]",",        languages: []nglish, "Mandarin]",        location: 'San, Francisco, CA",",',        timezone: "PST,",        availability: {  days: []onday, ", Tuesday", ', Thursday, "Saturday]",          timeSlots: []:00-12 '00", ", 14: 00-17 "00", ', 19: 00-21 "00]"        },        experience: {},  yearsOfRecovery: 8,          yearsOfMentoring: 5,          peopleHelped: 127,          areasOfExpertise: []orkplace anxiety', ", Public speaking fears, "Health anxiety]",          personalJourney: "I, spent years struggling with panic attacks that controlled my life. Through therapy, medication, and lifestyle changes, I found my way back to confidence and peace.'        },        credentials: {},  certifications: []ertified Peer Support Specialist, "Mental Health First Aid]",',          training: []nxiety and Depression Association Training, "Trauma-Informed Care]",          education: [].A Psychology, "Certified Life Coach]"        },        stats: {},  rating: 49,          reviewCount: 85,          responseTime: 25,          completionRate: 94,          activeConnections: 12,          successStories: 73        },        communicationMethods: []hat, ', voice, "video]",        mentoringStyle: 'Practical, and encouraging, focusing on small achievable steps with regular check-ins",",",  isVerified: true,        isActive: true,        lastActive: new Date(Date.now() - 300000)",        joinedAt: new Date('2022-03-15")",        maxMentees: 15,        currentMentees: 12,        pricing: {},  isFree: false,          hourlyRate: 45,          packageOptions: []            {',  id: "pkg-1,",              name: "Anxiety, Breakthrough",              description: '8-week, intensive program for overcoming anxiety",  duration: 8,              sessionsIncluded: 16,              price: 520,              features: []eekly 1-on-1 sessions", ', Daily check-ins", ", Personalized action plans, "Resource library access]"            }          ]        }      }',","      {  id: 'mentor-2,        name: "Marcus, Rodriguez",        title: "Depression & Motivation Coach",        bio: 'Having, battled depression for over a decade, I understand the darkness and the path to light. I specialize in helping people rediscover motivation and build sustainable daily routines.",        specializations: []epression, ", Motivation', ", Daily Routines, "Goal Setting]",        approaches: []ehavioral activation", ', Habit formation", ", Mindfulness, 'Motivational interviewing]",",        languages: []nglish, "Spanish]",        location: 'Austin, TX",",',        timezone: "CST,",        availability: {  days: []onday, ", Wednesday", ', Friday, "Sunday]",          timeSlots: []0:00-13 '00", ", 15: 00-18 "00", ', 20: 00-22 "00]"        },        experience: {},  yearsOfRecovery: 6,          yearsOfMentoring: 4,          peopleHelped: 89,          areasOfExpertise: []reatmentresistant depression', ", Medication transitions, "Building daily structure]",          personalJourney: "After, years of trying different treatments, I found that combining therapy with lifestyle changes was key to my recovery. I want to help others find their unique path.'        },        credentials: {},  certifications: []eer Recovery Coach, "Motivational Interviewing Certified]",',          training: []epression and Bipolar Support Alliance Training, "Suicide Prevention]",          education: [].S Counseling Psychology]        },        stats: {},  rating: 48,          reviewCount: 67,          responseTime: 42,          completionRate: 91,          activeConnections: 8,          successStories: 52        },        communicationMethods: []hat, ", voice", ', video, "email]",        mentoringStyle: 'Patient, and motivational, helping build momentum through small daily wins",",",  isVerified: true,        isActive: true,        lastActive: new Date(Date.now() - 600000)",        joinedAt: new Date('2022-06-20")",        maxMentees: 10,        currentMentees: 8}'      {",  id: "mentor-3,        name: "Dr., Emily Thompson",        title: 'Trauma-Informed, Peer Mentor",        bio: "As, a trauma survivor and licensed therapist, I bridge professional knowledge with lived experience. I specialize in PTSD, complex trauma, and building safety in relationships.',        specializations: []TSD, ", Complex Trauma", ", Relationship Recovery, "Boundary Setting]',        approaches: []raumainformed care", ", EMDR techniques', ", Somatic practices, "Attachment theory],",        languages: []nglish]",',",        location: "Portland, OR',        timezone: "PST,        availability: {,  days: []uesday, ", Thursday, "Saturday]",          timeSlots: []1:00-14 '00", ", 16: 00-19 '00]"        },        experience: {},  yearsOfRecovery: 12,          yearsOfMentoring: 7,          peopleHelped: 156,          areasOfExpertise: []hildhood trauma", ", Dissociation", ', Trust building, "Hypervigilance]",          personalJourney: 'My, journey through trauma recovery taught me that healing is possible with the right support. I combine my professional training with personal experience to offer hope and practical guidance."        },        credentials: {  certifications: []icensed Clinical Social Worker", ", EMDR Certified, "Trauma-Informed Care Specialist]',          training: []omplex PTSD Treatment", ", Somatic Experiencing, 'Internal Family Systems]",",",          education: []h.D Clinical Psychology, "M.S.W. Social Work]'        },        stats: {},  rating: 495,          reviewCount: 124,          responseTime: 18,          completionRate: 98,          activeConnections: 15,          successStories: 98        },        communicationMethods: []ideo, "voice]",        mentoringStyle: 'Gentle, trauma-informed approach with emphasis on safety and empowerment",  isVerified: true,        isActive: true,        lastActive: new Date(Date.now() - 180000)",        joinedAt: new Date("2021-09-10")',        maxMentees: 15,        currentMentees: 15,        pricing: {},  isFree: false,          hourlyRate: 85,          packageOptions: []            {",  id: "pkg-2,',              name: "Trauma, Recovery Journey",              description: "12-week, comprehensive trauma recovery program",  duration: 12,              sessionsIncluded: 24,              price: 1800,              features: []iweekly therapy sessions', ", Crisis support", ', Homework assignments, "Progress tracking]""            }          ]        }      }      {",  id: 'mentor-4,        name: "Jake, Miller",        title: 'Addiction, Recovery Peer",        bio: "Clean, and sober for 9 years, I understand the challenges of early recovery and long-term sobriety. I offer practical support for building a meaningful life in recovery.",        specializations: []ddiction Recovery", ', Relapse Prevention", ", Sober Living, 'Career Rebuilding]",        approaches: []2step program", ", SMART Recovery", ', Harm reduction, "Motivational enhancement]",        languages: []nglish]',",",        location: "Denver, CO",        timezone: 'MST,",        availability: {  days: []onday, ", Tuesday', ", Wednesday", ", Thursday, "Friday]',          timeSlots: []8:00-21 "00", ', 21: 30-23 "00]"        },        experience: {},  yearsOfRecovery: 9,          yearsOfMentoring: 6,          peopleHelped: 203,          areasOfExpertise: []arly recovery support", ", Relapse prevention', ", Family relationship repair, "Career development]',          personalJourney: "I lost everything to addiction - job, family, health. Recovery gave me a second chance at life. Now I help others navigate the challenges and celebrate the victories of sobriety."        },        credentials: {},  certifications: []ertified Addiction Recovery Coach, "Peer Recovery Support Specialist]",          training: []MART Recovery Facilitator', ", Motivational Interviewing, "Family Recovery]',          education: [].S Business Administration]        },        stats: {},  rating: 47,          reviewCount: 142,          responseTime: 35,          completionRate: 88,          activeConnections: 18,          successStories: 134        },        communicationMethods: []hat, ", voice", ", video, "email]',        mentoringStyle: "Direct, and honest, with emphasis on accountability and practical action steps",',  isVerified: true,        isActive: true,        lastActive: new Date(Date.now() - 900000)",",        joinedAt: new Date("2021-12-01")',        maxMentees: 20,        currentMentees: 18,        pricing: {},  isFree: true        }      }    ]    setMentors(mockMentors)  }", []);",  const filteredMentors = React.useMemo(() => mentors.filteredMentors = mentors.filter(mentor => {),    const matchesSearch = mentor.name.toLowerCase().includes(searchQuery.toLowerCase()) ||, []entors]);                         mentor.specializations.some(spec = > spec.toLowerCase().includes(searchQuery.toLowerCase())) ||',                         mentor.bio.toLowerCase().includes(searchQuery.toLowerCase())        const matchesSpecialization = filters.specialization === "all" | | ";",                                 mentor.specializations.some(spec = > spec.toLowerCase().includes(filters.specialization.toLowerCase()));        const matchesRating = mentor.stats.rating >= filters.rating',    const matchesAvailability = filters.availability === "all" | | '                               (filters.availability = == "available";",    const matchesPricing = filters.pricing === "all', ;"                          (filters.pricing = == "free', ;"                          (filters.pricing = == "paid", ;",    const matchesCommunication = filters.communication === 'all", ;",                               mentor.communicationMethods.includes(filters.communication as any)        return matchesSearch && matchesSpecialization && matchesRating && matchesAvailability && matchesPricing & matchesCommunication  });  const sortedMentors = []..filteredMentors].sort((a, b) => {},    switch (sortBy) {},      case rating:,        return b.stats.rating - a.statsrating      case experience:,        return b.experience.yearsOfMentoring - a.experienceyearsOfMentoring      case 'response-time":,        return a.stats.responseTime - b.statsresponseTime      case recent:,        return b.lastActive.getTime() - a.lastActive.getTime()  default:        return 0    }  });  const handleRequestMentorship = () => {},    if (!selectedMentor) return setShowRequestModal(true  },  const submitMentorshipRequest = () => {},    if (!selectedMentor) return // Would normally submit to backend    alert(``our mentorship request has been sent to ${selectedMentor.name}. They will respond within 24-48 hours.`);    setShowRequestModal(false)    setMentorshipRequest({},  type: `ngoing,      goals: []      challenges: []      preferredCommunication: []      availableTimes: []      timeCommitment: , ``,", ``      experience: ",",',  expectations:     })  },  const renderMentorCard = (mentor: Mentor => (",;"    <div key={mentor.id'}, className="mentor-card">", `;`      <div className="mentor-header'>"        <div className="mentor-avatar'>"          {mentor.avatar ? (}            <img src={mentor.avatar}, alt={mentor.name}     />","          ) : (            <User size={40}     />          )"}'          {mentor.isActive && ("}"            <span className='online-indicator", "></span>"          )"}'        </div>        <div className="mentor-info">'          <div className="mentor-name-section">"            <h3>              {mentor.name"}'              {mentor.isVerified && ("}"                <Shield className='verified-badge", size={16}     />"              )"}"            </h3>            <p className='mentor-title">{mentor.title"}</p>'          </div>          <div className="mentor-stats">"            <span className="rating'>"              <Star size={14"}, fill=', currentColor"     />"              {mentor.stats.rating} ({mentor.stats.reviewCount"});"            </span>            <span className='experience">"              <Award size={14}     />              {mentor.experience.yearsOfMentoring'}y mentoring"            </span>            <span className="response-time">"              <Clock size={14}     />              {mentor.stats.responseTime'}h response"            </span>          </div>        </div>        <div className="mentor-pricing'>"          {mentor.pricing?.isFree ? ("}"            <span className="free-badge', ">Free</span>"          ) : ('            <div className="price", -info">"              <span className='price">${mentor.pricing?.hourlyRate}"span>'              <span className="price-unit">/hour</span>"            </div>          )"}'        </div>      </div>"      <p className="mentor-bio'>{mentor.bio"}</p>","      <div className="mentor-specializations'>"        <h4>Specializations: </h4        <div className="specialization-tags'>"          { mentor.specializations.map(spec = > ("   );"            <span key={spec"}, className='specialization-tag">{spec}</span>"          ))'}"        </div>      </div>"      <div className="mentor-details">'        <div className="detail-row">'          <MapPin size={14}     />          <span>{mentor.location} ({mentor.timezone"})</span>"        </div>        <div className="detail-row">'          <Users size={14}     />          <span>{mentor.stats.activeConnections"}, active mentees</span>"        </div>        <div className='detail-row">"          <TrendingUp size={14}     />          <span>{mentor.stats.successStories"}, success stories</span>"        </div>        <div className='detail-row">"          <Globe size={14}     />          <span>{mentor.languages.join(', ")}</span>"        </div>      </div>"      <div className="mentor-communication'>"        <h4>Available via: </h4        <div className="communication-methods'>"          {mentor.communicationMethods.includes("chat") && ("}'            <span className="method-badge">'              <MessageSquare size={12}     /> Chat;            </span>          )}          {mentor.communicationMethods.includes("voice") && ("}"            <span className='method-badge">"              <Phone size={12}     /> Voice;            </span>          )}          {mentor.communicationMethods.includes('video") && ("}"            <span className="method-badge'>"              <Video size={12}     /> Video;            </span>          )"}'        </div>      </div>"      <div className="mentor-availability">"        <h4>Availability: </h4        <div className='availability-info">"          {mentor.availability.days.slice(0, 3).join(', ")}";"          {mentor.availability.days.length > 3 && ` `${mentor.availability.days.length - 3}, more"}'        </div>      </div>";"      <div className='mentor-actions">"        <button ",          className="view-profile-btn',          onClick= { () =>",", `;`            setSelectedMentor(mentor`;            setActiveView('mentor-detail"  );"          "}"
         View Profile        </button>        <button ';",          className="connect-btn',          onClick= {""}"
  () =>",            setSelectedMentor(mentor)            handleRequestMentorship()          '""'"
};          disabled={mentor.currentMentees >= mentor.maxMentees""        >          {mentor.currentMentees >= mentor.maxMentees ? "Fully Booked' : "Connect"}'        </button>      </div    </div> const renderMentorDetail = () =>,    if (!selectedMentor) return null;    return (;      <div className="mentor-detail">"        <div className="mentor-detail-header'>"          <button ",            onClick={() => setActiveView('discover")}",            className="back-btn"          >            ← Back to Mentors          </button>          '          <div className="mentor-profile-header">'            <div className="profile-avatar">"              {selectedMentor.avatar ? (}                <img src={selectedMentor.avatar}, alt={selectedMentor.name}     />) : (                <User size={80}     />              )"}')))           {selectedMentor.isActive && ("}"              <span className='online-indicator large"></span>"              )"}          </div>            <div className="profile-info'>"              <h1>                {selectedMentor.name"}'              {selectedMentor.isVerified && ("}"                <Shield className="verified-badge", size={20}     />'                )"}"  )         </h1>              <p className='profile-title">{selectedMentor.title"}</p>"              <div className="profile-stats'>"                <span className="stat'>"                  <Star size={16"}, fill=", currentColor"     />'                 {selectedMentor.stats.rating} ({selectedMentor.stats.reviewCount"}, reiews);"               </span>                <span className='stat">"                  <Users size={16}     />                  {selectedMentor.stats.activeConnections}/{selectedMentor.maxMentees"}, mentees"                </span>                <span className='stat">"                  <TrendingUp size={16}     />                  {selectedMentor.stats.successStories'}, success stories"                </span>              </div>            </div>            <div className="profile-actions">"              {selectedMentor.pricing?.isFree ? ('}"                <span className="free-badge large'>Free Mentoring</span>"              ) : ("                <div className="pricing-info">'                  <span className="price large">${selectedMentor.pricing?.hourlyRate}</span>'                  <span className="price-unit">/hour</span>"                </div>              )"}'     )        <button ",                className="connect-btn large',                onClick={handleRequestMentorship}                disabled={selectedMentor.currentMentees >= sele}tedMentor.maxMentees"}"     > >    }                {selectedMentor.currentMentees >= select}dMentor.maxMentees ? "Fully Booked" : 'Request Mentorship"}"             </button>            </div>          </div>        </div>'     } }<div clssame="mentor-detail-content">"          <div className="main-content'>"            <section className="about-section'>"              <h2>About {selectedMentor.name}</h2>              <p>{selectedMentor.bio"}</p>",             "              <div className='personal-journey">"                <h3>Personal Journey</h3>                <p>{selectedMentor.experience.personalJourney'}</p>"             </div>            </section>"            <section className="specializations-section">'              <h2>Specializations & Approaches</h2>              <div className="specializations-grid">'                <div className="specializations-list">"                  <h3>Areas of Focus</h3>                  { selectedMentor.specializations.map(spec = > ("   );)                  <span key={spec'}, clas)Name="specialization-tag">{spec}}/span>'                  ))"}"    }>     }>   </di>               <div className="approaches-list">'                  <h3>Therapeutic Approaches</h3>                  { selectedMentor.approaches.map(approach = > ("   );"                   <span key={approach'}, className="approch-tag">{approac}}</span>"                ))"}'  }>            </di>              </div>            </section>"            <section className="experience-section'>"              <h2>Experience & Credentials</h2>              <div className="experience-grid">"                <div className='experience-stats">"                  <div className='stat-item">"                    <TrendingUp size={24"}     />")    }              <sp}n cl>ssName='stat-number">{selectedMentor.experience.yearsOfRecovery | | "N/A'}</span>"                    <span className="stat-label">Years in Recovery</span>"                  </div>                  <div className='stat-item">"                    <Award size={24'}     />"                   <san className="stat-number">{selectedMentor.experience.yearsOfMentoring"}</span>'>      }           <span className="stat-label">Years Mentoring</span>'                  </div>                  <div className="stat-item">"                    <Users size={24"}     />'                  <span lassName="stat-number">{selectedMentor.experience.peopleHelped'}</span>"                   span className="stat-label">People Helped</span>"                  </div>                  <div className='stat-item">"                    <CheckCircle size={24'}     />"                  <spn clasName="stat-number">{selectedMentor.stats.completionRate"}%</span>'                   <san className="stat-label">Completion Rate</span>'                  </div>                </div>                "                <div className="credentials-list">"                  <h3>Certifications & Training</h3>                  { selectedMentor.credentials.certifications.map(cert = > ('   );"    }               <d)v key={cert"}) className='credential-item">"                      <CheckCircle size={16}     />                      <span>{cert}</span>                    </div>                  ))}           }>)    { selectedM}>tor.credentil.raining.map(training = > ("   );"    }               <div )ey={training'), className="credential-item">'                      <Book size={16}     />                      <span>{training}</span>                    </div>                  ))"}"         }>     </div>        }>    </div>           </sction>"            {selectedMentor.pricing?.packageOptions && ("}'            ) <section className="pckages-section">'                <h2>Mentoring Packages</h2>                <div className="packages-grid">"                  { selectedMentor.pricing.packageOptions.map(pkg = > ("   );'           }      ) <div key={pkg.i"}, className="package-card'>"                    <h3>{pkg.name}</h>                      <p>{pkg.description"}</p>"                     <div className"package-details'>"                        <div className="package-stat'>"                          <Calendar size={16}     />                          <span>{pkg.duration"}, weeks</span>"                       </dv>                        <div className="package-stat'>"                          <MessageCircle size={16}     />                          <span>{pkg.sessionsIncluded"}, sessions</span>'                        </div>                      </div>                      <ul className="package-features">"                        { pkg.features.map(feature = > ( )  )   )                   <li key={feature}>;                            <CheckCircle size={14}     />                            {feature)      }                   </li>                        ))"}'  }}                  </ul>                      <div className="package-price">'                        <span className="price">${pkg.price}"span>"     }                  <span className='price-uit">total</span>"                      </div>                    </div>                  ))}    >}          </div>              </section>            )'}"   >      </div"          <div className="idebar-content">'            <div className="availability-card">'              <h3>Availability</h3>              <div className="availability-details">"                <div className="available-days'>"                  <h4>Days: </h4(selectedMentor.availability.days.map(day = > ("  );'    >    )          <span key={day"}) className=")ay-tag">{day}</span>"                  ))'}"             }> </div>                <d}> className="avai>ble-tims'>"                  <h4>Time Slots: </h4(selectedMentor.availability.timeSlots.map(slot = > ("  ))"                    <span key={slot"}, classae='time)tag">{}lot}</span>"                 ))'}"  >            /di>      )         <div classNam="timezone-info">"                  <Clock size={16}     />                  <span>{selectedMentor.timezone'}, time>one</span>"                </div>              </div>            </div>"            <div className='communication-card">"              <h3>Communication Methods</h3>              <div className="communication-options">'                { selectedMentor.communicationMethods.map(method = > (" );)                  <div key={method"}, className='c}m-ption">"                   { method = == "chat");'    }               { method = == "voice");'       }          } { method = == "video");"    }               { method = == "email'};"       }            <span>{method.charAt(0).toUpperCase() + method.slice(1)}</span>                  </div>                ))"}'  >           </div            </div>"           >div clssName="stats-card">"              <h3>Mentor Stats</h3>              <div className='detailed-stats">"                <div className='stat-row">"                  <span className="stat-label">Response Time</span>'                  <span className="stat-value">{selectedMentor.stats.responseTime'}, hour></span>"                </div>                <d>v clasName="sat-row">"                  <span className='stat-label">Success Rate</span>"                  <span className='stat-value">{selectedMentor.stats.completionRate"}%</span>"                </div>                <div classame="stat-row'>"                  <span className="stat-label'>Member Since</span>"                  <span className="stat-value">{selectedMentor.joinedAt.toLocaleDateString()"}</span'                </div>                <div classNam="stat-row">'                  <span className="stat-label">Last Active</span>"                  <span className="stat-value'>"                    {selectedMentor.lastActive.toLocaleDateString()}                  </span>                </div>              </div>            </div>          </div>        </div>      <div>    )  }  retrn(    <div className="mentorship-program'>"     { ctieView = == "discover");"        <div classN}me='discove>-view">"          )div className='page-header">"  >         <h1>Find )our Mentor</h1>            <p>Connect with experienced peer mentors who understand your journey</p>          </div>"          <div className="search-and-filters'>"            <div className="search-bar'>"              <Search className="search-icon"     />"              <input                type = 'text",                placeholder="Search', mentors by name, specialization", or expertise...",                value={searchQuery}                onChange={(e) =     /> setSearchQ}ery(e.target.value)"}"              />            }/div>'     >      <div className="filters-section>"              <select                 value={filters.specialization}                onChange={(e) => setFilters} ...filters, specialization: e.targetvalue)'}"     }        >  >             <option value = "all", >All Secializations</opton>"                <option value = 'anxiety", >Anxiety</option>"                <option value = 'depression", >Depression</option>"                <option value = "trauma", >Trauma & PTSD</option>'                <option value = "addiction", >Addiction Recovery</option>'                <option value = "relationships", >Relationships</option>"              </select>              <select                 value={filters.pricing}                onChange={(e) => setFilters} ...filters, pricing: e.targetvalue)"}'              }           >    <option value = "all", >All Priing</option>'               <option value = "free", >Free</option>"                <option value = "paid', >Paid</option>"              </select>              <select                 value={filters.communication}                onChange={(e) => setFilters( ...filte}s, communication: e.targetvalue)"}'             >                <option value = "all", >All Methods<option>"                <option value = "chat', >Chat</option>"                <option value = "voice', >Voice</option>"                <option value = "video", >Video</option>"              </select>              <select                 value={filters.availability}                onChange={(e) => setFilters( ...filte}s, availability: e.targetvalue)'}"             >                <option value = "all', >All Mentors</ption>"                <option value = "available", >Available Now</option>"              </select>              <select                 value={sortBy}                onChange={(e) => setSortBy(e.target.v}lue as any)'}"             >                <option value = "rating', >Highest Ratd</option>"                <option value = "experience", >Most Experienced</option>"                <option value = 'response-time", >Fastest Response</option>"                <option value = 'recent", >Recently Active</option>"              </select>            </div>          </div>"          <div className="results-summary'>"            <span>{sortedMentors.length"}, mentors foun</span>'            {currentUser.activeMentorships > 0 & (}             }<button)",                onClick={() => setActiveView(}my-mentors")}",               className="my-mentors-btn}              >)               My Mentors ({currentUser.activeMentorships})             </button>            )'}"          </div" }        <div clasName='mentors-grid">"            {ortedMentors.map(renderMentorCard)}          </div>        </div>      )}      { activView = ="mentor-detail"};'      {showRequestModal && selectdentor && ("}"        <div className='request-modal"">"          <div className="modal-cntent'>"            <div className="modalheader'>"              <h2>Request Mentorship with {selectedMentor.name}</h2>              <button onClick={() => setShowRequestMod}l(fals})"}, className="cl)>e-btn">'                <X     />              </button>           </div>"           <div className="request-form'>"              <div className="form-section">"                <h3>What type of mentorship are you looking for?</h3>                <div className='mentorship-types">"                  <label className='type-option">"                    <input                      type = "radio",                      value='one-time",                      checked={mentorshipRequest.type === "one-time}',                >     o>Change={(e) =  /> setMentorshipRequest( ...mentorshipRequest, type: e.ta}getvalue as any)"}"    }            )  />                   <span>One-time consultation</span>                  </lael>                 <label className="type-option">'                    <input                      type = "radio",                      value='ongoing",                      checked={mentorshipRequest.type === "ongoing}",                      onChange={(e) =     /> setMentorshipRequ}st( ...}entorshipequest)ype: e.targetvalue as any)"}'               }    />                    <span>}ngoing mentorship</span>                 </label>                  {selectedMentor.pricing?.packageOptions && ("}"                    <label className='type-option">"                      <input                       type = "radio",                        value='package",                        checked={mentorshipRequest.type === "package}')nChange={(e) =  )  /> setMentorshipRequest( ...mentorshipRequest",","                }     />         }        }   <spa}>Structured packag>/span>                    </label>                  )"}'                /div> >            </div>"             <div className="form-section)>'                <h3>What are your main goals?</h3>                <textarea                  placeholder="Describe", what you hope to achieve through mentorship...",                  value={mentorshipRequest.goals.join("n')}",                  onChange={ (e) => setMentorshipRequest} "}, `;`                    ...mentorshipRequest`,`;',                    goals: e.targt.value.split("n")filter(Boolean) })})>s={4"}"                />       )      </div>' }           <div className="form-section">'               <h3>What challenges are you acing?</h3>                <textarea                  placeholder="Share", the specific challenges you", d like help with...",                  value={mentorshipRequest.challenges.join('n")}",                  onChange={ (e) => setMentorshipRequest( '  }                 ...men>orshipRequest","}challenges: e.target.value.split("n")filter(Boolean) })},                  ros{'}"                />       )      </div>"     }       <div className='form-section">"   )            <h3>Preferred communication methos</h3>                <div className="communication-preferences">'                  { selectedMentor.communicationMethods.map(method = > ("   );"                 )  <labe key={method'}, className="comm-pref">"               )     <input                       type = "checkbox',                        checked={mentorshipRequest.preferredCommunication.includes(method)}                        onChange= {"}"}
  {(e) =    /},                          if (e.target.checked)
},                            setMentorshipRequest({}                              ...mentorshipRequest,                              preferredCommunication: []..mentorshipRequestpreferredCommunication, method)                            >}                          >, else {                            setMentorshipRequest({'"                              ...mentorshipRequest",",                              preferredCommunication: mentorshipRequest.preferredCommunication.filterm = } m !== method`;                            })                          }                      />                      <span>{method.charAt(0).toUpperCase() + method.slice(1)}</span>                    </label>                  ))">                </div>              </div>';"              <div className="form-section'>"                <h3>Your experience with mental health support</h3>                <textarea",",                  placeholder="Tell', us about your experience with therapy, support groups, or other mental health resources...",                  value={mentorshipRequest.experience}                  onChange={(e) => setMentorshipRequest( ...mentorshipRequest", experience: e.target.value>}                 rows={3'}"                /}              </div>"              <div className="form-section">'                <h3>What do you expect from this mentorship?</h3>                <textarea                  placeholder="Describe", your expectations and what success would look like for you...',                  value={mentorshipRequest.expectations}                  onChange={(e) => setMentorshipRequest( ...mentorshipRequest", expectations: e.target.value>>                 rows={3"}"                /}              </div>"              <div className='modal-actions">"                <button onClick={() =} setShowRequestModal(false)'}, className="cancel-btn">",                  Cancel                </button>                <button onClick={submitMentorshipRequest"}, className='submit-btn">",                  Send Request                </button>              </div>            </div>          </div>        </div}      >>      <style jsx>{}       .mentorship-program {},          max-width: 1400px,  margin: 0 auto,  padding: 20px        )       .page-header {},          text-align: center          margin-bottom: 40px        }       .page-header h1 {},  margin: 0 0 10px 0          font-size: 25em,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%>         -webkit-background-clip: text          -webkit-text-fill-color: transparent                .page-header p {},  color: #666,          font-size: 11em,  margin: 0        }       search-and-filters {},          margin-bottom: 30px        }       .earch-bar {},  position: relative,          margin-bottom: 20px        }       .sarch-icon {},  position: absolute,  left: 15px,  top: 50,  transform: translateY(-50%,  width: 20px,  height: 20px,  color: #666}   )    .s)arc-bar input {},  width: 100,  padding: 15px 15px 15px 45px,  border: 2px solid #e5e5e5          border-radius: 12px          font-size: 16px,  transition: bordercolor 0.3s        }       .seach-bar input:focus {},  outline: none          border-color: #667eea        }       .filtrs-section {},  display: 'flex,  gap: 15px          flex-wrap: wrap        }        .filters-section select {},  padding: 12px 15px,  border: 2px solid #e5e5e5          border-radius: 10px          font-size: 14px,  background: white,  cursor: pointer,  transition: bordercolor 0.3s        }        .filters-section select:hover {},          border-color: #667eea        }        .results-summary {},  display: flex          justify-content: spacebetween          align-items: center          margin-bottom: 30px,  color: #666}        .my-mentors-btn {},  padding: 10px 20px,  background: #667eea,  color: white,  border: none          border-radius: 10px,  cursor: pointer,  transition: background 0.3s        }        .my-mentors-btn:hover {},  background: #5a67d8        }        .mentors-grid {},  display: grid          grid-template-columns: repeat(autofill, minmax(450px, 1fr)),  gap: 25px        }        .mentor-card {},  background: white          border-radius: 16px,  padding: 25px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08),  transition: all 0.3s          border-left: 4px solid #667eea        }        .mentor-card:hover {},  transform: translateY(-2px          box-shadow: 0 4px 25px rgba(0, 0, 0, 0.12)        }        .mentor-header {},  display: flex,  gap: 15px          margin-bottom: 20px        }        .mentor-avatar {},  position: relative,  width: 60px,  height: 60px,          border-radius: 50,  background: #f0f0f0,  display: flex          align-items: center          justify-content: center,  color: #666,          flex-shrink: 0        }        .mentor-avatar img {},  width: 100,  height: 100,          border-radius: 50          object-fit: cover        }        .online-indicator {},  position: absolute,  bottom: 0,  right: 0,  width: 16px,  height: 16px,  background: #22c55e,  border: 3px solid white          border-radius: 50        }        .online-indicator.large {},  width: 20px,  height: 20px}        .mentor-info {},  flex: 1        }        .mentor-name-section h3 {},  margin: 0 0 5px 0,  display: flex          align-items: center,  gap: 8px,  color: #333}        .verified-badge {},  color: #667eea}        .mentor-title {},  margin: 0 0 10px 0,  color: #666,          font-size: 14px        }        .mentor-stats {},  display: flex,  gap: 15px          flex-wrap: wrap        }        .mentor-stats span {},  display: flex          align-items: center,  gap: 4px          font-size: 13px,  color: #888}        .rating {},  color: #f59e0b !important}        .mentor-pricing {},          text-align: right          flex-shrink: 0        }        .free-badge {},  background: #dcfce7,  color: #166534,  padding: 6px 12px          border-radius: 12px          font-size: 12px          font-weight: 600        }        .free-badge.large {},  padding: 8px 16px          font-size: 14px        }        .price-info {},          text-align: right        }        .price {},          font-size: 24px          font-weight: bold,  color: #333}        .price.large {},          font-size: 28px        }        .price-unit {},          font-size: 14px,  color: #666}        .mentor-bio {},  color: #666,          line-height: 16          margin-bottom: 20px        }        .mentor-specializations,        .mentor-communication,        .mentor-availability {},          margin-bottom: 15px        }        .mentor-specializations h4,        .mentor-communication h4,        .mentor-availability h4 {},  margin: 0 0 8px 0          font-size: 14px,  color: #333}        .specialization-tags,        .communication-methods {},  display: flex,  gap: 8px          flex-wrap: wrap        }        .specialization-tag {},  background: #e0e7ff,  color: #4c51bf,  padding: 4px 10px          border-radius: 12px          font-size: 12px        }        .method-badge {},  display: flex          align-items: center,  gap: 4px,  background: #f0f0f0,  color: #666,  padding: 4px 8px          border-radius: 12px          font-size: 11px        }        .mentor-details {},  margin: 15px 0,  padding: 15px 0          border-top: 1px solid #e5e5e5          border-bottom: 1px solid #e5e5e5        }        .detail-row {},  display: flex          align-items: center,  gap: 8px,  margin: 5px 0,  color: #666,          font-size: 13px        }        .availability-info {},  color: #666,          font-size: 13px        }        .mentor-actions {},  display: flex,  gap: 10px          margin-top: 20px        }        .view-profile-btn,        .connect-btn {},  flex: 1,  padding: 12px,  border: none          border-radius: 10px          font-size: 15px,  cursor: pointer,  transition: all 0.3s        }        .view-profile-btn {},  background: #f0f0f0,  color: #333}        .view-profile-btn:hover {},  background: #e0e0e0        }        .connect-btn {},  background: #667eea,  color: white}        .connect-btn:hover {},  background: #5a67d8        }        .connect-btn:disabled {},  background: #ccc,  cursor: notallowed        }        .connect-btn.large {},  padding: 15px 30px          font-size: 16px        }        /* Mentor Detail Styles */        .mentor-detail {},          max-width: 1200px,  margin: 0 auto        }        .mentor-detail-header {},          margin-bottom: 30px        }        .back-btn {},  padding: 10px 20px,  background: #f0f0f0,  border: none          border-radius: 8px,  cursor: pointer          margin-bottom: 20px,  color: #666,  transition: background 0.3s        }        .back-btn:hover {},  background: #e0e0e0        }        .mentor-profile-header {},  display: flex,  gap: 30px          align-items: center,  background: white          border-radius: 16px,  padding: 30px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08)        }        .profile-avatar {},  position: relative,  width: 120px,  height: 120px,          border-radius: 50,  background: #f0f0f0,  display: flex          align-items: center          justify-content: center,  color: #666,          flex-shrink: 0        }        .profile-avatar img {},  width: 100,  height: 100,          border-radius: 50          object-fit: cover        }        .profile-info {},  flex: 1        }        .profile-info h1 {},  margin: 0 0 8px 0,  display: flex          align-items: center,  gap: 10px,  color: #333,          font-size: 22em        }        .profile-title {},  margin: 0 0 15px 0,  color: #666,          font-size: 12em        }        .profile-stats {},  display: flex,  gap: 20px          flex-wrap: wrap        }        .profile-stats .stat {},  display: flex          align-items: center,  gap: 5px,  color: #666}        .profile-actions {},          text-align: right          flex-shrink: 0        }        .pricing-info {},          margin-bottom: 20px        }        .mentor-detail-content {},  display: flex,  gap: 30px        }        .main-content {},  flex: 2        }        .sidebar-content {},  flex: 1          max-width: 350px        }        .about-section,        .specializations-section,        .experience-section,        .packages-section {},  background: white          border-radius: 16px,  padding: 30px          margin-bottom: 30px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08)        }        .about-section h2,        .specializations-section h2,        .experience-section h2,        .packages-section h2 {},  margin: 0 0 20px 0,  color: #333}        .personal-journey {},          margin-top: 25px          padding-top: 20px          border-top: 1px solid #e5e5e5        }        .personal-journey h3 {},  margin: 0 0 15px 0,  color: #333}        .specializations-grid {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 30px        }        .specializations-list h3,        .approaches-list h3 {},  margin: 0 0 15px 0,  color: #333}        .approach-tag {},  background: #f3e8ff,  color: #6b21a8,  padding: 4px 10px          border-radius: 12px          font-size: 12px,  margin: 4px 4px 4px 0,  display: inlineblock        }        .experience-grid {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 30px        }        .experience-stats {},  display: grid          grid-template-columns: 1fr 1fr,  gap: 20px        }        .stat-item {},          text-align: center,  padding: 20px,  background: #f7f7f7          border-radius: 12px        }        .stat-number {},  display: block          font-size: 2em          font-weight: bold,  color: #667eea,  margin: 10px 0 5px 0        }        .stat-label {},  color: #666,          font-size: 13px        }        .credentials-list h3 {},  margin: 0 0 15px 0,  color: #333}        .credential-item {},  display: flex          align-items: center,  gap: 8px,  margin: 8px 0,  color: #666}        .packages-grid {},  display: grid          grid-template-columns: repeat(autofit, minmax(300px, 1fr)),  gap: 20px        }        .package-card {},  border: 2px solid #e5e5e5          border-radius: 12px,  padding: 20px,  transition: all 0.3s        }        .package-card:hover {},          border-color: #667eea,  transform: translateY(-2px        }        .package-card h3 {},  margin: 0 0 10px 0,  color: #333}        .package-details {},  display: flex,  gap: 15px,  margin: 15px 0        }        .package-stat {},  display: flex          align-items: center,  gap: 5px,  color: #666,          font-size: 14px        }        .package-features {},          list-style: none,  padding: 0,  margin: 15px 0        }        .package-features li {},  display: flex          align-items: center,  gap: 8px,  margin: 8px 0,  color: #666}        .package-price {},          text-align: center          padding-top: 15px          border-top: 1px solid #e5e5e5        }        .package-price .price {},          font-size: 2em          font-weight: bold,  color: #667eea}        /* Sidebar Cards */        .availability-card,        .communication-card,        .stats-card {},  background: white          border-radius: 16px,  padding: 20px          margin-bottom: 20px          box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08)        }        .availability-card h3,        .communication-card h3,        .stats-card h3 {},  margin: 0 0 15px 0,  color: #333}        .available-days,        .available-times {},          margin-bottom: 15px        }        .available-days h4,        .available-times h4 {},  margin: 0 0 8px 0          font-size: 14px,  color: #666}        .day-tag,        .time-tag {},  background: #f0f0f0,  color: #666,  padding: 4px 8px          border-radius: 8px          font-size: 12px,  margin: 4px 4px 4px 0,  display: inlineblock        }        .timezone-info {},  display: flex          align-items: center,  gap: 8px,  color: #666,          font-size: 14px        }        .communication-options {},  display: flex          flex-direction: column,  gap: 10px        }        .comm-option {},  display: flex          align-items: center,  gap: 8px,  color: #666}        .detailed-stats {},  display: flex          flex-direction: column,  gap: 10px        }        .stat-row {},  display: flex          justify-content: spacebetween,  padding: 8px 0          border-bottom: 1px solid #f0f0f0        }        .stat-label {},  color: #666}        .stat-value {},  color: #333,          font-weight: 600        }        /* Request Modal */        .request-modal {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.5),  display: flex          align-items: center          justify-content: center          z-index: 1000        }        .modal-content {},  background: white          border-radius: 20px,  width: 90,          max-width: 700px          max-height: 90vh          overflow-y: auto        }        .modal-header {},  display: flex          justify-content: spacebetween          align-items: center,  padding: 25px          border-bottom: 1px solid #e5e5e5        }        .modal-header h2 {},  margin: 0,  color: #333}        .close-btn {},  width: 40px,  height: 40px,          border-radius: 50,  border: none,  background: #f0f0f0,  cursor: pointer,  display: flex          align-items: center          justify-content: center,  transition: background 0.3s        }        .close-btn:hover {},  background: #e0e0e0        }        .request-form {},  padding: 25px        }        .form-section {},          margin-bottom: 25px        }        .form-section h3 {},  margin: 0 0 15px 0,  color: #333}        .mentorship-types {},  display: flex          flex-direction: column,  gap: 10px        }        .type-option {},  display: flex          align-items: center,  gap: 10px,  padding: 10px,  border: 1px solid #e5e5e5          border-radius: 8px,  cursor: pointer,  transition: all 0.3s        }        .type-option:hover {},          border-color: #667eea,  background: #f8f9ff        }        .type-option input[]ype="radio]" { ";",  mrgn: 0        }        .form-section textarea {},  width: 100,  padding: 12px,  border: 1px solid #e5e5e5          border-radius: 8px          font-size: 15px,  resize: vertical,          font-family: inherit        }        .communication-preferences {},  display: flex,  gap: 15px          flex-wrap: wrap        }        .comm-pref {},  display: flex          align-items: center,  gap: 8px,  padding: 8px 12px,  border: 1px solid #e5e5e5          border-radius: 8px,  cursor: pointer,  transition: all 0.3s        }        .comm-pref:hover {},          border-color: #667eea,  background: #f8f9ff        }        .modal-actions {},  display: flex,  gap: 10px,  padding: 20px          border-top: 1px solid #e5e5e5        }        .cancel-btn,        .submit-btn {},  flex: 1,  padding: 15px,  border: none          border-radius: 10px          font-size: 16px,  cursor: pointer,  transition: all 0.3s        }        .cancel-btn {},  background: #f0f0f0,  color: #333}        .cancel-btn:hover {},  background: #e0e0e0        }        .submit-btn {},  background: #667eea,  color: white}        .submit-btn:hover {},  background: #5a67d8        }        @media (max-width: 768px {}          .search-and-filters {},            margin-bottom: 20px          }          .filters-section {},            justify-content: spacebetween          }          .mentors-grid {},            grid-template-columns: 1fr          }          .mentor-header {},            flex-direction: column            text-align: center,  gap: 15px          }          .mentor-profile-header {},            flex-direction: column            text-align: center          }          .mentor-detail-content {},            flex-direction: column          }          .sidebar-content {},            max-width: none          },'          .specializations-grid","          .experience-grid {},            grid-template-columns: 1fr          }</style    </d>  )}';'"`")}