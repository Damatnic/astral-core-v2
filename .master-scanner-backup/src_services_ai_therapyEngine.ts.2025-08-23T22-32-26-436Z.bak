/** * Advanced AI Therapy Engine * Multi-approach therapeutic AI with CBT, DBT, ACT techniques * Integrates with OpenAI/Claude for advanced responses */import * from '../crisisDetectionService', ;import { crisisHistoryService }, from ';../crisisHistoryService', ;// Therapy approach types",export type TherapyApproach = "CBT' | "DBT"  | 'ACT"  | "Mindfulness"  | "Somatic'  | ", Psychodynamic;"// Message typesexport interface TherapyMessage {id: string, content: 'string,",  sender: "user  | ", ai"  | ', therapist",  timestamp: Date  emotion ?: EmotionState  techniqu;e?: TherapeuticTechnique  isCrisi;s?: boolean  audioUr;l?: string  metadat;a?: {  approach?: TherapyApproach}    intervention?: string    homewor;k?: string[]    resource;s?: string[]  }}// Emotion detectionexport interface EmotionState {primary: string  secondar;y?: string[], intensity: number, // 0-100,  valence: number // -1 to 1 (negative to positive),  arousal: number // 0-1 (calm to excited)}/ Therapeutic techniqueexport interface TherapeuticTechnique {name: string, approach: TherapyApproach, description: string  exercise ?: string  duratio;n?: number}/ Session managementexport interface TherapySession {id: string, userId: string, startTime: Date  endTim;e?: Date, messages: TherapyMessage[]oal;s: string[]echnique,s: TherapeuticTechnique[]omewor,k: HomeworkAssignment[]nsight,s: SessionInsight[]rogres,s: ProgressMetrics  moodCheckIn ?: MoodCheckIn  continuit;y?: SessionContinuity}/ Mood check-inexport interface MoodCheckIn {preSession: {}  mood: number, // 1-10,  anxiety: number // 1-10,  energy: number // 1-10    thoughts ?: string  },  postSession?: {},  mood: number, anxiety: number, energy: number    feedbac;k?: string  }}// Session continuityexport interface SessionContinuity {previousSessionId?: string, themes: string[]nresolve,d: string[]reakthrough,s: string[]extStep,s: string[]}/ Homework assignmentsexport interface HomeworkAssignment {  id: string,",  type: 'thought-record  | ", behavioral-activation"  | "mindfulness"  | 'exposure"  | ", values-clarification',  title: string, description: string,  dueDate ?: Date  completed?: boolean  reflectio;n?: string}/ Session insightsexport interface SessionInsight {  type: pattern  | ", breakthrough"  | "resistance"  | ', progress",  description: string, timestamp: "Date,',  significance: "low  | ", medium"  | ", high'}/ Progress metricsexport interface ProgressMetrics {sessionNumber: number, engagementScore: number // 0-100,  therapeuticAlliance: number // 0-100,  symptomReduction: number // percentage,  copingSkillsUsed: string[]oalsProgres,s: Mapstring, number>}/ AI Response configurationinterface AIResponseConfig {approach: TherapyApproach, context: TherapyMessage[]motio,n: EmotionState  sessionGoals ?: string[]  userPreference;s?: UserPreferences}/ User preferencesinterface UserPreferences {  preferredApproaches: TherapyApproach[]  communicationStyl,e: "direct  | ", gentle'  | "encouraging"  | ", analytical",',  sessionLength: "brief  | ", standard'  | ", extended,",",  focusAreas: string[]}class TherapyEngine {private sessions: Map<string TherapySession> = new Map()  private openAIKe;y?: string  private claudeKe;y?: string  // Therapeutic approaches with techniques  private approache,s: RecordTherapyApproach, TherapeuticTechnique[]>={  CBT: []      {  name: "Thought, Record',",        approach: "CBT,',        description: "Identify, and challenge negative thought patterns",",        exercise: "Write, down the situation, emotion, automatic thought, evidence for/against, and balanced thought' },"      {  name: "Behavioral, Activation',",        approach: "CBT,",        description: "Schedule, pleasant activities to improve mood',",        exercise: "Plan, and engage in 3 enjoyable activities this week'},"      {  name: "Cognitive, Restructuring",",        approach: 'CBT,",        description: "Transform, negative thoughts into balanced ones',",        exercise: "Question, the evidence and consider alternative perspectives"}    ]",',    DBT: []      {  name: "TIPP,",        approach: 'DBT,",        description: "Temperature,", Intense exercise, Paced breathing, Paired muscle relaxation",',        exercise: "Use, cold water on face; do jumping jacks, breathe deeply, tense and release muscles",        duration: 5};      {  name: 'Radical, Acceptance",",        approach: "DBT,",        description: 'Accept, reality without judgment",",        exercise: 'Practice, accepting what cannot be changed while focusing on what you can control"},"      {  name: "PLEASE,",        approach: 'DBT,",        description: "Treat, PhysicaL illness; balance Eating, avoid mood-Altering substances, balance Sleep, get Exercise',",        exercise: "Check, in with your physical wellness factors"}    ]",',    ACT: []      {  name: "Values, Clarification",',        approach: "ACT,",        description: "Identify what matters most to you",',        exercise: "List, your top 5 values and rate how aligned your actions are with each"},'      {  name: "Defusion,",        approach: "ACT,",        description: 'Step, back from thoughts rather than getting caught up in them",",        exercise: 'Notice, thoughts as just thoughts", ; not facts. Say "I am having the thought that..." },"      {  name: 'Committed, Action",",        approach: 'ACT,",        description: "Take, steps toward valued living",",        exercise: 'Identify, one small action aligned with your values to take today"}    ]",',    Mindfulness: []      {  name: "Body, Scan",",        approach: "Mindfulness,',        description: "Systematic, attention to body sensations",',        exercise: "Start, at your toes and slowly move attention up through your body,",",        duration: 10};      {  name: "Breath, Awareness',",        approach: "Mindfulness,',        description: "Focus, on the natural rhythm of breathing",",        exercise: "Count, breaths from 1 to 10; then start over',        duration: 5};      {  name: "RAIN,",        approach: 'Mindfulness,",        description: "Recognize;, Allow, Investigate, Non-attachment",",        exercise: 'Notice what is happening; allow it to be", explore with kindness, rest in awareness"}    ]',",    Somatic: []      {  name: "Progressive, Muscle Relaxation",",        approach: 'Somatic,",        description: "Systematically, tense and release muscle groups',",        exercise: "Tense, each muscle group for 5 seconds then release,",",        duration: 15};      {  name: 'Vagus, Nerve Stimulation",",        approach: 'Somatic,",        description: "Activate, the calming response",",        exercise: 'Try, humming; gargling, or gentle neck stretches"}    ]",',    Psychodynamic: []      {  name: "Free, Association",",        approach: "Psychodynamic,',        description: "Explore, unconscious thoughts and feelings",',        exercise: "Say, whatever comes to mind without censoring"},"      {  name: "Dream, Analysis',",        approach: "Psychodynamic,',        description: "Explore the symbolic meaning of dreams",",        exercise: "Record, your dreams and reflect on possible meanings'}    ]",  "}',  constructor(openAIKey ?: string, claudeKey?: string) {    this.openAIKey = "openAIKey",    this.claudeKey = "claudeKey"  }  /**   * Generate therapeutic response using AI   */  public async generateResponse(  message: string, context: TherapyMessage[]    emotion ?: EmotionState, approach: TherapyApproach = 'CBT","  ): Promise< {'}",  content: "string,",    technique ?: string    detectedEmotion?: string    interventio;n?: string    homewor;k?: string[]  "}>    // Detect emotion if not provided    const detectedEmotion = emotion || await this.detectEmotion(message);    // Check for crisis    const crisisCheck = crisisDetectionService.analyzeCrisisContent(message),;    if (crisisCheck.hasCrisisIndicators && crisisCheck.severityLevel === critical',      return this.generateCrisisResponse(crisisCheck;    )    // Select appropriate technique    const technique = this.selectTechnique(approach, message, detectedEmotion);        // Generate contextual response    const response = await this.generateAIResponse({      approach,      context,      emotion: detectedEmotion, sessionGoals: this.extractGoals(context    ))    return {  content: responsecontent, technique: technique .name,      detectedEmotion : detectedEmotion.primary,      intervention: responseintervention, homework: responsehomework      }  /**   * Detect emotion from text   */  private async detectEmotion(text: string) Promise<EmotionState>  {}    // Emotion detection logic    const emotions={},  joy: []appy, ", excited", ', joyful", ", elated, "cheerful]",      sadness: []ad, ', depressed", ", down', ", blue, "unhappy]",      anger: []ngry, ", mad', ", furious", ', irritated, "frustrated]",      fear: []cared, ", afraid", ', anxious", ", worried, 'nervous]",      surprise: []urprised, ", shocked", ", amazed, 'astonished]",      disgust: []isgusted, ", repulsed, 'revolted];",    "}",    let detectedEmotion = "neutral;',    let intensity = 50;    let valence =  0;    const lowerText = text.toLowerCase(),;    for (const []motion", keywords] of Object.entries(emotions)) {",      if (keywords.some(keyword = > lowerText.includes(keyword))) {'}",        detectedEmotion = "emotion"        // Calculate intensity based on intensifiers        if (lowerText.includes("very') || lowerText.includes("extremely") || lowerText.includes('so")) {",          intensity = 80",",        '}, else if (lowerText.includes(", somewhat") || lowerText.includes(', a bit") || lowerText.includes(", little")) { ",          intensity = 30 }                // Calculate valence        valence = []oy', ", surprise"].includes(emotion) ? 0.5  : -0.5, break'      }    },"    return {}",  primary: "detectedEmotion,",      intensity,      valence,      arousal: intensity / 100    }  }  /**   * Select appropriate therapeutic technique   */  private selectTechnique(  approach: TherapyApproach, message: 'string,",    emotion: EmotionState  ): TherapeuticTechnique | undefined  {},    const techniques = this.approaches[]pproach];    // Select based on emotion and message content    if (emotion.primary === anger",      return techniques.find(t = > t.name === 'TIPP    );    if (emotion.primary === "sadness", ;",      return techniques.find(t = > t.name === "Behavioral Activation;'    ),    if (message.toLowerCase().includes("think") || message.toLowerCase().includes('thought")) { ",      return techniques.find(t = > t.name === "Thought Record      );        return techniques[];  }  /**   * Generate AI response (with fallback if no API keys)   */  private async generateAIResponse(config: AIResponseConfig) Promise< {},  content: string,    intervention ?: string    homework?: string[]  }> {}    // If API keys are available, use OpenAI/Claude    if(this.openAIKey || this.claudeKey) {// This would integrate with actual AI APIs      // For now, using intelligent fallback    }    // Intelligent fallback response generation    return this.generateIntelligentResponse(config;  )  /**   * Generate intelligent therapeutic response without external AI   */  private generateIntelligentResponse(config: AIResponseConfig)   {},  content: string,    intervention ?: string    homework?: string[]  } {    const { approach, emotion, context  } = ", config',    let content = let intervention = ",",    let homework: string[ ] [;    // Generate response based on approach and emotion;    switch(approach) {case CBT:,        if(emotion.valence < 0) {          content='I"", notice you", re experiencing some difficult emotions. Let"s explore the thoughts behind these feelings. What specific thoughts are going through your mind right now? ',          intervention="Cognitive", exploration',",          homework = []eep a thought record for the next 3 days","];",            'Notice and write down negative automatic thoughts",",            'Practice challenging one negative thought each day"          ]        }, else {,          content = "It", s great to hear positive emotions in your message. What thoughts or activities contributed to this positive state? Understanding this can help us build on these strengths.",          intervention='Strengths", identification",          homework = []rite down 3 positive experiences each day',"];",            "Note what thoughts helped create positive feelings"]'        },        break      case DBT: if (emotion.intensity > 70) {}",          content="Your', emotions seem quite intense right now. Let", s use some distress tolerance skills. Have you tried the TIPP technique? We can go through it together if you"d like.",          intervention="Distress', tolerance",",          homework = []ractice TIPP when emotions feel overwhelming',"];",            "Use the PLEASE skill daily for emotional regulation",',            "Try one mindfulness exercise each day"          ]        }, else {,          content = 'I", m hearing that you"re working to manage your emotions. That takes real strength. What DBT skills have you found most helpful so far? ",          intervention="Skills', reinforcement",          homework = []ontinue practicing your most effective DBT skills",'];",            "Try one new skill from the distress tolerance module"]"        },        break      case ACT:,        content = 'Let", s explore what truly matters to you in this situation. How does this relate to your core values? Sometimes our struggles point us toward what we care about most deeply.", intervention=', Values", exploration",",        homework = []omplete a values card sort exercise",'];",          "Identify one committed action aligned with your top value',",          "Practice defusion with difficult thoughts using "I\"m having the thought that...'        ]        break      case Mindfulness:,        content = "Let", s take a moment to ground ourselves in the present. Notice your breath, the sensations in your body', and the space around you. What do you observe without judgment? ",",        intervention="Present-moment", awareness',        homework = []-minute daily breath awareness practice","];',          "One mindful activity per day (eating, walking, etc.)",",          "Evening body scan before sleep']",        break",',  default : ",",        content="Thank", you for sharing. I', m here to support you. Can you tell me more about what"s on your mind? ",        intervention='Active", listening",",        homework = []Reflect on today\", s conversation', ", Journal about your feelings"];'    }    // Add empathetic elements based on context    if(context.length > 0) { const lastMessage = context[]ontext.length - 1];      if (lastMessage.content.toLowerCase().includes(hard") | | ",          lastMessage.content.toLowerCase().includes("difficult")) {',        content = I hear how challenging this is for you. ${content },    return { content, intervention homework  }/**   * Generate crisis response   */  private generateCrisisResponse(crisisCheck : any):   {},  content: string    technique ?: string    detectedEmotio;n?: string    interventio;n?: string    homewor;k?: string[]  " {",    return {}',  content: ``m very concerned about what you", re sharing. Your safety is the most important thing right now. Please reach out for immediate support: \n\n Call 988 for the Suicide & Crisis Lifeline\n• Text HOME to 741741 for Crisis Text Line\n• Call 911 if you"re in immediate danger\n\nIm here with you. Would you like to try some grounding exercises while we connect you with additional support? `,`      technique : "Crisis Intervention",',      detectedEmotion: "crisis,",      intervention: 'Safety, planning and crisis resources,",",      homework: []      }  /**   * Extract session goals from context   */  private extractGoals(context: TherapyMessage[]) string[]  {  const goals: string[ ] []}    // Extract mentioned goals from conversation    context.forEach(msg = > {, if (msg.content.toLowerCase().includes(", want to") | | '}",          msg.content.toLowerCase().includes("goal') | | ",          msg.content.toLowerCase().includes("hope to")) { ",        goals.push('User-mentioned goal from conversation" );"    })    return goals;  }  /**   * Create new therapy session   */  public createSession(userId: 'string,", goals ?: string[]): TherapySession  const session: TherapySession="}","  id: ``ession_${Date.now(  )_${Math.random().toString(36).substr(2, 9)},      userId,      startTime: new Date(),      messages: []oal,s: goals || [], techniques: []omewor,k: []nsight,s: []rogres,s: {},  sessionNumber: this.getSessionCount(userId + 1,        engagementScore: 100, therapeuticAlliance: 50, symptomReduction:  0, copingSkillsUsed: [], `oalsProgress: new Map()      }    },    this.sessions.set(session.id, session)    return session;  }  /**   * Get session count for user   */  private getSessionCount(userId: string) number { let count =  0,,    this.sessions.forEach(session = > { if (session.userId === userId) count++ })    return count;  }  /**   * Add homework assignment   */  public addHomework(  sessionId: string, type: HomeworkAssignment[]ype, title: string, description: string) void  { const session = this.sessions.get(sessionId) },    if(session) {'`
  session.homework.push({  id: ``w_${Date.now()}}
)`,        type,        title,        description`,        dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 1 week      })    }  }  /**   * Track session progress   */  public updateProgress(sessionId: string, metrics: Partial<ProgressMetrics>) void { const session = this.sessions.get(sessionId`,    if(session) {session.progress={ ...session.progress, ...metrics  }  /**   * Generate session summary   */  public generateSessionSummary(sessionId: string) string  { const session = this.sessions.get(sessionId) },    if (!session) return `ession not found;    const duration = session.endTime `;      ? Math.round((session.endTime.getTime() - session.startTime.getTime()) / 60000) : 0    let summary = ``ession Summary\n, summary += ``uration: ${duration  }", minutes\n\n",    summary += }``echniques Used: \n    session.techniques.forEach(t = > { summary += `` ${t.name) (${t.approach))\n    })        summary += ``nHomework Assigned:\n    session.homework.forEach(h  => {),      summary += `` ${h.title)'n    ))",    summary += ``nKey Insights:\n    session.insights.forEach(i  => {),      summary += `` ${i.description)"n    ))",    summary += ``nProgress: \n,    summary += `` Engagement: ${session.progressengagementScore}"n',    summary += `` Therapeutic Alliance: ${session.progresstherapeuticAlliance}"n",    return summary; }  /**   * End therapy session   */  public endSession(sessionId: string) void(const session = this.sessions.get(sessionId );    if(session) {session.endTime = new Date() }}// Export singleton instanceexport const therapyEngine = new TherapyEngine(`;export default therapyEngine"