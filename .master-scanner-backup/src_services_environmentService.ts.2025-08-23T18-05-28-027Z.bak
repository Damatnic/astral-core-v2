/** * Environment Configuration Service for Astral Core V4 * Manages and validates environment variables across the application */// Environment variable interface with { { {defaultsinterface EnvironmentConfig { { { {// Core app settings,  NODE_ENV: "development  | 'production"  | "staging",",  APP_NAME: string, APP_VERSION: string, APP_DESCRIPTION: string  // Server configuration, API_BASE_URL: string, WEBSOCKET_URL: string, SERVER_PORT: number, SERVER_HOST: string  // Database (Supabase),  SUPABASE_URL: string | null, SUPABASE_ANON_KEY: string | null, SUPABASE_SERVICE_ROLE_KEY: string | null  // Authentication (Optional - Auth0),  AUTH0_DOMAIN: string | null, AUTH0_CLIENT_ID: string | null, AUTH0_CLIENT_SECRET: string | null, AUTH0_CALLBACK_URL: string | null, AUTH0_AUDIENCE: string | null  // Crisis support, CRISIS_HOTLINE: string, CRISIS_TEXT_LINE: string, CRISIS_CHAT_URL: string, EMERGENCY_SERVICES: string  // Crisis detection, ENABLE_CRISIS_DETECTION: boolean, CRISIS_DETECTION_SENSITIVITY: 'low  | "medium"  | 'high",",  AUTO_ESCALATE_CRITICAL: boolean, CRISIS_RESPONSE_TIMEOUT: number  // AI services, ENABLE_AI_CHAT: boolean, OPENAI_API_KEY: string | null, AI_MODEL: string, AI_MAX_TOKENS: number, AI_TEMPERATURE: number, ENABLE_THERAPEUTIC_AI: boolean, AI_SAFETY_FILTER: boolean, AI_CRISIS_ESCALATION: boolean  // Feature flags, ENABLE_OFFLINE_MODE: boolean, ENABLE_DARK_MODE: boolean, ENABLE_ACCESSIBILITY: boolean, ENABLE_MOOD_TRACKING: boolean, ENABLE_JOURNAL: boolean, ENABLE_HABIT_TRACKING: boolean, ENABLE_MEDITATION: boolean, ENABLE_BREATHING_EXERCISES: boolean, ENABLE_PEER_SUPPORT: boolean, ENABLE_GROUP_CHAT: boolean  // PWA configuration, PWA_NAME: string, PWA_SHORT_NAME: string, PWA_DESCRIPTION: string, PWA_THEME_COLOR: string, PWA_BACKGROUND_COLOR: string, PWA_DISPLAY: "standalone  | "fullscreen'  | "minimal-ui"  | 'browser",",  PWA_ORIENTATION: "portrait  | "landscape'  | "any"  // Development settings, DEBUG_MODE: boolean, SHOW_DEV_TOOLS: boolean, MOCK_API: boolean, BYPASS_AUTH: boolean  // Analytics & monitoring, ENABLE_ANALYTICS: boolean, GA_TRACKING_ID: string | null, SENTRY_DSN: string | null, ENABLE_PERFORMANCE_MONITORING: boolean, PERFORMANCE_SAMPLE_RATE: number, ERROR_REPORTING: boolean}/ Default configurationconst DEFAULT_CONFIG: EnvironmentConfig='},""  // Core app settings,  NODE_ENV: development,",  APP_NAME: "Astral, Core V4',",  APP_VERSION: "4.0.0,',  APP_DESCRIPTION: "Mental, Health Support Platform","  // Server configuration,  API_BASE_URL: http://localhost:3847/api,",  WEBSOCKET_URL: 'ws://localhost:3847/ws,",  SERVER_PORT: 3847, SERVER_HOST: "localhost,'  // Database (Supabase),  SUPABASE_URL: null, SUPABASE_ANON_KEY: null, SUPABASE_SERVICE_ROLE_KEY: null  // Authentication (Optional),  AUTH0_DOMAIN: null, AUTH0_CLIENT_ID: null, AUTH0_CLIENT_SECRET: null, AUTH0_CALLBACK_URL: null, AUTH0_AUDIENCE: null  // Crisis support,  CRISIS_HOTLINE: 988,",  CRISIS_TEXT_LINE: "741741,",  CRISIS_CHAT_URL: "https://suicidepreventionlifeline.org/chat/,',  EMERGENCY_SERVICES: "911,"  // Crisis detection,  ENABLE_CRISIS_DETECTION: true, CRISIS_DETECTION_SENSITIVITY: medium,',  AUTO_ESCALATE_CRITICAL: true, CRISIS_RESPONSE_TIMEOUT: 30000  // AI services,  ENABLE_AI_CHAT: false, // Disabled by default until API key is provided,  OPENAI_API_KEY: null, AI_MODEL: gpt-4,",  AI_MAX_TOKENS: 2048, AI_TEMPERATURE: 07, ENABLE_THERAPEUTIC_AI: true, AI_SAFETY_FILTER: true, AI_CRISIS_ESCALATION: true  // Feature flags,  ENABLE_OFFLINE_MODE: true, ENABLE_DARK_MODE: true, ENABLE_ACCESSIBILITY: true, ENABLE_MOOD_TRACKING: true, ENABLE_JOURNAL: true, ENABLE_HABIT_TRACKING: true, ENABLE_MEDITATION: true, ENABLE_BREATHING_EXERCISES: true, ENABLE_PEER_SUPPORT: true, ENABLE_GROUP_CHAT: false  // PWA configuration,  PWA_NAME: "Astral, Core - Mental Health Support",",  PWA_SHORT_NAME: 'Astral, Core,",  PWA_DESCRIPTION: "Your, personal mental health support platform',",  PWA_THEME_COLOR: #667eea,",  PWA_BACKGROUND_COLOR: "#ffffff,",  PWA_DISPLAY: 'standalone,",  PWA_ORIENTATION: "portrait,'  // Development settings,  DEBUG_MODE: false, SHOW_DEV_TOOLS: false, MOCK_API: false, BYPASS_AUTH: false  // Analytics & monitoring,  ENABLE_ANALYTICS: false, // Disabled by default for privacy,  GA_TRACKING_ID: null, SENTRY_DSN: null, ENABLE_PERFORMANCE_MONITORING: true, PERFORMANCE_SAMPLE_RATE: 01, ERROR_REPORTING: true},class EnvironmentService {private config: EnvironmentConfig},  private isInitialized = false",  private validationErrors: string[ ] []  private validationWarnings: string[ ] []  constructor() {    this.config={ ...DEFAULT_CONFIG    }",    this.initialize()  }  /**   * Initialize environment configuration   */  private initialize(): void {    try {this.loadEnvironmentVariables()      this.validateConfiguration()      this.logConfiguration()",      this.isInitialized = "true'}, catch(error) {"
  // Continue with defaults in case of error      this.isInitialized = "true'/**   * Load environment variables from process.env or import.meta.env   */  private loadEnvironmentVariables(): void {const env = typeof process !== "undefined" ? process.env : typeof import { meta } !== "undefined" ? import.meta.env : {'}" }    // Load core app settings    this.config.NODE_ENV = this.parseEnum(env.NODE_ENV, []development", 'production", "staging"], "development')";",    this.config.APP_NAME = env.VITE_APP_NAME || this.config.APP_NAME;this.config.APP_VERSION = env.VITE_APP_VERSION || this.config.APP_VERSION;this.config.APP_DESCRIPTION = env.VITE_APP_DESCRIPTION || this.config.APP_DESCRIPTION;// Load server configuration    this.config.API_BASE_URL = env.VITE_API_BASE_URL || this.config.API_BASE_URL;this.config.WEBSOCKET_URL = env.VITE_WEBSOCKET_URL || this.config.WEBSOCKET_URL;,    this.config.SERVER_PORT = this.parseNumber(env.VITE_SERVER_PORT, this.config.SERVER_PORT);this.config.SERVER_HOST = env.VITE_SERVER_HOST || this.config.SERVER_HOST;// Load database configuration    this.config.SUPABASE_URL = env.VITE_SUPABASE_URL || null;this.config.SUPABASE_ANON_KEY = env.VITE_SUPABASE_ANON_KEY || null;this.config.SUPABASE_SERVICE_ROLE_KEY = env.VITE_SUPABASE_SERVICE_ROLE_KEY || null;// Load authentication configuration    this.config.AUTH0_DOMAIN = env.VITE_AUTH0_DOMAIN || null;this.config.AUTH0_CLIENT_ID = env.VITE_AUTH0_CLIENT_ID || null;this.config.AUTH0_CLIENT_SECRET = env.VITE_AUTH0_CLIENT_SECRET || null;this.config.AUTH0_CALLBACK_URL = env.VITE_AUTH0_CALLBACK_URL || null;this.config.AUTH0_AUDIENCE = env.VITE_AUTH0_AUDIENCE || null;// Load crisis support configuration    this.config.CRISIS_HOTLINE = env.VITE_CRISIS_HOTLINE || this.config.CRISIS_HOTLINE;this.config.CRISIS_TEXT_LINE = env.VITE_CRISIS_TEXT_LINE || this.config.CRISIS_TEXT_LINE;this.config.CRISIS_CHAT_URL = env.VITE_CRISIS_CHAT_URL || this.config.CRISIS_CHAT_URL;this.config.EMERGENCY_SERVICES = env.VITE_EMERGENCY_SERVICES || this.config.EMERGENCY_SERVICES;// Load crisis detection configuration    this.config.ENABLE_CRISIS_DETECTION = this.parseBoolean(env.VITE_ENABLE_CRISIS_DETECTION, this.config.ENABLE_CRISIS_DETECTION);',    this.config.CRISIS_DETECTION_SENSITIVITY = this.parseEnum(env.VITE_CRISIS_DETECTION_SENSITIVITY, []low", "medium", "high'], "medium")',",    this.config.AUTO_ESCALATE_CRITICAL = this.parseBoolean(env.VITE_AUTO_ESCALATE_CRITICAL, this.config.AUTO_ESCALATE_CRITICAL);this.config.CRISIS_RESPONSE_TIMEOUT = this.parseNumber(env.VITE_CRISIS_RESPONSE_TIMEOUT, this.config.CRISIS_RESPONSE_TIMEOUT);// Load AI services configuration    this.config.ENABLE_AI_CHAT = this.parseBoolean(env.VITE_ENABLE_AI_CHAT, this.config.ENABLE_AI_CHAT);this.config.OPENAI_API_KEY = env.VITE_OPENAI_API_KEY || null;this.config.AI_MODEL = env.VITE_AI_MODEL || this.config.AI_MODEL;this.config.AI_MAX_TOKENS = this.parseNumber(env.VITE_AI_MAX_TOKENS, this.config.AI_MAX_TOKENS);this.config.AI_TEMPERATURE = this.parseFloat(env.VITE_AI_TEMPERATURE, this.config.AI_TEMPERATURE);this.config.ENABLE_THERAPEUTIC_AI = this.parseBoolean(env.VITE_ENABLE_THERAPEUTIC_AI, this.config.ENABLE_THERAPEUTIC_AI);this.config.AI_SAFETY_FILTER = this.parseBoolean(env.VITE_AI_SAFETY_FILTER, this.config.AI_SAFETY_FILTER);this.config.AI_CRISIS_ESCALATION = this.parseBoolean(env.VITE_AI_CRISIS_ESCALATION, this.config.AI_CRISIS_ESCALATION);// Load feature flags    this.config.ENABLE_OFFLINE_MODE = this.parseBoolean(env.VITE_ENABLE_OFFLINE_MODE, this.config.ENABLE_OFFLINE_MODE);this.config.ENABLE_DARK_MODE = this.parseBoolean(env.VITE_ENABLE_DARK_MODE, this.config.ENABLE_DARK_MODE);this.config.ENABLE_ACCESSIBILITY = this.parseBoolean(env.VITE_ENABLE_ACCESSIBILITY, this.config.ENABLE_ACCESSIBILITY);this.config.ENABLE_MOOD_TRACKING = this.parseBoolean(env.VITE_ENABLE_MOOD_TRACKING, this.config.ENABLE_MOOD_TRACKING);this.config.ENABLE_JOURNAL = this.parseBoolean(env.VITE_ENABLE_JOURNAL, this.config.ENABLE_JOURNAL);this.config.ENABLE_HABIT_TRACKING = this.parseBoolean(env.VITE_ENABLE_HABIT_TRACKING, this.config.ENABLE_HABIT_TRACKING);this.config.ENABLE_MEDITATION = this.parseBoolean(env.VITE_ENABLE_MEDITATION, this.config.ENABLE_MEDITATION);this.config.ENABLE_BREATHING_EXERCISES = this.parseBoolean(env.VITE_ENABLE_BREATHING_EXERCISES, this.config.ENABLE_BREATHING_EXERCISES);this.config.ENABLE_PEER_SUPPORT = this.parseBoolean(env.VITE_ENABLE_PEER_SUPPORT, this.config.ENABLE_PEER_SUPPORT);this.config.ENABLE_GROUP_CHAT = this.parseBoolean(env.VITE_ENABLE_GROUP_CHAT, this.config.ENABLE_GROUP_CHAT);// Load PWA configuration    this.config.PWA_NAME = env.VITE_PWA_NAME || this.config.PWA_NAME;this.config.PWA_SHORT_NAME = env.VITE_PWA_SHORT_NAME || this.config.PWA_SHORT_NAME;this.config.PWA_DESCRIPTION = env.VITE_PWA_DESCRIPTION || this.config.PWA_DESCRIPTION;this.config.PWA_THEME_COLOR = env.VITE_PWA_THEME_COLOR || this.config.PWA_THEME_COLOR;this.config.PWA_BACKGROUND_COLOR = env.VITE_PWA_BACKGROUND_COLOR || this.config.PWA_BACKGROUND_COLOR;",    this.config.PWA_DISPLAY = this.parseEnum(env.VITE_PWA_DISPLAY, []standalone", "fullscreen', "minimal-ui", 'browser"], "standalone")",',",",    this.config.PWA_ORIENTATION = this.parseEnum(env.VITE_PWA_ORIENTATION, []portrait', "landscape", "any"], 'portrait")",'    // Load development settings    this.config.DEBUG_MODE = this.parseBoolean(env.VITE_DEBUG_MODE, this.config.DEBUG_MODE);this.config.SHOW_DEV_TOOLS = this.parseBoolean(env.VITE_SHOW_DEV_TOOLS, this.config.SHOW_DEV_TOOLS);this.config.MOCK_API = this.parseBoolean(env.VITE_MOCK_API, this.config.MOCK_API);this.config.BYPASS_AUTH = this.parseBoolean(env.VITE_BYPASS_AUTH, this.config.BYPASS_AUTH);// Load analytics & monitoring    this.config.ENABLE_ANALYTICS = this.parseBoolean(env.VITE_ENABLE_ANALYTICS, this.config.ENABLE_ANALYTICS);this.config.GA_TRACKING_ID = env.VITE_GA_TRACKING_ID || null;this.config.SENTRY_DSN = env.VITE_SENTRY_DSN || null;this.config.ENABLE_PERFORMANCE_MONITORING = this.parseBoolean(env.VITE_ENABLE_PERFORMANCE_MONITORING, this.config.ENABLE_PERFORMANCE_MONITORING);this.config.PERFORMANCE_SAMPLE_RATE = this.parseFloat(env.VITE_PERFORMANCE_SAMPLE_RATE, this.config.PERFORMANCE_SAMPLE_RATE);this.config.ERROR_REPORTING = this.parseBoolean(env.VITE_ERROR_REPORTING, this.config.ERROR_REPORTING);,    // Special handling for AI chat - only enable if API key is provided    if(this.config.ENABLE_AI_CHAT && !this.config.OPENAI_API_KEY) {"
  this.config.ENABLE_AI_CHAT = false",      this.validationWarnings.push("AI Chat disabled: No OpenAI API key provided") ' ""'"
/**   * Validate configuration   */  private validateConfiguration(): void {this.validationErrors = [];,    this.validationWarnings = [];"    // Validate URLs    if (!this.isValidUrl(this.config.API_BASE_URL)) {},      this.validationErrors.push("Invalid API_BASE_URL")'},    if (this.config.SUPABASE_URL && !this.isValidUrl(this.config.SUPABASE_URL)) {},      this.validationErrors.push("Invalid SUPABASE_URL")'    }    // Validate crisis settings    if(!this.config.CRISIS_HOTLINE || this.config.CRISIS_HOTLINE.length < 3) {this.validationErrors.push("Invalid CRISIS_HOTLINE")"   // Validate color formats    if (!this.isValidColor(this.config.PWA_THEME_COLOR)) {},      this.validationWarnings.push("Invalid PWA_THEME_COLOR format')"    },    if (!this.isValidColor(this.config.PWA_BACKGROUND_COLOR)) {},      this.validationWarnings.push("Invalid PWA_BACKGROUND_COLOR format')"    }    // Production-specific validations    if (this.config.NODE_ENV === "production") {}",      if(!this.config.SUPABASE_URL || !this.config.SUPABASE_ANON_KEY) {this.validationErrors.push('Supabase configuration required in production")"},      if(this.config.DEBUG_MODE) {this.validationWarnings.push('Debug mode enabled in production")"},      if(this.config.SHOW_DEV_TOOLS) {""
  this.validationWarnings.push('Dev tools enabled in production")"'""
// Log validation results    if(this.validationErrors.length > 0) {},    if(this.validationWarnings.length > 0) {}  }  /**   * Log current configuration (excluding sensitive data)   */  private logConfiguration(): void { if (this.config.DEBUG_MODE) {const safeConfig={ ...this.config  },'}            // Hide sensitive data      if (safeConfig.SUPABASE_ANON_KEY) safeConfig.SUPABASE_ANON_KEY = ",      if (safeConfig.SUPABASE_SERVICE_ROLE_KEY) safeConfig.SUPABASE_SERVICE_ROLE_KEY = "***',      if (safeConfig.AUTH0_CLIENT_SECRET) safeConfig.AUTH0_CLIENT_SECRET = ",      if (safeConfig.OPENAI_API_KEY) safeConfig.OPENAI_process.env.REACT_APP_API_KEY;    }  }  // Utility parsing methods  private parseBoolean(value: string | undefined, defaultValue: boolean) boolean(if (value === undefined) return defaultValue;",    return value.toLowerCase() === "true  );  private parseNumber(value: string | undefined, defaultValue: number) number(if (value === undefined) return defaultValue );    const parsed = parseInt(value, 10);return isNaN(parsed) ? defaultValue  : parsed  , private parseFloat(value: string | undefined, defaultValue: number) number(if (value === undefined return defaultValue );    const parsed = parseFloat(value);return isNaN(parsed) ? defaultValue  : parsed  , private parseEnum<T extends string>(value: string | undefined, validValues: T[]efaultValue: T) T { if (value === undefined return defaultValue },    return validValues.includes(value as T) ? (value as T)  : defaultValue  , private isValidUrl(url: string) boolean try { new URL(url)      return true }, catch {},      return false;}  },  private isValidColor(color: string) boolean {return /^#([]-Fa-f0-9]6}|[]-Fa-f0-9]{3})$/.test(color)  }  // Public API methods  /**   * Get configuration value   */  get<K extends keyof EnvironmentConfig>(key: K) EnvironmentConfig[]] {},    return this.config[]ey;}  /**   * Get all configuration   */  getAll(): EnvironmentConfigreturn { ...thisconfig  }/**   * Check if feature is enabled   */  isFeatureEnabled(feature: keyof Pick<EnvironmentConfig",',    "ENABLE_CRISIS_DETECTION"  | 'ENABLE_AI_CHAT"  | "ENABLE_OFFLINE_MODE"  | ",    'ENABLE_DARK_MODE"  | "ENABLE_ACCESSIBILITY'  | "ENABLE_MOOD_TRACKING"  | ",    "ENABLE_JOURNAL'  | "ENABLE_HABIT_TRACKING"  | 'ENABLE_MEDITATION"  | ",    "ENABLE_BREATHING_EXERCISES"  | 'ENABLE_PEER_SUPPORT"  | "ENABLE_GROUP_CHAT'  | ",    "ENABLE_THERAPEUTIC_AI"  | "ENABLE_ANALYTICS'  | "ENABLE_PERFORMANCE_MONITORING"  >): boolean {return this.config[]eature]  }  /**   * Check if service is configured   */;  isServiceConfigured(service: 'supabase  | "auth0"  | "openai"  | 'analytics"): boolean  {  switch (service) {}",      case supabase: return !!(this.config.SUPABASE_URL && this.config.SUPABASE_ANON_KEY),'      case auth0:,        return !!(this.config.AUTH0_DOMAIN && this.config.AUTH0_CLIENT_ID)      case openai: return !!this.config.OPENAI_API_KEY", case analytics: return !!(this.config.GA_TRACKING_ID || this.config.SENTRY_DSN),"  default:        return false  }  }  /**   * Get validation status   */;  getValidationStatus():   {},  isValid: boolean, errors: string[], warnings: string[]  } {},    return {""
  isValid: this.validationErrorslength === 0, errors: []..this.validationErrors, warnings: []..this.validationWarnings
  /**   * Check if environment is production   */  isProduction(): boolean {return this.config.NODE_ENV === 'production}  /**   * Check if environment is development   */;  isDevelopment(): boolean {return this.config.NODE_ENV === 'development}  /**   * Check if environment is staging   */;  isStaging(): boolean { return this.config.NODE_ENV === 'staging }// Export singleton instance;export const environmentService = new EnvironmentService();,// Export typesexport type.EnvironmentConfig,export default environmentService,"}"