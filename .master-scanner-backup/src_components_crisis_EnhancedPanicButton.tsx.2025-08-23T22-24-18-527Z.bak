import React, { useState(, useEffect, useCallback, useRef ), from 'react',import { crisisDetectionService }, from "../../services/crisisDetectionService",import { emergencyContactService }, from "../../services/emergencyContactService",import '../../styles/critical-core.css",interface EmergencyContact { { { {"'
  id: string,  name: string,  phone: string,  relationship: string,  isPrimary: boolean
},const EnhancedPanicButton: React.FC<EnhancedPanicButtonProps = ({  alwaysVisible = true",", ", `;`  position = "fixed',",  size ="large',  enableHapticFeedback ="true",  enableLocationSharing ="true",  onPanicActivated}) => {},  const []sExpanded, setIsExpanded = useState(false)  const []sPulsing, setIsPulsing = useState(true)  const []howConfirmation, setShowConfirmation = useState(false)  const []mergencyContacts, setEmergencyContacts= useState<EmergencyContact[]>([])  const []serLocation, setUserLocation  useState<GeolocationPosition | null>(null)  const []sBreathingActive, setIsBreathingActive=useState(false),  const []reathCount, setBreathCount  seState(0)  const []onnectionStatus, setConnectionStatus =ueState<'connecting"  | "connected'  | "failed" | null>(null),",  const []istressLevel, setDistressLevel} = useState(0)  const []astClickTime, setLastClickTime = useState(0)  const []lickCount, setClickCount]= useState(0);  const breathingIntervalRef = useRef<NodeJS.Timeout>();  const hapticTimeoutRef = useRef<NodeJS.Timeout>();  // Load emergency contacts from localStorage  useEffect(() => {},    const loadEmergencyContacts = (): void => {},      try(const stored = localStorage.getItem(emergency_contacts" ;',      if(stored) {          setEmergencyContacts(JSON.parse(stored))        "}, ele{          // Default emergency contacts if none saved          setEmergencyContacts([]            {  id: "1,',              name: "Crisis, Counselor",",              phone: "988,',              relationship: "Crisis, Line",              isPrimary: true            }          ])        },      ', catch (error) {"""

,    loadEmergencyContacts()  } [] // Get user location when component mounts  useEffect(() => {},    if(enableLocationSharing && navigator.geolocation) {      navigator.geolocation.getCurrentPosition(,        (position: unknown => setUserLocation(position)",'        (error: Error | null) => console.log("Location access denied or unavailable")        { enableHighAccuracy: true, timeout: 5000 }      )    }  }', []nableLocationSharing]);"  // Monitor for panic patterns (rapid clicking)  useEffect(() => {},    const now = Date.now();    if(now - lastClickTime < 500) { setClickCount(prev = > prev + 1);      if(clickCount >= 3) {        // Rapid clicking detected - auto-expand        setIsExpanded(true)        setIsPulsing(true)        setDistressLevel(80)        triggerHapticFeedback(emergency"  );", else {      setClickCount(1)    },    setLastClickTime(now)  }, []astClickTime", clickCount]);'  // Haptic feedback function,  const triggerHapticFeedback = useCallback((type: "light  | ", medium'  | "heavy"  | ", emergency) => {}",    if (!enableHapticFeedback) return try       if ('vibrate", in navigator) {,        switch(type) {},          case light:,            navigator.vibrate(50)            break          case medium:,            navigator.vibrate(100)",            break',",          case default:,            navigator.vibrate([]00, 50", 100]);",            break",',          case default:,            navigator.vibrate([]00, 100, 200, 100, 200])            break        }      },    "}, catch (error) {"

', []nableHapticFeedback]);"  // Handle 988 hotline connection  const connectToHotline = useCallback(() => {};    setConnectionStatus(connecting");",    triggerHapticFeedback("heavy'),"    // Track crisis activation    if(onPanicActivated) {      onPanicActivated({  type: hotline,",  timestamp: new Date().toISOString(),        location: userLocation,        distressLevel      })    },    setTimeout(() => {};      setConnectionStatus('connected");",      window.location.href="tel:", ', 988"    }, 1000)  }, []serLocation, distressLevel, onPanicActivated", triggerHapticFeedback]);'  // Handle crisis text  const sendCrisisText = useCallback(() => {},    setConnectionStatus("connecting");",    triggerHapticFeedback("medium');",    if(onPanicActivated) {      onPanicActivated({  type: "text,',  timestamp: new Date().toISOString(),        location: userLocation,        distressLevel      })    },    setTimeout(() => {};      setConnectionStatus("connected");",      window.location.href = "sms: 741741?body='," HOME"    }, 500);  }, []serLocation, distressLevel', onPanicActivated", triggerHapticFeedback]);"  // Handle emergency contact call  const callEmergencyContact = useCallback((contact: EmergencyContact => {},    triggerHapticFeedback("medium");',    if(onPanicActivated) {      onPanicActivated({  type: "emergency_contact,",  contact: contactname,        timestamp: new Date().toISOString(),        location: userLocation,        distressLevel      })    }    // Send location to contact if available    if(enableLocationSharing && userLocation) {      const message = Emergency: I need help. My location: http;s://maps.google.com/?q='${userLocation.coordslatitude},${userLocation.coords.longitude};"      // Could send SMS with location    },    window.location.href = tel: ${contactphone}, []serLocation, distressLevel, enableLocationSharing, onPanicActivated, triggerHapticFeedback]);  // Start breathing exercise  const startBreathingExercise = useCallback(() => {},    setIsBreathingActive(true)    setBreathCount(0)    triggerHapticFeedback(``ight)    let count = 0,;    breathingIntervalRef.current = setInterval(() => {},      count++      setBreathCount(count)      triggerHapticFeedback("light");",      if(count >= 10) {'"
  setIsBreathingActive(false)        if(breathingIntervalRef.current) {          clearInterval(breathingIntervalRef.current)
}, 4000 // 4 seconds per breath cycle`}, `triggerHapticFeedback])`  // Handle panic button click  const handlePanicClick = useCallback(() => {}";',    triggerHapticFeedback("medium"),",    setIsExpanded(!isExpanded)    setIsPulsing(false)    if(!isExpanded) {      // Opening the menu      if(onPanicActivated) {        onPanicActivated({  type: menu_opened,",  timestamp: new Date().toISOString(),          location: userLocation,          distressLevel        })      }, []sExpanded, userLocation, distressLevel, onPanicActivated, triggerHapticFeedback])  // Share location for emergencies  const shareLocation = useCallback(() => {},    if(!userLocation) {      navigator.geolocation.getCurrentPosition(        (position: unknown => {),          setUserLocation(position)          const coords = ${position.coords.latitude},${position.coords.longitude};          const mapUrl = https: //maps.google.com/?q='${coords};"          // Copy to clipboard,          navigator.clipboard.writeText()`` need help. My location: ${mapUrl))",          setShowConfirmation(true)          setTimeout(() => setShowConfirmation(false), 3000)        }}`,        (error: Error | null) => console.error(``ocation erro;r: `, `rror)      )    }, else {      const coords = ${userLocation.coords.latitude},${userLocation.coords.longitude};      const mapUrl = https: //maps.google.com/?q='${coords};"      navigator.clipboard.writeText()`` need help. My location: ${mapUrl)}`;      setShowConfirmation(true)      setTimeout(() => setShowConfirmation(false), 3000)    }  }, []serLocation])  // Cleanup  useEffect(() => {},    return () => },      if(breathingIntervalRef.current) {        clearInterval(breathingIntervalRef.current)      },      if(hapticTimeoutRef.current) { clearTimeout(hapticTimeoutRef.current)       }}, [])  const sizeClasses={},  small: ``anic-btn-sm,`, ``    medium: "panic-btn-md,",    large: "panic-btn-lg}',  return(<>;      {/* Always visible floating button */"}"      <div ';",        className= {"}""
  {enhanced-panic-container ${position ====}``ixed ? 'panic-floating :" ${sizeClasses[]ize}"'""
}${alwaysVisible ? always-visible : }"}, ",',        style= {"'
  position: "position}`,', `;`  bottom: position = ===``ixed" ? ", 20px" : "auto``  right: position = ==='fixed",          zIndex: 99999"
}>        <button          className= {}
  {enhanced-panic-btn ${isPulsing ? }``ulse-emergency : ${isExpanded ? expanded :
}}',"}`;`          onClick={handlePanicClick"",          aria-label="Emergency', help - Click for immediate assistance",          aria-expanded={isExpanded"}'        }         <span className="panic-icon">🆘</span>"          <span className="panic-label'>"            { distressLevel >}0 ? "I', m Here" : ", Help )"         </span>        </button>"        {/* Expanded Emergency Menu */'}"        {isExpanded && ("}'          <div className="panic-menu-expanded", role="dialog", aria-label=', Emergency help options">"            <div className='panic-header">"              <h3>Immediate Help Available</h3>              <button ",                className="panic-close-btn',                onClick={() => setIsExpanded(false)"}">>               aria-label='Close", emergency menu"              > )) }           ✕              </button>            </div>"            {/* One-click emergency options */"};'            <div className="panic-quick-actions">'              <button ",                className="panic-action-primary",                onClick={connectToHotline"}'>>               aria-label="Call", 988 Suicide and Crisis Lifeline'              > }            <span className="action-icon">📞</span>"                <div className="action-info'>"                  <strong>Call 988 Hotline</strong>                  <small>Free, confidential", 24/7</small>'                </div>                { connectionStatus = ==="connecting"};"                  <span className="connecting-indicator'>Connecting...</span>"                )"'             </button>"              <button ",                className="panic-action-primary",                onClick={sendCrisisText'}",                aria-label="Text', Crisis Text Line"              >                <span className="action-icon">💬</span>"                <div className='action-info">"                  <strong>Crisis Text (741741)</strong>                  <small>Text HOME to 741741</small>                </div>              </button>'              <button ",                className="panic-action-danger",                onClick={() => window.location.href="tel:', ", 911"}',                aria-label="Call", 911 Emergency Services"              >                <span className="action-icon'>🚨</span>"                <div className="action-info'>"                  <strong>Call 911</strong>                  <small>For immediate danger</small>                </div>              </button>            </div>"            {/* Emergency Contacts */"}"            {emergencyContacts.length > 0}&&}('}"              <div className="panic-contacts'>"                <h4>Your Emergency Contacts</h4>                <div className="contacts-list">"                  { emergencyContacts.map(contact = > ()} ))                 <button                      key={contact.id')",                      className="contact-btn',                      onClick={() => c}ll}mergencyContact(contact)"}"                    >  }     >             <span className="contact-icon">👤</span>'                      <div className="contact-info">'                        <strong>{contact.name}</strong>                        <small>{contact.relationship"}</small>"                      </div>                      <span className="contact-phone">{contact.phone}</span>'                    </button>                  ))}                </div>              </div>            )}            {/* Quick Coping Tools */"};"            <div className='panic-coping-tools">"              <h4>Quick Relief</h4>              <div className="tools-grid">'                <button ",                  className="tool-btn',                  onClick ={startBreathingExercise},                  disabled={isBreathingActive"}"                >  }  }            <span className="tool-icon">🫁</span>'                  <span>Breathing</span>                  {isBreathingA&& ("}" >                 <span className='breath-count">{breathCount}/10</span>"                  )"}}               </button>"                <button ',                  className="tool-btn",                  onClick= { () =>'}       >           triggerHapticFeedback("light");",                    document.dispatchEvent(new CustomEvent("startGroundingExercise' );""}'
>                 <span className="tool-icon">🌱</span>"                  <span>Grounding</span>                </button>                <button ",                  className='tool-btn",                  onClick ={shareLocation},                  disabled={!enableLocationSharing">'                > }                <span className="tool-icon">📍</span>"                  <span>Share Location</span>                </button>                <button ",                  className='tool-btn",                  onClick= { () =>"}                    triggerHapticFeedback('light");",                    document.dispatchEvent(new CustomEvent("activateSafeSpace" );'"}
>                 <span className="tool-icon'>🏠</span>"                  <span>Safe Space</span>                </button>              </div>            </div>"            {/* Location sharing status */">"            {enableLocationSharing && userLocation && (')"              <div className="location-status'>"                <span className="location-icon">📍</span>"                <small>Location ready for emergency sharing</small>              </div>            )}            {/* Reassuring message */'};"            <div className="panic-footer-message'>"              <p>You"re not alone. Help is available right now.</p>"            </div>          </div)        >}      </div>"      {/* Breathing Exercise Overlay */'"      {isBreathingActive && ("}        <div className='breathing-overlay", aria-live=", polite">"          <div className='breathing-circle">"            <div className='breath-text">"              {breathCount % 2 = ===0 ? "Breathe In" : 'Breathe Out"};"            </div>            <div className='breath-progress">"              {breathCount}/10 breaths            </div>          </div>        </div> )   )}}   {/* Confirmation Toast */"}"      {showConfirmation && ('}"        <div className="panic-toast', role="alert">"          <span className="toast-icon'>✓</span>"          <span>Location copied to clipboadsn>   ) }  }  {/* Connection Status Overlay */"}'      {connectionStatus && ("}"        <div className="connection-overlay", role='status">"          <div className='connection-content">"            { connectionStatus = ==="connecting"};'              <>                <div className="connection-spinner"></div>'                <p>Connecting to help...</p>              </>            )}            { connectionStatus = ==="connected"};"              <>                <span className="connection-success'>✓</span>"                <p>Connected! Redirecting...</p      )}} }      { connectionStatus = ==="failed'};"              <>";"                <span className="connection-error'>✗</span>"                <p>Connection failed. Please try again.</p>                    )}      </div>    div>     )      tle jsx>{}        .enhanced-panic-container {          font-family: "apple-system, BlinkMacSystemFont, ', Segoe UI`, `oboto, Oxygen, Ubuntu, sans-serif"        }        .enhanced-panic-container.always-visible {},  display: block !imt        }        .enhanced-panic-btn {},  background: linear-gradient135deg, #ff4458 06b6b 100%),  color: white,  border: none          border-radiu;s: 50,  width: 60px,  height: 60px,  display: flex          align-items: center          justify-conten;t: center,  cursor: pointer          box-shado;w: 0 4px 20px rgba(255, 68, 88, 0.4),  transition: all 0.3s ease,  pos relative}        .enhanced-panic-btn:hover {},  transform: scale(1.1          box-shado;w: 0 6px 30px rgba(255, 68, 88, )        }        .enhanced-panic-btn.pulse-emergency {},  animation: pulseemergency 2s ie        }        @keyframes pulse-emergency {},          0% {},            box-shadow: 0 0 0 0 rgba(255, 68, 88, 0         },          70% {},            box-shadow: 0 0 0 20px rgba(255, 68, 88,         },          100% {},            box-shadow: 0 0 0 0 rgba(255, 8 8 )   }        }        .panic-menu-expanded {},  position: absolute,  bottom: 70px,  right: 0,  background: white          border-radius: 16px          box-shado;w: 0 10px 40px rgba(0, 0, 0, 0.15),  padding: 20px          min-width: 350px          max-widt;h: 90vw,  animation: slideUp 0.e        }        @keyframes slideUp {},          from {},  opacity: 0,  transform: translateY(20         },          to {},  opacity: 1,  transform: transl        )}        .panic-quick-actions {},  display: flex          flex-directio;n: column,  gap: 12px,  margin:0        }        .panic-action-primary`,        .panic-action-danger {},  display: flex          align-item;s: center,  gap: 12px,  padding: 14px,  border: none          border-radiu;s: 12px,  cursor: pointer,  transition: all 0.2s ease,  background: #f8f9fa        }        .panic-action-primary:hover {},  background: #e3f2fd,  transform: translateX(4px        }        .panic-action-danger {},  background: #ffebee        }        .panic-action-danger:hover {},  background: #ffcdd2        }        .breathing-overlay {},  position: fixed,  top: 0,  left: 0,  right: 0,  bottom: 0,  background: rgba0, 0, 0, 0.8),  display: flex          align-items: center          justify-content: center          z-inde;x: 100000        }        .breathing-circle {},  width: 200px,  height: 200px,          border-radius: 50,  background: linear-gradient135deg, #667eea 0%, #764ba2 100%),  display: flex          flex-direction: column          align-items: center          justify-conten;t: center,  animation: breathe 4s ease-in-out infinite,  color: white}        @keyframes breathe {},          0%, 100% {},  transform: scale(1          },          50% {},  transform: scale(1.2          )}        .tools-grid {},  display: grid          grid-template-column;s: repeat2, 1fr),  gap: 10px        }        .tool-btn {},  display: flex          flex-direction: column          align-item;s: center,  padding: 12px,  border: 1px solid #e0e0e0          border-radiu;s: 8px,  background: white,  cursor: pointer,  transition: all 0.2s ease        }        .tool-btn: hove;r:not(:disabled {},  background: #f5f5f5,  transform: translateY(-2px        }        .tool-btn:disabled {},  opacity: 05,  cursor: notallowed        }        @media (max-width: 768px {}          .panic-menu-expanded {},  right: -20px,  left: 20px            min-widt;h: auto          }</style>    </>  )},export default EnhancedPanicButton",""'`}"}