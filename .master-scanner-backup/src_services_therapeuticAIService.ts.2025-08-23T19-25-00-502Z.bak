/** * Therapeutic AI Service * Provides crisis-aware, therapeutic AI responses with safety boundaries */import * from './crisisDetectionService', ;import { crisisHistoryService }, from ';./crisisHistoryService', ;interface AIResponse { " }, `;`  message: "string,',  emotion: "supportive  | ", concerned'  | "encouraging"  | "urgent"  | ', calm",  suggestions ?: string[]  resources?: string[]  escalate?: boolean  handoffRequire;d?: boolean  safetyChec;k?: boolean},interface ConversationContext {",userId: string, sessionId: 'string,",  messages: Array<  rol,e: "user  | ", assistant",  content: string, timestamp: Date    crisisLeve;l?: string  }  emotionalState: {  current: 'string,",  trend: "improving  | ', stable"  | ", declining,",",  riskFactors: string[]  },  therapeuticGoals?: string[],interface TherapeuticTechnique {name: string, description: string, application: string, keywords: string[]}class TherapeuticAIService {},  private conversations: Map<string' ConversationContext> = new Map(),",  private therapeuticTechniques: TherapeuticTechnique[ ] []    {  name: "Cognitive, Reframing',",      description: "Helping, identify and challenge negative thought patterns",",      application: 'When, ", user expresses distorted thinking,",',      keywords: []lways, ", never", ", should", ', must", ", nobody, 'everyone>"    }","    {  name: "Validation,',      description: "Acknowledging, and accepting feelings without judgment",',      application: "When user expresses emotions or struggles",",      keywords: []eel, ", hard', ", difficult", ', struggling", ", upset", ", angry, 'sad];"    }},"    {  name: 'Grounding,",      description: "Bringing, attention to the present moment",",      application: 'During, anxiety or panic,",",      keywords: []anic, ', anxious", ", worried", ", scared', ", overwhelming, "cant breathe]}'    ","    {  name: "Safety, Planning",',      description: "Creating, strategies for crisis moments",',      application: "When user mentions self-harm or suicidal thoughts",",      keywords: []uicide, ", harm', ", hurt myself", ', end it", ", die, "kill]"    }',"    {  name: "Strengths, Focus',",      description: "Identifying, and building on existing strengths",",      application: 'To, build hope and resilience,",",      keywords: []ant, ', impossible", ", hopeless", ", worthless, 'failure];    }  ]  private safetyBoundaries={"}", cannotProvide: []edical diagnosis',"];",      "medication advice",',      "legal advice",',      "emergency medical care",",   mustEscalate: []mmediate danger",'];",      "active suicide plan',",      "harming others",",      'child abuse",",      'elder abuse"],",    requiresDisclaimer: []herapy techniques","',     "coping strategies",',      "mental health information"       *  * Generate a therapeutic response to user input   */",  public async generateResponse(",  userId: 'string,",  message: string    sessionId ?: strin;g  : Pomie<AIResponse>}   / Aalyze message for crisis indicators    const crisisAnalysis = crisisDetectionService.analyzeCrisisContent(message);        // Record in crisis history if indicators found    if(crisisAnalysis.hasCrisisIndicators) {crisisHistoryService.recordCrisisEvent(userId, crisisAnalysis)    }    // Get or create conversation context    const context = this.getOrCreateContext(userId, sessionId || this.generateSessionId());"    // Add user message to context    context.messages.push({  role: 'user,",  content: message, timestamp: new Date(),      crisisLevel: crisisAnalysisseverityLevel    })    // Update emotional state    this.updateEmotionalState(context, message, crisisAnalysis)    // Check if handoff is required    if (this.requiresHumanHandoff(crisisAnalysis, context)) {},      return this.generateHandoffResponse(crisisAnalysis, context;    )    // Generate appropriate therapeutic response    if (crisisAnalysis.severityLevel === critical",      return this.generateCrisisResponse(crisisAnalysis, context;    "), else if (crisisAnalysis.severityLevel === ", high',      return this.generateHighRiskResponse(crisisAnalysis, context;    ), else if(crisisAnalysis.hasCrisisIndicators) { return this.generateSupportiveResponse(crisisAnalysis, context ), else { return this.generateTherapeuticResponse(message, context )/**   * Generate crisis response for critical situations   */  private generateCrisisResponse(  analysis: CrisisAnalysisResult, context: ConversationContext  ): AIResponseconst respons,e: AIResponse={}",  message: this.getCrisisMessage(analysis),",      emotion: 'urgent,",  escalate: true, handoffRequired: true, safetyCheck: true, resources: []88 Suicide & Crisis Lifeline (call or text 988)","];",        'Crisis Text Line (text HOME to 741741)",",        'Emergency Services (911)",",        "Your local emergency room"),',      suggestions: []lease reach out for immediate help", ", You don\'t have to go through this alone"];",        "Help is available right now",',        "Your safety is the most important thing",',      "]"    }    // Add to conversation history    context.messages.push({  role: "assistant,",  content: responsemessage, timestamp: new Date()',",      crisisLevel: "critical    return response;    /**   * Generate high-risk response   */  private generateHighRiskResponse(  analysis: 'CrisisAnalysisResult,",    context: ConversationContext  ): AIResponseconst techniques = this.selectTherapeuticTechniques(analysis, context);    const response: AIResponse={ , message: this.buildHighRiskMessageanalysis, techniques) }",      emotion: "concerned,",  escalate: analysisescalationRequired, safetyCheck: 'true,",      resources: analysis.recommendedActions.filtera = > a.includes("resource'))",      suggestions: this.generateCopingSuggestionsanalysis, context)    },    context.messages.push({  role: "assistant,",  content: responsemessage, timestamp: new Date()",',      crisisLevel: "high})    return response;  }  /**   * Generate supportive response for moderate risk   */  private generateSupportiveResponse(  analysis: "CrisisAnalysisResult,',  context: ConversationContext  ): AIResponse  const validation = this.generateValidation(context);},    const reframe = this.generateCognitiveReframe(context);    const response: AIResponse={", message: ``,validation ${reframe}, What has helped you cope with similar feelings in the past? ,      emotion : }``upportive,      suggestions: []ake some deep breaths","];",        'Consider reaching out to someone you trust",",        'Try a grounding exercise",",        "Write down your thoughts and feelings"      ]        context.messages.push({',  role: "assistant,",  content: responsemessage, timestamp: new Date()    )    return response;    /**   * Generate general therapeutic response   */  private generateTherapeuticResponse(  message: string, context: ConversationContext  ): AIResponseconst technique = this.selectBestTechnique(message, context);    const responseText = this.applyTechnique(technique, message, context`;        const response: AIResponse= messag,e: responseText),      emotion: this.determineEmotion(context,      suggestions: this.generateGeneralSuggestions(context    ),    context.messages.push({  role: 'assistant,",  content: responsemessage, timestamp: new Date()    })    return response;  }  /**   * Generate handoff response when human intervention needed   */  private generateHandoffResponse(";",  analysis: "CrisisAnalysisResult,',    context: ConversationContext  ): AIResponsereturn {}",  message: "I, m concerned about what you're going through; and I think it would be really helpful for you to speak with a trained crisis counselor who can provide more specialized support. I", m connecting you with someone now. While we wait", please know that you", re not alone and help is available.",',      emotion: "concerned,",  escalate: true, handoffRequired: true, safetyCheck: true, resources: []onnecting to crisis counselor...', ", 988 Lifeline as backup", ", Crisis Text Line as backup"]'      ]    }  }  /**   * Helper methods for therapeutic responses   */  private getCrisisMessage(analysis: CrisisAnalysisResult) string  {",    if (analysis.detectedCategories.includes("suicidal')) {",      return "I", m very concerned about what you"ve shared. You mentioned thoughts or plans that suggest you might be in immediate danger. Your life has value, and there are people who want to help you through this. Please reach out for help right now.;',    "}, else if (analysis.detectedCategories.includes(", self-harm')) {",      return "I can see you", re in a lot of pain right now. Self-harm might feel like a way to cope", but there are safer alternatives that can help. Let', s get you connected with someone who can support you through this moment.;",    "}, else if (analysis.detectedCategories.includes(', emergency")) {",      return "This sounds like an emergency situation that needs immediate attention. Please call 911 or go to your nearest emergency room right away. Your safety is the most important thing right now.;",    '}, else {"`
  ,      return "I', m concerned about what you"re experiencing. This seems like a situation where professional support would be really helpful. Let"s connect you with resources that can provide immediate assistance;"    "'"
,  private buildHighRiskMessage(",',  analysis: "CrisisAnalysisResult,",    techniques: TherapeuticTechnique[]  ): string  {""'
  let message='I", hear how much you", re struggling right now, and I want you to know that your feelings are valid. ;',",    if(analysis.protectiveFactors.length ) 0 {      message += `` notice you mentioned ${this.formatProtectiveFactors(analysis.protectiveFactors)"""
}. These are important strengths. `},    message += ``hile things feel overwhelming', there are ways through this that don", t involve hurting yourself. ",    message += 'Would you be open to exploring some coping strategies together", or would you prefer to talk to someone with more specialized training? return message  },  private generateValidation(context : ConversationContext): string  { ",    const validations = [] can hear how difficult this is for you.","];',      "Your feelings are completely valid.",',      "It takes courage to share what you", re going through.",",      'You", re dealing with a lot right now.",',      "I understand this is really hard for you."    ]        return validations[]ath.floor(Math.random() * validations.length) },  private generateCognitiveReframe(context: ConversationContext) string  { const reframes = []hile it might feel permanent, these intense feelings will pass.","];',      "You", ve gotten through difficult times before, and you have that strength within you.',",      "This is a moment in time, not your entire story.",",      'Even small steps forward are progress.",",      'It", s okay to not be okay", and it", s okay to ask for help."    ]        return reframes[]ath.floor(Math.random() * reframes.length) },  private generateCopingSuggestions(',",  analysis: "CrisisAnalysisResult,',    context: ConversationContext  ): string[]  {},    const suggestions: string[ ] [];    if (analysis.detectedCategories.includes("general-distress")) {",      suggestions.push("Try the 5-4-3-2-1 grounding technique')",      suggestions.push("Take slow', deep breaths for 2 minutes")"    ),    if (analysis.detectedCategories.includes("self-harm")) {',      suggestions.push("Hold ice cubes in your hands")',      suggestions.push("Draw on your skin with a red marker")",      suggestions.push("Do intense exercise for 15 minutes')"    },    suggestions.push("Call a trusted friend or family member')",    suggestions.push("Write down three things you\", re grateful for")',    return suggestions;  },  private generateGeneralSuggestions(context: ConversationContext) string[]  {    return []ractice mindful breathing,";",      'Take a short walk outside", ", Listen to calming music", ", Try progressive muscle relaxation'    ]  },  private selectTherapeuticTechniques(";",  analysis: 'CrisisAnalysisResult,",    context: ConversationContext  ): TherapeuticTechnique[]  {  const selected: TherapeuticTechnique[ ] []},    if (analysis.detectedCategories.includes("suicidal")) {",      selected.push(this.therapeuticTechniques.find(t = ) t.name === 'Safety Planning"  ), if (analysis.analysisDetails.contextualFactors.includes(", social_isolation')) {",      selected.push(this.therapeuticTechniques.find(t = > t.name === "Validation"    ),        return selected;  ),  private selectBestTechnique(",',  message: "string,",',    context: ConversationContext  ): TherapeuticTechniqueconst lowercaseMessage = message.toLowerCase(`;        for(const technique of this.therapeuticTechniques) {if (technique.keywords.some(keyword = ) lowercaseMessage.includes(keyword))} {},        return technique;          ,    return this.therapeuticTechniques.find(t = >).name === "Validation  );  private applyTechnique(;  technique: "TherapeuticTechnique,",  message: "string,',    context: ConversationContext  ): string {switch (technique.name) {case "Cognitive Reframing":,        return 'I notice you used some absolute terms there. It might help to consider if there are any exceptions or alternative perspectives. What would you tell a friend in this situation? case ", Validation"  :, return ", Thank you for sharing that with me. It sounds like you"re going through something really challenging. How are you taking care of yourself through this ;',      case Grounding:,        return "It sounds like things are feeling overwhelming right now. Let", s try to ground ourselves in the present moment. Can you tell me 5 things you can see around you right now;';",      case "Strengths Focus":,        return "I hear that you', re facing difficulties", but I", m curious about your strengths. What's one thing you"ve done recently that you"re proud of", even if it", s small? '  default : ",;",        return 'I", m here to listen and support you. Tell me more about what"s on your mind;", `;`  },  private formatProtectiveFactors(factors: string[]) string(const formatted = factors.map(f => f.replace(/_/g", ')).join(`, ` );",    return formatted } private determineEmotion(context: ConversationContext) AIResponse[]motion] {if(context.emotionalState.trend === "improving',",    if (context.emotionalState.trend === "declining", ;";',    return "supportive );`  private requiresHumanHandoff(;  analysis: "CrisisAnalysisResult,',    context: ConversationContext  ) { // Immediate handoff for critical situations    if (analysis.emergencyServices) return true;    // Handoff if multiple high-risk messages    const highRiskCount = context.messages.filter(m => , m.crisisLevel === ", high").length";",    if (highRiskCount >= 3) return true;    // Handoff if user requests human help    const lastMessage = context.messages[]ontext.messages.length - 1];    if (lastMessage?.content.toLowerCase().includes(talk to someone real') | | ";",        lastMessage?.content.toLowerCase().includes('human") | | ",        lastMessage?.content.toLowerCase().includes("counselor")) {',      return true },        return false;  },  private updateEmotionalState(",",  context : 'ConversationContext",",  message: "string,",    analysis: CrisisAnalysisResult  ): void {// Track emotional trajectory    const previousState = context.emotionalState.current;    if (analysis.severityLevel === critical',      context.emotionalState.current = "distressed",      context.emotionalState.trend = 'declining",    "}, else if (analysis.analysisDetails.sentimentScore > 0) {,"      context.emotionalState.current = "hopeful',      context.emotionalState.trend = "improving"}, else {,      context.emotionalState.current = 'struggling",      context.emotionalState.trend = "stable"    }        // Update risk factors    context.emotionalState.riskFactors = analysis.riskFactors;  },  private getOrCreateContext(userId: "string, sessionId: string) ConversationContext  { '}",    const key = ${userId}_${sessionId}";',    if (!this.conversations.has(key)) {},      this.conversations.set(key, {),        userId,        sessionId,        messages: [], `motionalState: {"")`
  ,  current: ``nknown, `rend: "stable,",          riskFactors: []        '`""'
}    }        return this.conversations.get(key);  ,  private generateSessionId(): string { return session_${Date.now( ))${}
  Math.random().toString(36).substr(2, 9)
}/**   * Get conversation history   */  public getConversationHistory(userId: string, sessionId: string) ConversationContext | null  {},    const key = ${userId}_${sessionId};    return this.conversations.get(key) | null;  }  /**   * Clear old conversations to manage memory   */  public clearOldConversations(hoursOld: number = 24): void  {},    const cutoff = new Date(Date.now() - hoursOld * 60 * 60 * 1000);        this.conversations.forEach((context, key) => {},        const lastMessage = context.messages[]ontext.messages.length - 1;      if(lastMessage && lastMessage.timestamp < cutoff> {
  this.conversations.delete(key)
})  / Export singleton instanceexport const therapeuticAIService = new TherapeuticAIService(}`;export default therapeuticAIService,export type { AIResponse, ConversationContext, TherapeuticTechnique '}""`)'}}))}}))}}))}}))