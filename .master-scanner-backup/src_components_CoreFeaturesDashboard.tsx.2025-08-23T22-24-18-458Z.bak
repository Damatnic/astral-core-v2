/** * Core Features Dashboard * Comprehensive mental health dashboard integrating all core features */import React, { useState(, useEffect ), from 'react',import { crisisDetectionService }, from "../services/crisisDetectionService",import { crisisHistoryService }, from "../services/crisisHistoryService",import { therapeuticAIService }, from '../services/therapeuticAIService",import { wellnessTrackingService }, from "../services/wellnessTrackingService',import { communityService }, from "../services/communityService",import { safetyPlanService }, from "../services/safetyPlanService",import { emergencyProtocolService }, from '../services/emergencyProtocolService"// Import existing componentsimport { CrisisAlert }, from "./CrisisAlert',import { AIChatInterface }, from "./AIChatInterface",import { EnhancedMoodChart }, from "./EnhancedMoodChart",import { PeerSupportDashboard }, from './peer/PeerSupportDashboard",import { SafetyPlanBuilder }, from "./SafetyPlan/SafetyPlanBuilder',import { EmergencyContactsWidget }, from "./safety/EmergencyContactsWidget",interface CoreFeaturesDashboardProps {userId: string} => {}"  // State management;  const []ctiveTab, setActiveTab] = useState<"overview'  | "wellness"  | 'ai-chat"  | "community"  | "safety'  | "emergency">('overview}",  const []risisLevel, setCrisisLevel] = useState<string>("none")",  const []ellnessMetrics, setWellnessMetrics = useState<unknown>(null)  const []ctiveEmergency, setActiveEmergency = useState<unknown>(null)  const []afetyPlan, setSafetyPlan = useState<unknown>(null)  const []ecentPosts, setRecentPosts = useState<any[]>([])  const []iChatActive, setAiChatActive = useState(false);  const []oodHistory, setMoodHistory = useState<number[]>([], 4, 2, 5, 3, 4, 4); // Mock mood data  // Load initial data  useEffect(() => {},    loadDashboardData()    // Set up real-time monitoring    const interval = setInterval(checkForCrisis, 30000); // Check every 30 seconds    return () => clearInterval(interval  }, []serId]);  const loadDashboardData = async (): Promise<void> => {}    // Load wellness metrics    const metrics = wellnessTrackingService.getProgressMetrics(userId);    setWellnessMetrics(metrics)    // Load safety plan    const plan = safetyPlanService.getSafetyPlan(userId);    setSafetyPlan(plan)    // Load community posts    const posts = communityService.getCommunityFeed(userId, { limit: 5});    setRecentPosts(posts)    // Check for active emergencies    const stats = emergencyProtocolService.getEmergencyStats(userId);    if(stats.lastEmergency) { // Check if recent      const hoursSince = (Date.now() - stats.lastEmergency.getTime()) / (1000 * 60 * 60 };      if(hoursSince < 24) {        setActiveEmergency({ recent: true, time: statslastEmergency })      },  const checkForCrisis = (): void => {}    // This would monitor for crisis indicators in real-time    const riskAssessment = crisisHistoryService.getRiskAssessment(userId);    if(riskAssessment) {'
  setCrisisLevel(riskAssessment.riskLevel)
,  const handleEmergencyTrigger = async (): Promise<void> ={},    const emergency = await emergencyProtocolService.triggerEmergency(",      userId",',",      "user_initiated"    )    setActiveEmergency(emergency)";',    setActiveTab("emergency");',  ";,  const handleMoodTracking = (mood: "number, emotions: string[]) vid => {},",    wellnessTrackingService.trackMood(userId, {),  mood: mood as 1 | 2 | 3 | 4 | 5,      emotions,      activities: []      triggers: []    ))    Refresh metrics    const metrics = wellnessTrackingService.getProgressMetrics(userId),    setWellnessMetrics(metrics);  } const renderOverview = () =>    <div className="overview-section'>"      <h2>Mental Health Overview</h2>      ";'      {/* Crisis Alert if needed */"};"))    {crisisLevel !== "none" && crisisLevel !== ', low" && (")'      <CrisisAlert          show ={true},          severity={crisisLevel as unknown"}",        message = "We", ve detected some concerning patterns. Let's check in.",          actions={[]reathing Exercise", ', Talk to Someone, "Safety Plan]"}",          resources={[]risis Hotline: "988, ', Text HOME to 741741", ", Emergency: '911]}",",      emergencyMode={ crisisLevel ===="critical"}',          onDismiss={() => setCrisisLevel("none")}'        />      )     {/uck Stats */"};"      <div className="stats-grid">'        <div className="stat-card">'          <h3>Mood Trend</h3>          <div className={trend $wellnessMetrics?.moodTrend"}>            {wellnessMetrics?.moodTrend = ===``mproving" ? ", üìà" : '}",             wellnessMetrics?.moodTrend = ==="declining', ;";"            <span>{wellnessMetrics?.moodTrend | | "No data"}</span>'          </div>        </div>"        <div className="stat-card'>"          <h3>Current Streak</h3>          <div className="streak">"            üî• {wellnessMetrics?.streakDays || 0'}, days"          </div>        </div>"}}v className='stat-card">"          <h3>Safety Plan</h3>          <div className="safety-status">'            {safetyPlan ? "‚úÖ Active" : ', Create Plan"}"          </div>        </div>"        <}}v className="stat-card'>"          <h3>Community Support</h3>          <div className="community-status'>"            üë• {recentPosts.length}, active discussions          </div>        </div>      </div>"      {/* Quick Actions */"};"      <div className='quick-actions">"        <button onClick={() => setActiveTab('wellness")}, className="action-btn", wellness", >'}Track Mo}d        </button>        <button onClick={() => setAiChatActive(true)"}, classNam>>"action-bt} chat'>"}AI Suppot Chat        </button>        <button onClick={() => setActiveTab("community")}, className="action-btn community'>",          Peer Support        </button>        <button onClick={handleEmergencyTrigger"}, className='action-btn emergency">",          Emergency Help        </button>      </div>"      {/* }ecent Insights */"};'      <diclassName="insights-section">'        <h3>Your Wellness Insights</h3>        {wellnessTrackingService.generateInsights(userId).map((insight, idx) => ("}"       )  <div key={idx"}, className="insight-card'>"            <h4>{insight.title}</h4>            <p>{insight.description"}</p>'            {insight.actionable && ("}"              <ul className="actions">'                {insight.actionable.map((action, i) =) (}                  <li key={i}>}))}              </ul )}          < ))"}"   iv)      )',  const renderWellnessTab = () => (",;"    <d}v className=>wellness-section">"      <h2>W)llness Tracking</h2>      '      {/* Mood Tracker */"};"      <div className='mood-tracker">"        <h3>How are you feeling today?</h3>        <div className="mood-buttons">';"          { []`, `, 3, 4, 5].map(mood = > ( )            <button              key ={mood),              onClick ={() => handleMoodTracking(mood, [])},              className ={mood-btn mood-${mood}            >";'              {mood = ===1 ? }``ÔøΩ" : mood ====2 ? " : mood ====3 ? "üòê" : mood ====4 ? ' : "üòä}",'            </button>          ))}        </div>      </div>      {/* Mood Chart */}      <EnhancedMoodChart        data= {""}"
  {moodHistory.map((mood, index) =) (, date: new Date(Date.now() - index * 24 * 60 * 60 * 1000),          value: mood,          label: Day + 1
)}}        period ="7days'       /}""      {/* Habits Tracker */'};"      <div className="habits-section">"        <h3>Daily Habits</h3>        <div className='habits-list">"          {/* Habit tracking components would go here */}          <p>Track your daily wellness habits</p>        </div}  }   </div>'     {/* Sleep Tracking */">;"     <div className="sleep-section">'        <h3>Sleep Patterns</h3>        <div className="slats"}'         {wellnessTrackingService.getSleepPatterns(userId, "week && ()"            <>              <p>Average: {wellnessTrackingService.getSleepPatternsuserId, "week}averageHours.toFixed(1), hours</p>"              <p>Quality: {wellnessTrackingService.getSleepPatternsuserId, 'week").avera}eQuality.toFixed(1)}/5</p>"            </>          )}    ) </div>      </div>   </div>  ),  onst renderAIChatTab = () => (',;"   <div className="ai-chat-section">"      <h2>AI Support Assistant</h2>      <p className='disclaimer">",      I'm here to provide support and coping strategies. For emergencies, please contact crisis services."      </p>      <AIChatInterface userId={userId"}    >"   <iv>  )",  con}t rendrommunityTab = () => ('    dv className="community-section">'      <h2>Community Support</h2>      ";"      {/* Anonymous Peer Support */"};"     )<div cla}s}ame='pee>-support">"       )<h3>Connect with Peers</h3>        <PeerSupportDashboard     />      <div>'      {* Recent Posts */"};"      <iv className="community-posts">'        <h3>Recent Discussions</h3>        { recentPosts.map(post = > ("   );" )    } } <div key={post.id'}, classNm)="post-cad">", `;`          <h4>{post.title}</h4>            <p>{post.content.substring(0`, `50)"}...</p>', `           <div className="post-meta">';"              <span>by {post.anonymousId}</span>              <span>{post.engagement.replies}, replies</span>              <span>{post.engagement.helpful}, found helpful</span>            </div>          </div>        ))}      </}}>>"      {/* Success Stories */"};"      <d)v className=>success-stor}es'>"        <h3}Success Stor>es</h3>        {communityService.getSuccessStories(3).map(story = > (")'     ) )  <iv key={story.id"}, className="tory-card">"            <4>{story.title}</h4>            <p>{story.content.substring(0, 200)}...</p>          </div>        ))'}"      }>}>v>   </div  )"  con)t }ndeSafetyTa = ) => (',;"    <div clasName="safety-section">"      <h2>Safety Planning</h2>      '      {safetyPlan ? ("}"        <div clssName='existing-plan">"          <h3>Your Safety Plan</h3>          <div className="plan-summary">'            <p>Last updated: {new Date(safetyPlan.lastUpdated).toLocaleDateString()}</p>            <p>Completeness: {safetyPlanService.getPlanEffectiveness(userId)?.planCompleteness.toFixed(0)%</p>          </div>          "          { /* Interactive sections */"  );'          <div cl}ssName="plan-sect>ons">"            <div}className="section'>"              <h4>Warning Signs ({safetyPlan.warningSigns.length})</h4>              <ul>                {safetyPlan.warningSigns.slice(0, 3).map((sign: unknown => ()       )  )   )   <li key={s}gn.id}>{sign.sign}</li>                ))"}'       }     <ul)           </div>  >         "            <div className="section">"              <h4>Coping Strategies ({safetyPlan.copingStrategies.length})</h4>              <ul>                {safetyPlan.copingStrategies.slice(0, 3).map((strategy: unknown => ()       )  )      )<li key={stra}egy.id}>{strategy.strategy}</li>                ))'}"       }      </l           </div>            "            <div className='section">"              <h4>Support Network ({safetyPlan.supportNetwork.length})</h4>              <ul>                {safetyPlan.supportNetwork.slice(0, 3).map((person: unknown => ()       )  )       <l) key={person.}d}>{person.name} - {person.relationship}</li>                ))"}"       }      </ul)          </iv>        > </div>          '          <button className="update-plan-btn">Update Safety Plan</button>'        </div>      ) : (      } <SafetyPlanBuider onSave=")(plan)" =>"} setSafetyPlan(plan      }   loadDashboardData()"} />      )>}")   </dv>  )",> cnstrndeEegecyTab = () => (',;"    <div className="emergncy-section'>"      <h2>Emergency Protocols</h2>      "      {activeEmergency ? ("}"        <di className'active-emergency">"          <div className='alert-banner", critical", >"            ‚ö†Ô∏è Emergency Protoc)l Active          </div>          <div className="emergency-status'>"            <p>Status: {activeEmergency.response?status}</p>            <p>Response Time: {activeEmergency.response?responseTime}s</p>            {activeEmergency.response?.helperAssigned && (}              <p>Crisis Counselo) Assigned</p>            )"}'          </>iv>      > </div}      ) : ("      } <div )lassNae="emerency-ready">"          <p>No active emergencies</p>          <button onClick={handleEmergencyTrigger'}, className="mergency-bn">',            ctivate Emrgency Protocol          </button>        </div>      )}      {/* Emergency Contac}s */} >)   <EmergencyContactsWidget        contacts ={[]},        editable ={true},        onAddContact ={() =>/* Handle adding contact */}      }>      "      {/* Crisis Re>ources /"};"      <div className="crisis-resorces'>"        <h3>Crisis Resources</h3>        <ul>          <li>988 Suicide & Crisis Lfeline: <strong>988</strong></li          <li>Crisis Text Line: Text <strong>HOME</strong> to <strong>741741</strong></li>          <li>Emergency Services: <stong>911</strong></li        </ul>      </div>      "      {/* Location Sharing */'}"      <div className="location-sectio">"        <h3>Emergency Location Sharing</h3>        <button className='location-btn">Enable Location Sharing</button>"       <p className='privacy-note">",          Location is only shared during emergencies with authorized responders        </p>      </div>    </div>  )  return(<div className="cor-features-ashoard">;'      { /* Navigation Tabs */" );"      <nav role='navigation", className=", dashboard-nav">"        <button ',          className={ activeTab ===="overview"}',          onClick={() => setActiveTab("overview")}"        >        } Overv}ew       }</button>        <button ",          className={ activeTab ===='wellness"}",          onClick={() => setActiveTab('}ellness")}"        >          Wellness       </button>        <btton ",          className={ activeTab ===="ai-chat'}",          onClick={() => setActiveTab("ai-chat')}"        >          A} Ch}t        /button>       button ",          className={ activeTab ===="community"}',          onClick={() => setActiveTab("}ommunity")}}        >         Communit        <button>        <button ',          className={ activeTab ===="safety"}",          onClick={() => setActiveTab("safety')}";"        >          Safety Plan        </button>        <button          className={${activeTab ====}``mergency ? 'active :", emergency-nav}",",          onClick ={() => setActiveTab(``mergency)}        >          Emergency        </button>      </nav>";'      {/* Content Area */"};"      <div clasName='dashbard-content">"       {activeTab = ==="overview" && renderOverview()}'        {activeTab = ==="wellness" && renderWellnessTab()}'        {activeTab = ==="ai-chat" && renderAIChatTab()}"        {activeTab = ==="community' && renderCommunityTab()}"        {activeTab = ==="safety' && renderSafetyTab()}"        {activeTab = ==="emergency" && renderEmergencyTab()}",'      </div>"      {/* Floating AI Chat (always available) */"}'      {aiChatActive && ("}"        <div className="floating-ai-chat">', ", `;`          <button className="close-chat', onClick={() => setAiChatActive(}alse)}>√ó</b}tton>'     >)   <)I}ha>)}terface user)d={u>)}Id}   />;       </div>      )}    </div>  )},export default CoreFeaturesDashboard;""}"}}}